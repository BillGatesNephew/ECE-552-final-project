# max number of threads to support
-threads:max                      1 
# do forking in fetch stage
-fork:in_fetch                 true 
# penalty charged to forked-off path
-fork:lat                         3 
# if fork-in-dispatch, try to approx fork-in-fetch
-fork:approx_in_fetch         false 
# if fork-in-dispatch, charge mplat against fork down not-taken path
-fork:penalize_fork_nt         true 
# only fork on predicted path
-fork:prune                   false 
# max no. cache lines to fetch in one cycle
-fetch:num_cache_lines            1 
# max no. cache lines to fetch in one cycle (zero: no limit)
-fetch:max_lines_per_thread            0 
# max no. insts from a cache line that can be fetched as one unit
-fetch:max_fetchable_per_line            4 
# instruction fetch queue size (in insts)
-fetch:ifqsize                    4 
# extra branch mis-prediction latency
-fetch:mplat                      3 
# max number of in-flight branches allowed per_thread (0 = no limit)
-fetch:max_in_flight_branches            4 
# fetch priority policy (simple_rr|old_rr|pred_rr|omni_pri|two_omni_pri|pred_pri|pred_pri2|ruu_pri)
-fetch:pri_pol            simple_rr 
# pri lev for corr. thread under two_omni_pri
-fetch:two_pri_lev                2 
# pri lev for pred path under pred_pri
-fetch:pred_pri_lev               2 
# pri lev for least-insts-in-ruu under ruu_pri
-fetch:ruu_pri_lev                2 
# branch predictor type {nottaken|taken|perfect|bimod|2lev|hybrid}
-bpred                        bimod 
# bimodal pred cfg (<cntr_bits> <tbl_size> <retstack_size> <agree?>)
-bpred:bimod           2 2048 8 0 
# 2lev pred cfg (<cntr_bits> <l1_sz> <l2_sz> <hist_sz> <retstack_size> <gshare?> <agree?> <spec-update?> <spec-update repair?>)
-bpred:2lev            2 1 1024 8 8 0 0 0 1 
# 2lev pred cfg #2 (<cntr_bits> <l1_sz> <l2_sz> <hist_sz> <retstack_size> <gshare?> <agree?> <spec-update?> <spec-update repair?>)
-bpred:2lev2           2 1024 1024 8 0 0 0 0 1 
# hybrid predictor config (<cntr_bits>:<tbl-sz>:<pred1>:<pred2>:<sh-reg-sz>:<retstack_sz>:<gshare?>:<spec-update?>:<spec-update repair?>)
-bpred:hybrid          2:4096:bimod:2lev2:12:8:0:0:1 
# BTB config (<num_sets> <associativity>)
-bpred:btb             512 4 
# retstack size
-bpred:retstack                   8 
# use retstack size from the PHT config instead of from '-bpred:retstack'
-bpred:use_old_retstack_interface        false 
# for multipath: what type of retstack? (one, one_pred, per, tosp_per)
-bpred:per_thread_retstack     one_xxxx 
# hash global with local history bits; argument specifies global history size
-bpred:merge_hist                 0 
# hash shifted global with local history bits; argument specifies global history size
-bpred:merge_hist_shift            0 
# concatenate global and local history bits; argument specifies global history size
-bpred:cat_hist                   0 
# hash shifted baddr with global history bits; argument specifies address left-shift
-bpred:gshare_shift               0 
# number of low-order br-address bits (beyond the automatic 3) to drop for gshare
-bpred:gshare_drop_lsbits            0 
# update bpred in writeback? (ie speculatively)
-bpred:spec_update            false 
# update bpred perfectly in decode?
-bpred:perf_update            false 
# percentage of mispredictions to boost (as a fraction)
-bpred:synthetic_boost       0.0000 
# percentage of good predictions to make incorrect (as a fraction)
-bpred:synthetic_decrease       0.0000 
# correct address prediction for br's w/ correct direction?
-bpred:fix_addrs              false 
# correct address prediction for indir jumps?
-bpred:fix_addrs_indir        false 
# correct address prediction for indir jumps but not for retstack?
-bpred:perf_except_retstack        false 
# output cbr history bit-stream to a file?
-cbr:hist                     false 
# output cbr accuracy bit-stream to a file?
-cbr:acc                      false 
# output cbr distributions?
-cbr:dist                     false 
# 0: no patching, 1: patch TOS pointer only, 2: also patch TOS contents
-bpred:retstack_patch_level            2 
# bconf predictor type (naive|omni|ones|sat|reset|pattern)
-bconf                        naive 
# bconf predictor threshold selector (none|profile|hw)
-bconf:selector                none 
# speculatively update the branch confidence predictor?
-bconf:spec_update            false 

# update bconf perfectly in decode?
-bconf:perf_update            false 

# thresholds for the bconf predictor (<t1> <t2> <t3>)
-bconf:thresholds      7 

# number of entries in the branch confidence prediction table
-bconf:table_size              1024 

# number of bits per entry in the branch confidence prediction table
-bconf:table_width                8 

# xor global history bits with branch-address bits?
-bconf:gshare                     1 

# output bconf correct/incorrect patterns?
-bconf:dist                   false 

# squash forks for correctly-pred branches?
-bconf:squash_extra           false 

# fork (if possible) on any misprediction?
-bconf:fork_mispred           false 

# use bconf history to update bconf table entries?
-bconf:hist_update                0 

# bconf configuration file name
# -bconf:config_file         <null> 

# instruction decode B/W (insts/cycle)
-decode:width                     4 

# extra decode latency
-decode:extra_lat                 0 

# instruction issue B/W (insts/cycle)
-issue:width                      4 

# int instruction issue B/W (insts/cycle)
-issue:int_width                  4 

# fp instruction issue B/W (insts/cycle)
-issue:fp_width                   4 

# run pipeline with in-order issue
-issue:inorder                false 

# issue instructions down wrong execution paths
-issue:wrongpath               true 

# extra issue latency (for extra (eg register-read) stages)
-issue:extra_lat                  1 

# integer issue queue (IIQ) size
-issue:intq_size                 16 

# fp issue queue (FIQ) size
-issue:fpq_size                  16 

# gives priority to mem, br, and long-lat ops
-issue:aggressive              true 

# remove RUU/LSQ entries squashed by mispredicts, or propagate them to commit?
-squash:remove                 true 

# register update unit (RUU) size
-ruu:size                        16 

# load/store queue (LSQ) size
-lsq:size                         8 

# instruction commit B/W (insts/cycle)
-commit:width                     4 

# l1 data cache config, i.e., {<config>|none}
-cache:dl1             dl1:128:32:4:l:4:2 

# l1 data cache access latency (<base lat> <extra hit lat>)
-cache:dl1lat          1 1 

# Number of dl1 ports
-cache:dl1:ports                  2 

# Whether L1 D-cache is perfect
-cache:dl1:perfect            false 

# l2 data cache config, i.e., {<config>|none}
-cache:dl2             ul2:1024:64:4:l:4:4 

# l2 data cache access latency (<base lat> <extra hit lat>)
-cache:dl2lat          2 1 

# Whether L2 D-cache is perfect
-cache:dl2:perfect            false 

# l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1             il1:512:32:1:l:1:2 

# l1 data cache access latency (<base lat> <extra hit lat>)
-cache:il1lat          1 1 

# L1 I-cache block size, only needed if L1 I-cache is not instantiated
-cache:il1:blksize               32 

# Whether L1 I-cache is perfect
-cache:il1:perfect            false 

# l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2                      dl2 

# Whether L2 I-cache is perfect
-cache:il2:perfect            false 

# l1 data cache access latency (<base lat> <extra hit lat>)
-cache:il2lat          2 1 

# flush caches on system calls
-cache:flush                  false 

# convert 64-bit inst addresses to 32-bit inst equivalents
-cache:icompress              false 

# memory access latency (<first_chunk> <inter_chunk>)
-mem:lat               18 2 

# memory access bus width (in bytes)
-mem:width                        8 

# instruction TLB config, i.e., {<config>|none}
-tlb:itlb              itlb:16:4096:4:l 

# data TLB config, i.e., {<config>|none}
-tlb:dtlb              dtlb:32:4096:4:l 

# inst/data TLB miss latency (in cycles)
-tlb:lat                         30 

# Whether TLB's are perfect
-tlb:perfect                  false 

# no functional unit limitations
-res:infinite                 false 

# total number of integer ALU's available
-res:ialu                         4 

# total number of branch/I-shift units available
-res:ibrsh                        4 

# total number of integer multiplier/dividers available
-res:imult                        1 

# total number of memory system load ports available (to CPU)
-res:ldport                       2 

# total number of memory system store ports available (to CPU)
-res:stport                       1 

# total number of floating point ALU's available
-res:fpalu                        4 

# total number of floating point multipliers available
-res:fpmult                       2 

# total number of floating point divider/sq-root units available
-res:fpdiv                        1 

# profile stat(s) against text addr's (mult uses ok)
# -pcstat                    <null> 

# operate in backward-compatible bugs mode (for testing only)
-bugcompat                    false 

# number of committed instructions for which to prime state
-prime_insts                      0 

# number of committed instructions for which to simulate state after priming
-sim_insts                        0 

# number of committed instructions for which to warm up caches
-warmup_insts                     0 

# report histogram of no. insts fetched/cycle
-report_fetch                 false 

# report histogram of no. insts issued/cycle
-report_issue                 false 

# report histogram of no. insts committed/cycle
-report_commit                false 

# report histogram of no. post-issued insts in RUU/cycle
-report_post_issue            false 

# report histogram of no. non-mis-speculated pre-issue insts in RUU/cycle
-report_useful_insts          false 

# report histogram of no. non-mis-speculated ready-to-issue insts in RUU/cycle
-report_ready_insts           false 

# report histogram of no. insts available to overlap L1 D$ misses
-report_miss_indep_insts        false 

# report histogram of RUU occupancy
-report_ruu_occ               false 

# report histogram of RUU occupancy on I misses
-report_imiss_ruu_occ         false 

# report histograms about # pending br's, br-resolution-time
-report_branch_info           false 

# report histograms about from where in the RUU an instruction gets issued
-report_issue_loc             false 

# report histograms about from where in the RUU an instruction gets enqueued (decoded)
-report_decode_loc            false 

# report histograms about time spent waiting for operands and for issue
-report_issue_delay           false 

# report histograms for D- and I-miss clustering
-report_miss_clustering        false 

# dummy
-Z                            false 

# dummy
-z                                0 

# dummy
# -dummy                     <null> 

