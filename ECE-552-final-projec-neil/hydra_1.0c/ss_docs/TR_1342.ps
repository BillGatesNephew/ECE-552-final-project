%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 27 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Courier FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Times-BoldItalic FMFONTDEFINE
6 0 /Helvetica-Bold FMFONTDEFINE
7 0 /Helvetica FMFONTDEFINE
8 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
59.98 557.57 551.95 719.71 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The SimpleScalar T) 190.44 710.38 T
(ool Set, V) 308.17 710.38 T
(ersion 2.0) 363.93 710.38 T
1 10 Q
(*Contact: dburger@cs.wisc.edu) 218.96 592.05 T
(http://www.cs.wisc.edu/~mscalar/simplescalar.html) 158.96 580.05 T
2 F
(1) 303.5 41.28 T
59.98 72 293.98 127.71 R
7 X
V
2 8 Q
0 X
0.33 (This w) 59.98 122.38 P
0.33 (ork  w) 82.22 122.38 P
0.33 (as initially supported by NSF Grants CCR-9303030, CCR-) 103.24 122.38 P
0.16 (9509589, and MIP-9505853, ONR Grant N00014-93-1-0465, a donation) 59.98 112.38 P
0.86 (from Intel Corp., and by U.S. Army Intelligence Center and F) 59.98 102.38 P
0.86 (ort Hua-) 266.23 102.38 P
1 (chuca under Contract D) 59.98 92.38 P
1 (ABT63-95-C-0127 and ARP) 138.85 92.38 P
1 (A order no. D346.) 232.55 92.38 P
0.21 (The current support for this w) 59.98 82.38 P
0.21 (ork comes from a v) 156.72 82.38 P
0.21 (ariety of sources, all of) 219.59 82.38 P
(to which we are indebted.) 59.98 72.38 T
2 12 Q
(Doug Bur) 154.47 683.29 T
(ger*) 201.92 683.29 T
(Computer Sciences Department) 112.54 655.29 T
(Uni) 107.68 642.29 T
(v) 125.38 642.29 T
(ersity of W) 131.2 642.29 T
(isconsin-Madison) 184.71 642.29 T
(1210 W) 128.85 629.29 T
(est Dayton Street) 166.21 629.29 T
(Madison, W) 109.76 616.29 T
(isconsin 53706 USA) 168.61 616.29 T
(T) 385.12 683.14 T
(odd M. Austin) 391.49 683.14 T
(MicroComputer Research Labs, JF3-359) 325.16 655.14 T
(Intel Corporation, 2111 NE 25th A) 325.36 642.14 T
(v) 492.45 642.14 T
(enue) 498.27 642.14 T
(Hillsboro, OR 97124 USA) 359.14 629.14 T
2 8 Q
(Uni) 59.98 750.81 T
(v) 71.78 750.81 T
(ersity of W) 75.66 750.81 T
(isconsin-Madison Computer Sciences Department T) 111.33 750.81 T
(echnical Report #1342, June, 1997.) 278.3 750.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0.1 (This r) 71.98 549.98 P
0.1 (eport describes r) 93 549.98 P
0.1 (elease 2.0 of the SimpleScalar tool set,) 153.87 549.98 P
0.23 (a suite of fr) 59.98 538.98 P
0.23 (ee) 101.6 538.98 P
0.23 (, publicly available simulation tools that of) 109.5 538.98 P
0.23 (fer both) 265.49 538.98 P
0.8 (detailed and high-performance simulation of modern micr) 59.98 527.98 P
0.8 (opr) 274.38 527.98 P
0.8 (o-) 286.48 527.98 P
0.36 (cessor) 59.98 516.98 P
0.36 (s. The ne) 82.88 516.98 P
0.36 (w r) 115.71 516.98 P
0.36 (elease of) 127.49 516.98 P
0.36 (fer) 159.43 516.98 P
0.36 (s mor) 169.34 516.98 P
0.36 (e tools and capabilities, pr) 189.62 516.98 P
0.36 (e-) 286.98 516.98 P
3.31 (compiled binaries, cleaner interfaces, better documentation,) 59.98 505.98 P
3.25 (easier installation, impr) 59.98 494.98 P
3.25 (o) 152.83 494.98 P
3.25 (ved portability) 157.24 494.98 P
3.25 (, and higher perfor-) 212.74 494.98 P
1.16 (mance) 59.98 483.98 P
1.16 (. This r) 83.33 483.98 P
1.16 (eport contains a complete description of the tool) 111.08 483.98 P
1.17 (set, including r) 59.98 472.98 P
1.17 (etrie) 116.24 472.98 P
1.17 (val and installation instructions, a descrip-) 132.6 472.98 P
0.43 (tion of how to use the tools, a description of the tar) 59.98 461.98 P
0.43 (g) 248.39 461.98 P
0.43 (et SimpleS-) 252.8 461.98 P
1.21 (calar ar) 59.98 450.98 P
1.21 (c) 90.1 450.98 P
1.21 (hitectur) 93.96 450.98 P
1.21 (e) 121.63 450.98 P
1.21 (, and many details about the internals of the) 125.54 450.98 P
-0.08 (tools and how to customize them. W) 59.98 439.98 P
-0.08 (ith this guide) 188.27 439.98 P
-0.08 (, the tool set can) 235.04 439.98 P
0.56 (be br) 59.98 428.98 P
0.56 (ought up and g) 78.88 428.98 P
0.56 (ener) 134.74 428.98 P
0.56 (ating r) 150.6 428.98 P
0.56 (esults in under an hour \050on sup-) 175.09 428.98 P
(ported platforms\051.) 59.98 417.98 T
0 12 Q
(1  Ov) 59.98 392.98 T
(er) 87.19 392.98 T
(view) 97.73 392.98 T
2 9 Q
1.01 (Modern processors are incredibly comple) 72 375.98 P
1.01 (x marv) 225.35 375.98 P
1.01 (els of engi-) 251.47 375.98 P
1.78 (neering that are becoming increasingly hard to e) 59.98 364.98 P
1.78 (v) 245.93 364.98 P
1.78 (aluate. This) 250.2 364.98 P
1.44 (report describes the SimpleScalar tool set \050release 2.0\051, which) 59.98 353.98 P
1.03 (performs f) 59.98 342.98 P
1.03 (ast, \337e) 98.66 342.98 P
1.03 (xible, and accurate simulation of modern pro-) 123.06 342.98 P
1.9 (cessors that implement the SimpleScalar architecture \050a close) 59.98 331.98 P
0.37 (deri) 59.98 320.98 P
0.37 (v) 73.75 320.98 P
0.37 (ati) 78.02 320.98 P
0.37 (v) 86.8 320.98 P
0.37 (e of the MIPS architecture [4]\051. The tool set tak) 91.16 320.98 P
0.37 (es bina-) 265.36 320.98 P
1.83 (ries compiled for the SimpleScalar architecture and simulates) 59.98 309.98 P
0.51 (their e) 59.98 298.98 P
0.51 (x) 83.09 298.98 P
0.51 (ecution on one of se) 87.46 298.98 P
0.51 (v) 161.75 298.98 P
0.51 (eral pro) 166.11 298.98 P
0.51 (vided processor simulators.) 194.22 298.98 P
1.7 (W) 59.98 287.98 P
1.7 (e pro) 67.75 287.98 P
1.7 (vide sets of precompiled binaries \050including SPEC95\051,) 87.56 287.98 P
0.54 (plus a modi\336ed v) 59.98 276.98 P
0.54 (ersion of GNU GCC \050with associated utilities\051) 123.73 276.98 P
0.75 (that allo) 59.98 265.98 P
0.75 (ws you to compile your o) 89.75 265.98 P
0.75 (wn SimpleScalar test binaries) 185 265.98 P
(from FOR) 59.98 254.98 T
(TRAN or C code.) 96.69 254.98 T
0.34 (The adv) 72 243.98 P
0.34 (antages of the SimpleScalar tools are high \337e) 101.35 243.98 P
0.34 (xibility) 266.3 243.98 P
0.34 (,) 291.73 243.98 P
0.81 (portability) 59.98 232.98 P
0.81 (, e) 96.89 232.98 P
0.81 (xtensibility) 106.07 232.98 P
0.81 (, and performance. W) 145.99 232.98 P
0.81 (e include \336v) 225.93 232.98 P
0.81 (e e) 271.92 232.98 P
0.81 (x) 282.84 232.98 P
0.81 (e-) 287.21 232.98 P
2.08 (cution-dri) 59.98 221.98 P
2.08 (v) 95.25 221.98 P
2.08 (en processor simulators in the release. The) 99.61 221.98 P
2.08 (y range) 265.16 221.98 P
0.2 (from an e) 59.98 210.98 P
0.2 (xtremely f) 94.72 210.98 P
0.2 (ast functional simulator to a detailed, out-of-) 132.07 210.98 P
1.36 (order issue, superscalar processor simulator that supports non-) 59.98 199.98 P
(blocking caches and speculati) 59.98 188.98 T
(v) 166.98 188.98 T
(e e) 171.34 188.98 T
(x) 181.45 188.98 T
(ecution.) 185.81 188.98 T
1.32 (The tool set is portable, requiring only that the GNU tools) 72 177.98 P
0.19 (may be installed on the host system. The tool set has been tested) 59.98 166.98 P
0.38 (e) 59.98 155.98 P
0.38 (xtensi) 63.84 155.98 P
0.38 (v) 85.11 155.98 P
0.38 (ely on man) 89.48 155.98 P
0.38 (y platforms \050listed in Section) 130.09 155.98 P
0.38 (2\051. The tool set) 238.35 155.98 P
1.21 (is easily e) 59.98 144.98 P
1.21 (xtensible. W) 97.75 144.98 P
1.21 (e designed the instruction set to support) 143.74 144.98 P
1.74 (easy annotation of instructions, without requiring a retar) 318 549.98 P
1.74 (geted) 532.51 549.98 P
2.88 (compiler for incremental changes. The instruction de\336nition) 318 538.98 P
0.01 (method, along with the ported GNU tools, mak) 318 527.98 P
0.01 (es ne) 487.71 527.98 P
0.01 (w simulators) 505.74 527.98 P
0.87 (easy to write, and the old ones e) 318 516.98 P
0.87 (v) 439.36 516.98 P
0.87 (en simpler to e) 443.73 516.98 P
0.87 (xtend. Finally) 499.46 516.98 P
0.87 (,) 549.75 516.98 P
1.89 (the simulators ha) 318 505.98 P
1.89 (v) 383.1 505.98 P
1.89 (e been aggressi) 387.46 505.98 P
1.89 (v) 446 505.98 P
1.89 (ely tuned for performance,) 450.36 505.98 P
0.42 (and can run codes approaching \322real\323 sizes in tractable amounts) 318 494.98 P
0.99 (of time. On a 200-MHz Pentium Pro, the f) 318 483.98 P
0.99 (astest, least detailed) 478.29 483.98 P
1.02 (simulator simulates about four million machine c) 318 472.98 P
1.02 (ycles per sec-) 500.98 472.98 P
1.93 (ond, whereas the most detailed processor simulator simulates) 318 461.98 P
(about 150,000 per second.) 318 450.98 T
2.44 (The current release \050v) 330.02 439.98 P
2.44 (ersion 2.0\051 of the tools is a major) 415.93 439.98 P
0.18 (impro) 318 428.98 P
0.18 (v) 339.37 428.98 P
0.18 (ement o) 343.73 428.98 P
0.18 (v) 372.52 428.98 P
0.18 (er the pre) 376.89 428.98 P
0.18 (vious release. Compared to v) 411.01 428.98 P
0.18 (ersion 1.0) 516.32 428.98 P
0.33 ([2], this release includes better documentation, enhanced perfor-) 318 417.98 P
0 (mance, compatibility with more platforms, precompiled SPEC95) 318 406.98 P
2.66 (SimpleScalar binaries, cleaner interf) 318 395.98 P
2.66 (aces, tw) 456.86 395.98 P
2.66 (o ne) 488.42 395.98 P
2.66 (w processor) 506.1 395.98 P
0.47 (simulators, option and statistic management packages, a source-) 318 384.98 P
0.21 (le) 318 373.98 P
0.21 (v) 324.27 373.98 P
0.21 (el deb) 328.64 373.98 P
0.21 (ugger \050DLite!\051 and a tool to trace the out-of-order pipe-) 350.41 373.98 P
(line.) 318 362.98 T
0.38 (The rest of this document contains information about obtain-) 330.02 351.98 P
1.89 (ing, installing, running, using, and modifying the tool set. In) 318 340.98 P
0.96 (Section) 318 329.98 P
0.96 (2 we pro) 347.25 329.98 P
0.96 (vide a detailed procedure for do) 380.52 329.98 P
0.96 (wnloading the) 499.8 329.98 P
0.48 (release, installing it, and getting it up and running. In Section) 318 318.98 P
0.48 (3,) 545.25 318.98 P
0.82 (we describe the SimpleScalar architecture and details about the) 318 307.98 P
-0.13 (tar) 318 296.98 P
-0.13 (get \050simulated\051 system. In Section) 327.33 296.98 P
-0.13 (4, we describe the SimpleS-) 451.79 296.98 P
0.05 (calar processor simulators and discuss their internal w) 318 285.98 P
0.05 (orkings. In) 512.96 285.98 P
1.01 (Section) 318 274.98 P
1.01 (5, we describe tw) 347.25 274.98 P
1.01 (o tools that enhance the utility of the) 413.18 274.98 P
0.66 (tool set: a pipeline tracer and a source-le) 318 263.98 P
0.66 (v) 468.11 263.98 P
0.66 (el deb) 472.47 263.98 P
0.66 (ugger \050for step-) 494.7 263.98 P
-0.11 (ping through the program being simulated\051. In Section) 318 252.98 P
-0.11 (6, we pro-) 515.48 252.98 P
0.71 (vide the history of the tools\325 de) 318 241.98 P
0.71 (v) 434.53 241.98 P
0.71 (elopment, describe current and) 438.9 241.98 P
4.29 (planned ef) 318 230.98 P
4.29 (forts to e) 359.81 230.98 P
4.29 (xtend the tool set, and conclude. In) 400.25 230.98 P
0.82 (Appendix) 318 219.98 P
0.82 (A and Appendix) 355.75 219.98 P
0.82 (B contain detailed de\336nitions of the) 419.13 219.98 P
(SimpleScalar instructions and system calls, respecti) 318 208.98 T
(v) 503.76 208.98 T
(ely) 508.12 208.98 T
(.) 518.54 208.98 T
0 12 Q
(2  Installation and Use) 318 183.98 T
2 9 Q
0.07 (The only restrictions on using and distrib) 330.02 166.98 P
0.07 (uting the tool set are) 478.24 166.98 P
1 (that \0501\051 the cop) 318 155.98 P
1 (yright notice must accompan) 375.66 155.98 P
1 (y all re-releases of) 482.77 155.98 P
0.05 (the tool set, and \0502\051 third parties \050i.e., you\051 are forbidden to place) 318 144.98 P
0.87 (an) 318 133.98 P
0.87 (y additional distrib) 326.36 133.98 P
0.87 (ution restrictions on e) 395.92 133.98 P
0.87 (xtensions to the tool) 476.64 133.98 P
-0.09 (set that you release. The cop) 318 122.98 P
-0.09 (yright notice can be found in the dis-) 419.92 122.98 P
0.63 (trib) 318 111.98 P
0.63 (ution directory as well as at the head of all simulator source) 330.32 111.98 P
(\336les. W) 318 100.98 T
(e ha) 345.28 100.98 T
(v) 359.84 100.98 T
(e included the cop) 364.21 100.98 T
(yright here as well:) 429.85 100.98 T
3 F
(Copyright \050C\051 1994, 1995, 1996, 1997 by T) 330.02 84.98 T
(odd M. A) 485.7 84.98 T
(ustin) 518.76 84.98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(2) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0.61 (This tool set is distrib) 72 713.74 P
0.61 (uted \322as is\323 in the hope that it will be) 152.26 713.74 P
1.08 (useful. The tool set comes with no warr) 59.98 702.74 P
1.08 (anty) 208.9 702.74 P
1.08 (, and no author or) 223.9 702.74 P
0.31 (distrib) 59.98 691.74 P
0.31 (utor accepts any r) 83.3 691.74 P
0.31 (esponsibility for the consequences of its) 149.16 691.74 P
(use) 59.98 680.74 T
(.) 71.84 680.74 T
-0.1 (Everyone is gr) 72 669.74 P
-0.1 (anted permission to copy) 124.15 669.74 P
-0.1 (, modify and r) 213.61 669.74 P
-0.1 (edistrib-) 263.48 669.74 P
(ute this tool set under the following conditions:) 59.98 658.74 T
(\245) 59.98 645.74 T
1.91 (This tool set is distrib) 77.98 645.74 P
1.91 (uted for non-commer) 163.44 645.74 P
1.91 (cial use only) 242.91 645.74 P
1.91 (.) 291.73 645.74 P
1.37 (Please contact the maintainer for r) 77.98 634.74 P
1.37 (estrictions applying to) 210.73 634.74 P
(commer) 77.98 623.74 T
(cial use of these tools.) 106.63 623.74 T
(\245) 59.98 610.74 T
0.54 (P) 77.98 610.74 P
0.54 (ermission is gr) 82.75 610.74 P
0.54 (anted to anyone to mak) 137.21 610.74 P
0.54 (e or distrib) 223.28 610.74 P
0.54 (ute cop-) 264.19 610.74 P
1.33 (ies of this tool set, either as r) 77.98 599.74 P
1.33 (eceived or modi\336ed, in any) 191.44 599.74 P
-0.11 (medium, pr) 77.98 588.74 P
-0.11 (o) 118.46 588.74 P
-0.11 (vided that all copyright notices, permission and) 122.87 588.74 P
0.35 (nonwarr) 77.98 577.74 P
0.35 (anty notices ar) 108.85 577.74 P
0.35 (e pr) 162.72 577.74 P
0.35 (eserved, and that the distrib) 176.99 577.74 P
0.35 (utor) 278.97 577.74 P
0.39 (gr) 77.98 566.74 P
0.39 (ants the r) 85.84 566.74 P
0.39 (ecipient permission for further r) 120.29 566.74 P
0.39 (edistrib) 237.51 566.74 P
0.39 (ution as) 264.83 566.74 P
(permitted by this document.) 77.98 555.74 T
(\245) 59.98 542.74 T
0.88 (P) 77.98 542.74 P
0.88 (ermission is gr) 82.75 542.74 P
0.88 (anted to distrib) 137.88 542.74 P
0.88 (ute these tools in compiled) 194.47 542.74 P
-0.01 (or e) 77.98 531.74 P
-0.01 (xecutable form under the same conditions that apply for) 92.04 531.74 P
0.61 (sour) 77.98 520.74 P
0.61 (ce code) 93.64 520.74 P
0.61 (, pr) 121.39 520.74 P
0.61 (o) 134.1 520.74 P
0.61 (vided that either: \0501\051 it is accompanied by) 138.51 520.74 P
0.82 (the corr) 77.98 509.74 P
0.82 (esponding mac) 107.21 509.74 P
0.82 (hine-r) 162.14 509.74 P
0.82 (eadable sour) 183.81 509.74 P
0.82 (ce code) 231.04 509.74 P
0.82 (, or \0502\051 it) 259.01 509.74 P
-0.01 (is accompanied by a written of) 77.98 498.74 P
-0.01 (fer) 188.52 498.74 P
-0.01 (, with no time limit, to give) 197.52 498.74 P
3.31 (anyone a mac) 77.98 487.74 P
3.31 (hine-r) 134.44 487.74 P
3.31 (eadable copy of the corr) 156.1 487.74 P
3.31 (esponding) 256.98 487.74 P
-0.17 (sour) 77.98 476.74 P
-0.17 (ce code in r) 93.64 476.74 P
-0.17 (eturn for r) 135.03 476.74 P
-0.17 (eimb) 171.86 476.74 P
-0.17 (ur) 189.18 476.74 P
-0.17 (sement of the cost of distri-) 197.09 476.74 P
0.55 (b) 77.98 465.74 P
0.55 (ution. This written of) 82.3 465.74 P
0.55 (fer must permit verbatim duplication) 159.29 465.74 P
0.34 (by anyone) 77.98 454.74 P
0.34 (, or \0503\051 it is distrib) 114.96 454.74 P
0.34 (uted by someone who r) 182.98 454.74 P
0.34 (eceived) 266.99 454.74 P
0.5 (only the e) 77.98 443.74 P
0.5 (xecutable form, and is accompanied by a copy of) 113.78 443.74 P
0.88 (the written of) 77.98 432.74 P
0.88 (fer of sour) 127.57 432.74 P
0.88 (ce code that the) 166.49 432.74 P
0.88 (y r) 225.59 432.74 P
0.88 (eceived concur-) 235.88 432.74 P
(r) 77.98 421.74 T
(ently) 81.14 421.74 T
(.) 98.14 421.74 T
2 F
0.94 (In other w) 72 408.74 P
0.94 (ords, you are welcome to use, share and impro) 110.78 408.74 P
0.94 (v) 285.61 408.74 P
0.94 (e) 289.98 408.74 P
0.13 (these tools. Y) 59.98 397.74 P
0.13 (ou are forbidden to forbid an) 108.49 397.74 P
0.13 (yone else to use, share) 212.73 397.74 P
(and impro) 59.98 386.74 T
(v) 96.59 386.74 T
(e what you gi) 100.95 386.74 T
(v) 149.47 386.74 T
(e them.) 153.84 386.74 T
0 11 Q
(2.1  Obtaining the tools) 59.98 363.4 T
2 9 Q
1.93 (The tools can either be obtained through the W) 72 348.74 P
1.93 (orld W) 256.17 348.74 P
1.93 (ide) 282.98 348.74 P
0.81 (W) 59.98 337.74 P
0.81 (eb, or by con) 67.75 337.74 P
0.81 (v) 116.81 337.74 P
0.81 (entional ftp. F) 121.18 337.74 P
0.81 (or e) 173.41 337.74 P
0.81 (xample, to get the \336le) 187.83 337.74 P
1 F
1.94 (sim-) 272.38 337.74 P
(plesim.tar.gz) 59.98 326.74 T
2 F
( via the WWW) 130.18 326.74 T
(, enter the URL:) 183.58 326.74 T
4 8 Q
(ftp://ftp.cs.wisc.edu/sohi/Code/simplescalar/) 72 312.4 T
(simplesim.tar) 88.78 302.4 T
2 9 Q
(and to obtain the same \336le with traditional ftp:) 59.98 287.74 T
4 8 Q
(ftp ftp.cs.wisc.edu) 72 273.41 T
(user: anonymous) 72 263.41 T
(password: enter your e-mail address here) 72 253.41 T
(cd sohi/Code/simplescalar) 72 243.41 T
(get simplesim.tar) 72 233.41 T
2 9 Q
0.62 (Note the \322tar) 59.98 218.74 P
0.62 (.gz\323 suf) 107.22 218.74 P
0.62 (\336x: by requesting the \336le without the \322.gz\323) 135.61 218.74 P
1.22 (suf) 59.98 207.74 P
1.22 (\336x, the ftp serv) 70.75 207.74 P
1.22 (er uncompresses it automatically) 128.76 207.74 P
1.22 (. T) 250.05 207.74 P
1.22 (o get the) 260.55 207.74 P
(compressed v) 59.98 196.74 T
(ersion, simply request the \336le with the \322.gz\323 suf) 109.08 196.74 T
(\336x.) 280.84 196.74 T
-0.14 (The \336v) 72 185.74 P
-0.14 (e distrib) 97.48 185.74 P
-0.14 (ution \336les in the directory \050which are symbolic) 126.41 185.74 P
(links to the \336les containing the latest v) 59.98 174.74 T
(ersion of the tools\051 are:) 198.59 174.74 T
(\245) 59.98 161.74 T
0 F
3.7 (simplesim.tar) 77.98 161.74 P
3.7 (.gz) 129.32 161.74 P
2 F
3.7 ( - contains the simulator sources, the) 140.07 161.74 P
1.36 (instruction set de\336nition macros, and test program source) 77.98 150.74 P
0.48 (and binaries. The directory is 1 MB compressed and 4 MB) 77.98 139.74 P
0.5 (uncompressed. When the simulators are b) 77.98 128.74 P
0.5 (uilt, the directory) 230.74 128.74 P
2.28 (\050including object \336les\051 will require 11 MB. This \336le is) 77.98 117.74 P
(required for installation of the tool set.) 77.98 106.74 T
(\245) 59.98 93.74 T
0 F
0.55 (simpleutils.tar) 77.98 93.74 P
0.55 (.gz) 132.33 93.74 P
2 F
0.55 ( - contains the GNU binutils source \050v) 143.07 93.74 P
0.55 (er-) 283.99 93.74 P
2.95 (sion 2.5.2\051, retar) 77.98 82.74 P
2.95 (geted to the SimpleScalar architecture.) 142.95 82.74 P
0.7 (These utilities are not required to run the simulators them-) 336 713.74 P
1.35 (selv) 336 702.74 P
1.35 (es, b) 350.36 702.74 P
1.35 (ut is required to compile your o) 368.03 702.74 P
1.35 (wn SimpleScalar) 489.4 702.74 P
0.69 (benchmark binaries \050e.g. test programs other than the ones) 336 691.74 P
2.16 (we pro) 336 680.74 P
2.16 (vide\051. The compressed \336le is 3 MB, the uncom-) 362.76 680.74 P
(pressed \336le is 14 MB, and the b) 336 669.74 T
(uild requires 52 MB.) 449.81 669.74 T
(\245) 318 656.74 T
0 F
0.77 (simpletools.tar) 336 656.74 P
0.77 (.gz) 391.85 656.74 P
2 F
0.77 ( - contains the retar) 402.59 656.74 P
0.77 (geted GNU compiler) 474.98 656.74 P
1.85 (and library sources needed to b) 336 645.74 P
1.85 (uild SimpleScalar bench-) 457.3 645.74 P
0.63 (mark binaries \050GCC 2.6.3, glibc 1.0.9, and f2c\051, as well as) 336 634.74 P
0.81 (pre-b) 336 623.74 P
0.81 (uilt big- and little-endian v) 354.81 623.74 P
0.81 (ersions of libc. This \336le is) 454.43 623.74 P
0.29 (needed only to b) 336 612.74 P
0.29 (uild benchmarks, not to compile or run the) 396.45 612.74 P
3.13 (simulators. The tools are 11 MB compressed, 47 MB) 336 601.74 P
(uncompressed, and the full installation requires 70 MB.) 336 590.74 T
(\245) 318 577.74 T
0 F
2.65 (simplebench.big) 336 577.74 P
2.65 (.tar) 398.13 577.74 P
2.65 (.gz) 410.97 577.74 P
2 F
2.65 ( - contains a set of the SPEC95) 421.72 577.74 P
0.13 (benchmark binaries, compiled to the SimpleScalar architec-) 336 566.74 P
0.04 (ture running on a big-endian host. The binaries tak) 336 555.74 P
0.04 (e under 5) 518.43 555.74 P
(MB compressed, and are 29 MB when uncompressed.) 336 544.74 T
(\245) 318 531.74 T
0 F
1.23 (simplebench.little.tar) 336 531.74 P
1.23 (.gz) 416.6 531.74 P
2 F
1.23 ( - same as abo) 427.34 531.74 P
1.23 (v) 483.1 531.74 P
1.23 (e, e) 487.47 531.74 P
1.23 (xcept that the) 501.05 531.74 P
2.42 (binaries were compiled to the SimpleScalar architecture) 336 520.74 P
(running on a little-endian host.) 336 509.74 T
0.17 (Once you ha) 330.02 496.74 P
0.17 (v) 375.68 496.74 P
0.17 (e selected the appropriate \336les, place the do) 380.05 496.74 P
0.17 (wn-) 538.01 496.74 P
0.55 (loaded \336les into the desired tar) 318 485.74 P
0.55 (get directory) 431.34 485.74 P
0.55 (. If you obtained the) 477.05 485.74 P
0.22 (\336les with the \322.gz\323 suf) 318 474.74 P
0.22 (\336x, run the GNU decompress utility \050gun-) 399.41 474.74 P
1.35 (zip\051. The \336les should no) 318 463.74 P
1.35 (w ha) 410.4 463.74 P
1.35 (v) 428.81 463.74 P
1.35 (e a \322.tar\323 suf) 433.18 463.74 P
1.35 (\336x. T) 482.46 463.74 P
1.35 (o remo) 502.59 463.74 P
1.35 (v) 529.05 463.74 P
1.35 (e the) 533.41 463.74 P
(directories from the archi) 318 452.74 T
(v) 409 452.74 T
(e:) 413.36 452.74 T
4 8 Q
(tar xf filename.tar) 330 438.4 T
2 9 Q
1.01 (If you do) 318 423.74 P
1.01 (wnload and unpack all \336les, release, you should ha) 352.79 423.74 P
1.01 (v) 543.64 423.74 P
1.01 (e) 548 423.74 P
(the follo) 318 412.74 T
(wing subdirectories with follo) 348.02 412.74 T
(wing contents:) 456.04 412.74 T
(\245) 318 399.74 T
0 F
0.79 (simplesim-2.0) 336 399.74 P
2 F
0.79 ( - the sources of the SimpleScalar processor) 388.75 399.74 P
0 (simulators, supporting scripts, and small test benchmarks. It) 336 388.74 P
(also holds precompiled binaries of the test benchmarks.) 336 377.74 T
(\245) 318 364.74 T
0 F
0.22 (binutils-2.5.2) 336 364.74 P
2 F
0.22 ( - the GNU binary utilities code, ported to the) 386.01 364.74 P
(SimpleScalar architecture.) 336 353.74 T
0 F
(\245) 318 340.74 T
0.2 (ssbig-na-sstrix) 336 340.74 P
2 F
0.2 ( - the root directory for the tree in which the) 391.5 340.74 P
0.58 (big-endian SimpleScalar binary utilities and compiler tools) 336 329.74 P
1.16 (will be installed. The unpack) 336 318.74 P
1.16 (ed directories contain header) 444.8 318.74 P
0.11 (\336les and a pre-compiled cop) 336 307.74 P
0.11 (y of libc and a necessary object) 438.35 307.74 P
(\336le.) 336 296.74 T
0 F
(\245) 318 283.74 T
0.28 (sslittle-na-sstrix) 336 283.74 P
2 F
0.28 ( - same as abo) 396.99 283.74 P
0.28 (v) 448.94 283.74 P
0.28 (e, e) 453.31 283.74 P
0.28 (xcept that this directory) 465.94 283.74 P
(holds the little-endian v) 336 272.74 T
(ersions of the SimpleScalar utilities.) 421.11 272.74 T
(\245) 318 259.74 T
0 F
0.78 (gcc-2.6.3) 336 259.74 P
2 F
0.78 ( - the GNU C compiler code, tar) 369.49 259.74 P
0.78 (geted to) 490.77 259.74 P
0.78 (w) 520.07 259.74 P
0.78 (ard the) 526.48 259.74 P
(SimpleScalar architecture.) 336 248.74 T
(\245) 318 235.74 T
0 F
0.2 (glibc-1.09) 336 235.74 P
2 F
0.2 (- the GNU libraries code, ported to the SimpleS-) 375.7 235.74 P
(calar architecture.) 336 224.74 T
(\245) 318 211.74 T
0 F
2.44 (f2c-1994.09.27) 336 211.74 P
2 F
2.44 ( - the 1994 release of A) 390.99 211.74 P
2.44 (T&T Bell Labs\325) 489.12 211.74 P
(FOR) 336 200.74 T
(TRAN to C translator code.) 352.96 200.74 T
(\245) 318 187.74 T
0 F
2.65 (spec95-big) 336 187.74 P
2 F
2.65 ( - precompiled SimpleScalar SPEC95 bench-) 376.5 187.74 P
(mark binaries \050big-endian v) 336 176.74 T
(ersion\051.) 435.59 176.74 T
(\245) 318 162.74 T
0 F
1.55 (spec95-little) 336 162.74 P
2 F
1.55 ( - precompiled SimpleScalar SPEC95 bench-) 381.99 162.74 P
(mark binaries \050little-endian v) 336 151.74 T
(ersion\051) 440.6 151.74 T
0 11 Q
(2.2  Installing and running Simplescalar) 318 128.41 T
2 9 Q
1.32 (W) 330.02 113.74 P
1.32 (e depict a graphical o) 337.8 113.74 P
1.32 (v) 419.93 113.74 P
1.32 (ervie) 424.3 113.74 P
1.32 (w of the tool set in Figure) 442.07 113.74 P
1.32 (1.) 545.25 113.74 P
0.14 (Benchmarks written in FOR) 318 102.74 P
0.14 (TRAN are con) 419.64 102.74 P
0.14 (v) 472.55 102.74 P
0.14 (erted to C using Bell) 476.92 102.74 P
1.67 (Labs\325 f2c con) 318 91.74 P
1.67 (v) 370.46 91.74 P
1.67 (erter) 374.83 91.74 P
1.67 (. Both benchmarks written in C and those) 390.82 91.74 P
0.19 (con) 318 80.74 P
0.19 (v) 330.64 80.74 P
0.19 (erted from FOR) 335 80.74 P
0.19 (TRAN are compiled using the SimpleScalar) 392.33 80.74 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(3) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
1.5 (v) 59.98 492.96 P
1.5 (ersion of GCC, which generates SimpleScalar assembly) 64.34 492.96 P
1.5 (. The) 273.98 492.96 P
2.13 (SimpleScalar assembler and loader) 59.98 481.96 P
2.13 (, along with the necessary) 192.23 481.96 P
0.47 (ported libraries, produce SimpleScalar e) 59.98 470.96 P
0.47 (x) 206.46 470.96 P
0.47 (ecutables that can then) 210.82 470.96 P
0.29 (be fed directly into one of the pro) 59.98 459.96 P
0.29 (vided simulators. \050The simula-) 182.61 459.96 P
2.19 (tors themselv) 59.98 448.96 P
2.19 (es are compiled with the host platform\325) 110.28 448.96 P
2.19 (s nati) 264.4 448.96 P
2.19 (v) 285.61 448.96 P
2.19 (e) 289.98 448.96 P
(compiler; an) 59.98 437.96 T
(y ANSI C compiler will do\051.) 105.08 437.96 T
0.75 (If you use the precompiled SPEC95 binaries or the precom-) 72 426.96 P
-0.02 (piled test programs, all you ha) 59.98 415.96 P
-0.02 (v) 168.71 415.96 P
-0.02 (e to install is the simulator source) 173.07 415.96 P
1.37 (itself. If you wish to compile your o) 59.98 404.96 P
1.37 (wn benchmarks, you will) 198.86 404.96 P
1.35 (ha) 59.98 393.96 P
1.35 (v) 68.29 393.96 P
1.35 (e to install and b) 72.66 393.96 P
1.35 (uild the GCC tree and optionally \050recom-) 137.38 393.96 P
1.28 (mended\051 the GNU binutils. If you wish to modify the support) 59.98 382.96 P
1.63 (libraries, you will ha) 59.98 371.96 P
1.63 (v) 139.19 371.96 P
1.63 (e to install, modify) 143.55 371.96 P
1.63 (, and b) 215.87 371.96 P
1.63 (uild the glibc) 243.21 371.96 P
(source as well.) 59.98 360.96 T
-0.16 (The SimpleScalar architecture, lik) 72 349.96 P
-0.16 (e the MIPS architecture [4],) 194.4 349.96 P
0.69 (supports both big-endian and little-endian e) 59.98 338.96 P
0.69 (x) 220 338.96 P
0.69 (ecutables. The tool) 224.37 338.96 P
0.02 (set supports compilation for either of these tar) 59.98 327.96 P
0.02 (gets; the names for) 225.68 327.96 P
0.92 (the big-endian and little-endian architecture are) 59.98 316.96 P
0 F
0.92 (ssbig-na-sstrix) 238.47 316.96 P
2 F
2.2 (and) 59.98 305.96 P
0 F
2.2 (sslittle-na-sstrix) 77.42 305.96 P
2 F
2.2 (, respecti) 138.41 305.96 P
2.2 (v) 172.87 305.96 P
2.2 (ely) 177.24 305.96 P
2.2 (. Y) 187.65 305.96 P
2.2 (ou should use the tar) 199.86 305.96 P
2.2 (get) 282.98 305.96 P
0.19 (endian-ness that matches your host platform; the simulators may) 59.98 294.96 P
1.33 (not w) 59.98 283.96 P
1.33 (ork correctly if you force the compiler to pro) 81.46 283.96 P
1.33 (vide cross-) 253.41 283.96 P
0.89 (endian support. T) 59.98 272.96 P
0.89 (o determine which endian your host uses, run) 124.28 272.96 P
1.45 (the) 59.98 261.96 P
0 F
1.45 (endian) 74.68 261.96 P
2 F
1.45 ( program located in the) 100.69 261.96 P
1 F
3.49 (simplesim-2.0/) 193.68 261.96 P
2 F
1.45 ( direc-) 269.29 261.96 P
0.09 (tory) 59.98 250.96 P
0.09 (. F) 73.89 250.96 P
0.09 (or simplicity) 83.35 250.96 P
0.09 (, the follo) 128.6 250.96 P
0.09 (wing instructions will assume a big-) 163.3 250.96 P
0.17 (endian installation. In the follo) 59.98 239.96 P
0.17 (wing instructions, we will refer to) 171.16 239.96 P
3.75 (the directory in which you are installing SimpleScalar as) 59.98 228.96 P
1 F
($IDIR/) 59.98 217.96 T
2 F
(.) 92.38 217.96 T
1.86 (The simulators come equipped with their o) 72 206.96 P
1.86 (wn loader) 237.39 206.96 P
1.86 (, and) 274.62 206.96 P
-0.16 (thus you do not need to b) 59.98 195.96 P
-0.16 (uild the GNU binary utilities to run sim-) 149.84 195.96 P
0.09 (ulations. Ho) 59.98 184.96 P
0.09 (we) 103.84 184.96 P
0.09 (v) 114.11 184.96 P
0.09 (er) 118.47 184.96 P
0.09 (, man) 125.11 184.96 P
0.09 (y of these utilities are useful, and we rec-) 145.06 184.96 P
0.47 (ommend that you install them. If desired, b) 59.98 173.96 P
0.47 (uild the GNU binary) 218.33 173.96 P
(utilities) 59.98 162.96 T
2 7.2 Q
(1) 86.99 166.56 T
2 9 Q
(:) 90.58 162.96 T
4 8 Q
(cd $IDIR/binutils-2.5.2) 71.98 148.63 T
(configure --host=$HOST --target=ssbig-na-) 72 138.63 T
59.98 112 293.98 127 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
68.98 125 212.98 125 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
2 8 Q
0 X
0 0 0 1 0 0 0 K
-0.15 (1. Y) 59.98 106.67 P
-0.15 (ou must ha) 72.72 106.67 P
-0.15 (v) 107.36 106.67 P
-0.15 (e GNU Mak) 111.24 106.67 P
-0.15 (e to do the majority of installations described) 150.4 106.67 P
-0.17 (in this document. T) 59.98 96.67 P
-0.17 (o check if you ha) 121.07 96.67 P
-0.17 (v) 175.34 96.67 P
-0.17 (e the GNU v) 179.22 96.67 P
-0.17 (ersion, e) 219.26 96.67 P
-0.17 (x) 246.08 96.67 P
-0.17 (ecute \322mak) 249.96 96.67 P
-0.17 (e -) 285.92 96.67 P
-0.08 (v\323 or \322gmak) 59.98 86.67 P
-0.08 (e -v\323. The GNU v) 99.28 86.67 P
-0.08 (ersion understands this switch and displays) 156.38 86.67 P
(v) 59.98 76.67 T
(ersion information.) 63.86 76.67 T
4 F
(sstrix --with-gnu-as --with-gnu-ld --pre-) 354 493.63 T
(fix=$IDIR) 354 483.63 T
(make) 330.02 473.63 T
(make install) 330 463.63 T
2 9 Q
0.19 ($HOST here is a \322canonical con\336guration\323 string that represents) 318 448.96 P
0.07 (your host architecture and system \050CPU-COMP) 318 437.96 P
0.07 (ANY) 489.76 437.96 P
0.07 (-SYSTEM\051.) 508.25 437.96 P
-0.18 (The string for a Sparcstation running SunOS w) 318 426.96 P
-0.18 (ould be sparc-sun-) 485.88 426.96 P
1.84 (sunos4.1.3, running Solaris: sparc-sun-solaris2, a 386 running) 318 415.96 P
1.86 (Solaris: i386-sun-solaris2.4, etc. A complete list of supported) 318 404.96 P
($HOST strings resides in) 318 393.96 T
1 F
($IDIR/gcc-2.6.3/INSTALL) 411 393.96 T
2 F
(.) 535.2 393.96 T
0.5 (This installation will create the needed directories in) 330.02 382.96 P
1 F
1.2 ($IDIR) 525 382.96 P
2 F
0.63 (\050these include) 318 371.96 P
1 F
1.51 (bin/) 371.75 371.96 P
2 F
0.63 (,) 393.35 371.96 P
1 F
1.51 (lib/) 398.48 371.96 P
2 F
0.63 (,) 420.08 371.96 P
1 F
1.51 (include/) 425.2 371.96 P
2 F
0.63 (, and) 468.4 371.96 P
1 F
1.51 (man/) 489.41 371.96 P
2 F
0.63 (\051. Once the) 511.01 371.96 P
0.4 (binutils ha) 318 360.96 P
0.4 (v) 355.97 360.96 P
0.4 (e been b) 360.33 360.96 P
0.4 (uilt, b) 390.93 360.96 P
0.4 (uild the simulators themselv) 412.15 360.96 P
0.4 (es. This is) 514.96 360.96 P
0.02 (necessary to do before b) 318 349.96 P
0.02 (uilding GCC, since one of the binaries is) 405.37 349.96 P
1.32 (needed for the cross-compiler b) 318 338.96 P
1.32 (uild. Y) 437.06 338.96 P
1.32 (ou should edit) 462.39 338.96 P
1 F
3.16 ($IDIR/) 519.6 338.96 P
-0.12 (simplesim-2.0/Makefile) 318 327.96 P
2 F
-0.05 ( to use the desired compile \337ags) 436.8 327.96 P
2.48 (\050e.g., the correct optimization le) 318 316.96 P
2.48 (v) 442.94 316.96 P
2.48 (el\051. T) 447.31 316.96 P
2.48 (o use the GNU BFD) 468.57 316.96 P
-0.16 (loader instead of the custom loader in the simulators, uncomment) 318 305.96 P
(-DBFD_LO) 318 294.96 T
(ADER in the Mak) 361.18 294.96 T
(e\336le. T) 426.84 294.96 T
(o b) 451.61 294.96 T
(uild the simulators:) 462.68 294.96 T
4 8 Q
(cd $IDIR/simplesim-2.0) 330 280.63 T
(make) 330 270.63 T
2 9 Q
(If desired, b) 318 255.96 T
(uild the compiler:) 361.06 255.96 T
4 8 Q
(cd $IDIR/gcc-2.6.3) 330 241.63 T
(configure --host=$HOST --target=ssbig-na-) 330.02 231.63 T
(sstrix --with-gnu-as --with-gnu-ld --pre-) 354 221.63 T
(fix=$IDIR) 354 211.63 T
(make LANGUAGES=c) 330.02 201.63 T
(../simplesim-2.0/sim-safe ./enquire -f >!) 330.02 191.63 T
(float.h-cross) 353.94 181.63 T
(make install) 330 171.63 T
2 9 Q
-0.17 (W) 318 156.96 P
-0.17 (e pro) 325.78 156.96 P
-0.17 (vide pre-b) 343.71 156.96 P
-0.17 (uilt copies of the necessary libraries in) 380.09 156.96 P
1 F
-0.42 (ssbig-) 519.6 156.96 P
3.44 (na-sstrix/lib/) 318 145.96 P
2 F
1.43 (, so you do not need to b) 393.6 145.96 P
1.43 (uild the code in) 491.95 145.96 P
0 F
1.35 (glibc-1.09) 318 134.96 P
2 F
1.35 (, unless you change the library code. Building these) 355.25 134.96 P
0.07 (libraries is trick) 318 123.96 P
0.07 (y) 374.49 123.96 P
0.07 (, and we do not recommend it unless you ha) 378.41 123.96 P
0.07 (v) 537.33 123.96 P
0.07 (e a) 541.69 123.96 P
(speci\336c need to do so. In that e) 318 112.96 T
(v) 429.26 112.96 T
(ent, to b) 433.62 112.96 T
(uild the libraries:) 462.69 112.96 T
4 8 Q
(cd $IDIR/glibc-1.09) 330 98.63 T
(configure --prefix=$IDIR/ssbig-na-sstrix) 330.02 88.63 T
(ssbig-na-sstrix) 354 78.63 T
54.29 500.76 557.86 720.71 C
54.29 511.34 557.86 720.71 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
371.72 605.14 420.71 625.14 10 RR
0 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
N
374.47 608.36 417.96 623.35 7.5 RR
7 X
V
0 X
N
150.9 533.15 197.43 555.42 11.14 RR
V
N
148.84 534.99 195.36 557.25 11.13 RR
7 X
V
0 X
N
143.81 549.26 190.33 571.52 11.13 RR
V
N
141.74 551.09 188.26 573.35 11.13 RR
7 X
V
0 X
N
369.57 651.18 428.06 676.68 12.75 RR
V
N
366.97 653.28 425.46 678.78 12.75 RR
7 X
V
0 X
N
220.12 546.56 278.61 572.05 12.75 RR
V
N
217.52 548.66 276.01 574.15 12.75 RR
7 X
V
0 X
N
2 8 Q
(Simplescalar) 226.1 562.95 T
(GLD) 238.54 554.55 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
122.04 655.63 180.53 681.12 12.75 RR
V
N
119.44 657.73 177.93 683.22 12.75 RR
7 X
V
0 X
N
218.82 654.53 277.31 680.02 12.75 RR
V
N
216.22 656.63 274.71 682.12 12.75 RR
7 X
V
0 X
N
220.54 597.74 279.03 623.24 12.75 RR
V
N
217.94 599.84 276.43 625.34 12.75 RR
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(FOR) 124.17 712.76 T
(TRAN) 144.88 712.76 T
(C) 241.9 712.76 T
(SimpleScalar) 251.38 642.28 T
(Object \336les) 255.88 582.25 T
(SimpleScalar) 292.56 549.48 T
2 8 Q
(SimpleScalar) 225.43 670.92 T
(SimpleScalar) 225.43 613.84 T
(SS libm.a) 149.44 558.65 T
(SS libF77.a) 153.43 542.56 T
(Host C compiler) 369.77 662.46 T
(GCC) 238.54 662.52 T
(GAS) 238.76 605.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(f2c) 143.58 666.91 T
283.54 561.4 357.98 561.4 2 L
N
246.76 690.87 250.83 690.87 246.76 683.82 242.7 690.87 4 Y
0 Z
N
246.76 690.87 250.83 690.87 246.76 683.82 242.7 690.87 4 Y
V
246.76 700.32 246.76 691.12 2 L
2 Z
N
0 10 Q
(benchmark sour) 109.2 702.93 T
(ce) 179.3 702.93 T
246.76 634.88 250.83 634.88 246.76 627.84 242.7 634.88 4 Y
0 Z
N
246.76 634.88 250.83 634.88 246.76 627.84 242.7 634.88 4 Y
V
246.76 651.33 246.76 635.13 2 L
2 Z
N
(assembly) 259.55 631.02 T
(executables) 295.74 538.22 T
201.78 669.83 201.78 673.89 208.82 669.83 201.78 665.76 4 Y
0 Z
N
201.78 669.83 201.78 673.89 208.82 669.83 201.78 665.76 4 Y
V
183.33 669.83 201.53 669.83 2 L
2 Z
N
135.51 565.55 182.03 587.81 11.13 RR
V
N
133.44 567.39 179.96 589.65 11.13 RR
7 X
V
0 X
N
2 8 Q
(SS libc.a) 142.48 574.95 T
246.76 583.39 250.83 583.39 246.76 576.35 242.7 583.39 4 Y
0 Z
N
246.76 583.39 250.83 583.39 246.76 576.35 242.7 583.39 4 Y
V
246.76 595.74 246.76 583.64 2 L
2 Z
N
148.69 691.37 152.76 691.37 148.69 684.32 144.62 691.37 4 Y
0 Z
N
148.69 691.37 152.76 691.37 148.69 684.32 144.62 691.37 4 Y
V
148.69 700.32 148.69 691.62 2 L
2 Z
N
208.78 561.4 208.78 565.47 215.82 561.4 208.78 557.34 4 Y
0 Z
N
208.78 561.4 208.78 565.47 215.82 561.4 208.78 557.34 4 Y
V
192.33 561.4 208.53 561.4 2 L
2 Z
N
0 10 Q
(Simulator sour) 359.78 712.76 T
(ce) 423.77 712.76 T
(\050) 352.15 702.9 T
5 F
(e.g.) 355.48 702.9 T
0 F
(, sim-outorder) 369.92 702.9 T
(.c\051) 430.02 702.9 T
5 9 Q
(Simulator) 377.71 614.32 T
437.61 615.14 437.61 619.21 444.65 615.14 437.61 611.08 4 Y
0 Z
N
437.61 615.14 437.61 619.21 444.65 615.14 437.61 611.08 4 Y
V
423.99 615.14 437.36 615.14 2 L
2 Z
N
0 10 Q
(benchmark sour) 207.27 702.93 T
(ce) 277.37 702.93 T
(RESUL) 448.75 611.6 T
(TS) 481.17 611.6 T
396.22 688.12 400.28 688.12 396.22 681.08 392.15 688.12 4 Y
0 Z
N
396.22 688.12 400.28 688.12 396.22 681.08 392.15 688.12 4 Y
V
396.22 699.14 396.22 688.37 2 L
2 Z
N
396.22 634.13 400.28 634.13 396.22 627.09 392.15 634.13 4 Y
0 Z
N
396.22 634.13 400.28 634.13 396.22 627.09 392.15 634.13 4 Y
V
396.22 647.38 396.22 634.38 2 L
2 Z
N
183.83 577.77 M
 203.98 577.77 220.32 574.41 220.32 570.27 D
O
7 X
V
213.99 574.42 216.22 577.83 219.9 570.54 211.75 571 4 Y
0 Z
0 X
N
213.99 574.42 216.22 577.83 219.9 570.54 211.75 571 4 Y
V
183.83 577.77 M
 196.23 577.77 208.03 578.32 213.78 574.55 D
2 Z
N
219.82 553.35 M
 219.82 548.66 210.42 544.86 198.83 544.86 D
O
7 X
V
214.62 547.86 211.66 550.66 219.48 552.99 217.58 545.06 4 Y
0 Z
0 X
N
214.62 547.86 211.66 550.66 219.48 552.99 217.58 545.06 4 Y
V
214.45 547.68 M
 211.55 544.62 205.03 544.86 198.83 544.86 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(Figure 1. SimpleScalar tool set o) 210.25 515.69 T
(ver) 364.55 515.69 T
(vie) 379.66 515.69 T
(w) 393.41 515.69 T
0 F
(Pr) 448.06 549.48 T
(ecompiled SS) 458.43 549.48 T
(binaries \050test, SPEC95\051) 431.42 538.22 T
370.15 569.14 388.15 569.14 397.15 578.14 406.15 569.14 424.15 569.14 406.15 587.14 388.15 587.14 7 Y
7 X
V
0 X
N
396.22 594.8 392.15 594.8 396.22 601.85 400.28 594.8 4 Y
0 Z
N
396.22 594.8 392.15 594.8 396.22 601.85 400.28 594.8 4 Y
V
396.22 587.14 396.22 594.55 2 L
2 Z
N
380.3 568.07 M
 380.3 564.49 369.02 561.59 355.1 561.59 D
O
7 X
V
370.22 562.95 368.87 565.61 379.49 567.66 371.56 560.29 4 Y
0 Z
0 X
N
370.22 562.95 368.87 565.61 379.49 567.66 371.56 560.29 4 Y
V
369.99 562.84 M
 366.21 560.92 360.67 561.59 355.1 561.59 D
2 Z
N
444.38 551.51 M
 427.68 551.51 414.14 558.92 414.14 568.07 D
O
7 X
V
419.96 558.41 417.42 556.88 414.61 567.29 422.51 559.95 4 Y
0 Z
0 X
N
419.96 558.41 417.42 556.88 414.61 567.29 422.51 559.95 4 Y
V
444.38 551.51 M
 434.43 551.51 423.63 552.34 420.09 558.2 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.29 500.76 557.86 720.71 C
0 0 612 792 C
60 511.29 552.15 511.29 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(4) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(setenv CC $IDIR/bin/ssbig-na-sstrix-gcc) 72 714.41 T
(unsetenv TZ) 72 704.41 T
(unsetenv MACHINE) 72 694.41 T
(make) 72 684.41 T
(make install) 71.98 674.41 T
2 9 Q
0.7 (Note that you must ha) 59.98 659.74 P
0.7 (v) 142.08 659.74 P
0.7 (e already b) 146.44 659.74 P
0.7 (uilt the SimpleScalar simula-) 187.14 659.74 P
-0.05 (tors to b) 59.98 648.74 P
-0.05 (uild this library) 89.2 648.74 P
-0.05 (, since the glibc b) 144.02 648.74 P
-0.05 (uild requires a compiled) 206.89 648.74 P
2.85 (simulator to test tar) 59.98 637.74 P
2.85 (get machine-speci\336c parameters such as) 138.12 637.74 P
(endian-ness.) 59.98 626.74 T
0.95 (If you ha) 72 615.74 P
0.95 (v) 106.21 615.74 P
0.95 (e FOR) 110.57 615.74 P
0.95 (TRAN benchmarks, you will need to b) 134.73 615.74 P
0.95 (uild) 279.97 615.74 P
(f2c:) 59.98 604.74 T
4 8 Q
(cd $IDIR/f2c-1994.09.27) 71.98 590.41 T
(make) 72 580.41 T
(make install) 71.98 570.41 T
2 9 Q
0.2 (The entire tool set should no) 59.98 555.74 P
0.2 (w be ready for use. W) 163.49 555.74 P
0.2 (e pro) 243.23 555.74 P
0.2 (vide pre-) 261.54 555.74 P
-0.14 (compiled test binaries \050big- and little-endian\051 and their sources in) 59.98 544.74 P
1 F
($IDIR/simplesim2.0/tests) 59.98 533.74 T
2 F
(\051. T) 189.58 533.74 T
(o run a test:) 201.85 533.74 T
4 8 Q
(cd $IDIR/simplesim-2.0) 71.98 519.41 T
(sim-safe tests/bin.big/test-math) 71.98 509.4 T
2 9 Q
-0.22 (The test should generate about a page of output, and will run v) 59.98 494.74 P
-0.22 (ery) 282.48 494.74 P
0.01 (quickly) 59.98 483.74 P
0.01 (. The release has been ported to\321and should run on\321the) 86.39 483.74 P
(follo) 59.98 472.74 T
(wing systems:) 76.75 472.74 T
(- gcc/AIX 413/RS6000) 59.98 457.74 T
(- xlc/AIX 413/RS6000) 59.98 446.74 T
(- gcc/HPUX/P) 59.98 435.74 T
(A-RISC) 111.39 435.74 T
(- gcc/SunOS 4.1.3/SP) 59.98 424.74 T
(ARC) 137.65 424.74 T
(- gcc/Linux 1.3/x86) 59.98 413.74 T
(- gcc/Solaris 2/SP) 59.98 402.74 T
(ARC) 123.65 402.74 T
(- gcc/Solaris 2/x86) 59.98 391.74 T
(- gcc/DEC Unix 3.2/Alpha) 59.98 380.74 T
(- c89/DEC Unix 3.2/Alpha) 59.98 369.74 T
(- gcc/FreeBSD 2.2/x86) 59.98 358.74 T
(- gcc/W) 59.98 347.74 T
(indo) 88.35 347.74 T
(wsNT/x86) 104.13 347.74 T
0 12 Q
(3  The Simplescalar ar) 59.98 322.74 T
(chitectur) 175.09 322.74 T
(e) 220.86 322.74 T
2 9 Q
1.02 (The SimpleScalar architecture is deri) 72 305.74 P
1.02 (v) 209.32 305.74 P
1.02 (ed from the MIPS-IV) 213.68 305.74 P
0.56 (ISA [4]. The tool suite de\336nes both little-endian and big-endian) 59.98 294.74 P
1.32 (v) 59.98 283.74 P
1.32 (ersions of the architecture to impro) 64.34 283.74 P
1.32 (v) 197.04 283.74 P
1.32 (e portability \050the v) 201.4 283.74 P
1.32 (ersion) 271.98 283.74 P
0.12 (used on a gi) 59.98 272.74 P
0.12 (v) 103.35 272.74 P
0.12 (en host machine is the one that matches the endian-) 107.71 272.74 P
0.87 (ness of the host\051. The semantics of the SimpleScalar ISA are a) 59.98 261.74 P
2.12 (superset of MIPS with the follo) 59.98 250.74 P
2.12 (wing notable dif) 183.61 250.74 P
2.12 (ferences and) 246.63 250.74 P
(additions:) 59.98 239.74 T
(\245) 59.98 226.74 T
0.37 (There are no architected delay slots: loads, stores, and con-) 77.98 226.74 P
(trol transfers do not e) 77.98 215.74 T
(x) 154.83 215.74 T
(ecute the succeeding instruction.) 159.19 215.74 T
(\245) 59.98 202.74 T
1.91 (Loads and stores support tw) 77.98 202.74 P
1.91 (o addressing modes\321for all) 186.51 202.74 P
-0.14 (data types\321in addition to those found in the MIPS architec-) 77.98 191.74 P
0.59 (ture. These are: inde) 77.98 180.74 P
0.59 (x) 153.09 180.74 P
0.59 (ed \050re) 157.45 180.74 P
0.59 (gister+re) 178.64 180.74 P
0.59 (gister\051, and auto-incre-) 210.57 180.74 P
(ment/decrement.) 77.98 169.74 T
(\245) 59.98 156.74 T
1.63 (A square-root instruction, which implements both single-) 77.98 156.74 P
(and double-precision \337oating point square roots.) 77.98 145.74 T
(\245) 59.98 132.74 T
(An e) 77.98 132.74 T
(xtended 64-bit instruction encoding.) 95.08 132.74 T
0.44 (W) 72 119.74 P
0.44 (e list all SimpleScalar instructions in Figure) 79.78 119.74 P
0.44 (2. W) 242.7 119.74 P
0.44 (e pro) 259.92 119.74 P
0.44 (vide) 278.48 119.74 P
0.97 (a complete list of the instruction semantics \050as implemented in) 59.98 108.74 P
0.44 (the simulator\051 in Appendix) 59.98 97.74 P
0.44 (A. In T) 160.81 97.74 P
0.44 (able) 187.22 97.74 P
0.44 (1, we list the architected) 204.46 97.74 P
2.04 (re) 59.98 86.74 P
2.04 (gisters in the SimpleScalar architecture, their hardw) 66.83 86.74 P
2.04 (are and) 265.7 86.74 P
0.69 (softw) 59.98 75.74 P
0.69 (are names \050which are recognized by the assembler\051, and a) 79.88 75.74 P
1.13 (description of each. Both the number and the semantics of the) 318 713.74 P
(re) 318 702.74 T
(gisters are identical to those in the MIPS-IV ISA.) 324.86 702.74 T
0.03 (In Figure) 330.02 691.74 P
0.03 (3, we depict the three instruction encodings of Sim-) 365.55 691.74 P
-0.13 (pleScalar instructions:) 318 680.74 P
3 F
-0.13 (r) 400.23 680.74 P
-0.13 (e) 403.4 680.74 P
-0.13 (gister) 407.03 680.74 P
2 F
-0.13 (,) 427.17 680.74 P
3 F
-0.13 (immediate) 431.54 680.74 P
2 F
-0.13 (, and) 469.04 680.74 P
3 F
-0.13 (jump) 488.52 680.74 P
2 F
-0.13 ( formats. All) 506.52 680.74 P
(instructions are 64 bits in length.) 318 669.74 T
1.8 (The re) 330.02 658.74 P
1.8 (gister format is used for computational instructions.) 354.93 658.74 P
-0.22 (The immediate format supports the inclusion of a 16-bit constant.) 318 647.74 P
1.24 (The jump format supports speci\336cation of 24-bit jump tar) 318 636.74 P
1.24 (gets.) 535.25 636.74 P
-0.08 (The re) 318 625.74 P
-0.08 (gister \336elds are all 8 bits, to support e) 341.02 625.74 P
-0.08 (xtension of the archi-) 475.5 625.74 P
0.77 (tected re) 318 614.74 P
0.77 (gisters to 256 inte) 349.37 614.74 P
0.77 (ger and \337oating point re) 415.8 614.74 P
0.77 (gisters. Each) 505.24 614.74 P
1.05 (instruction format has a \336x) 318 603.74 P
1.05 (ed-location, 16-bit opcode \336eld that) 419.06 603.74 P
(f) 318 592.74 T
(acilitates f) 320.91 592.74 T
(ast instruction decoding.) 358.06 592.74 T
0.98 (The) 330.02 581.74 P
3 F
0.98 (annote) 347.24 581.74 P
2 F
0.98 ( \336eld is a 16-bit \336eld that can be modi\336ed post-) 371.74 581.74 P
1.19 (compile, with annotations to instructions in the assembly \336les.) 318 570.74 P
0.86 (The annotation interf) 318 559.74 P
0.86 (ace is useful for synthesizing ne) 395.61 559.74 P
0.86 (w instruc-) 514.9 559.74 P
2.06 (tions without ha) 318 548.74 P
2.06 (ving to change and recompile the assembler) 379.94 548.74 P
2.06 (.) 549.75 548.74 P
0.07 (Annotations are attached to the opcode, and come in tw) 318 537.74 P
0.07 (o \337a) 518.54 537.74 P
0.07 (v) 534.18 537.74 P
0.07 (ors:) 538.5 537.74 P
(bit and \336eld annotations. A bit annotation is written as follo) 318 526.74 T
(ws:) 532.52 526.74 T
4 8 Q
(lw/a) 330 512.41 T
($r6,4\050$r7\051) 390 512.41 T
2 9 Q
0.45 (The annotation in this e) 318 497.74 P
0.45 (xample is /a. It speci\336es that the \336rst bit) 404.66 497.74 P
-0.18 (of the annotation \336eld should be set. Bit annotations /a through /p) 318 486.74 P
0.63 (set bits 0 through 15, respecti) 318 475.74 P
0.63 (v) 426.94 475.74 P
0.63 (ely) 431.31 475.74 P
0.63 (. Field annotations are written) 441.72 475.74 P
(in the form:) 318 464.74 T
4 8 Q
(lw/6:4\0507\051) 330 450.4 T
($r6,4\050$r7\051) 390 450.4 T
2 9 Q
0.67 (This annotation sets the speci\336ed 3-bit \336eld \050from bit 4 to bit 6) 318 435.74 P
3 F
(within) 318 424.74 T
2 F
( the 16-bit annotation \336eld\051 to the v) 340.51 424.74 T
(alue 7.) 468.03 424.74 T
-0.08 (System calls in SimpleScalar are managed by a proxy handler) 330.02 413.74 P
1.24 (\050located in) 318 402.74 P
1 F
2.98 (syscall.c) 360.97 402.74 P
2 F
1.24 (\051 that intercepts system calls made by) 409.57 402.74 P
0.43 (the simulated binary) 318 391.74 P
0.43 (, decodes the system call, copies the system) 391.77 391.74 P
-0.19 (call ar) 318 380.74 P
-0.19 (guments, mak) 339.89 380.74 P
-0.19 (es the corresponding call to the host\325) 390.11 380.74 P
-0.19 (s operat-) 520.95 380.74 P
0.44 (ing system, and then copies the results of the call into the simu-) 318 369.74 P
1.4 (lated program\325) 318 358.74 P
1.4 (s memory) 372.14 358.74 P
1.4 (. If you are porting SimpleScalar to a) 408.71 358.74 P
0.83 (ne) 318 347.74 P
0.83 (w platform, you will ha) 326.27 347.74 P
0.83 (v) 414.16 347.74 P
0.83 (e to code the system call translation) 418.53 347.74 P
0.43 (from SimpleScalar to your host machine in) 318 336.74 P
1 F
1.04 (syscall.c) 478.28 336.74 P
2 F
0.43 (. A list) 526.88 336.74 P
(of all SimpleScalar system calls is pro) 318 325.74 T
(vided in Appendix) 455.36 325.74 T
(B.) 524.6 325.74 T
2.59 (SimpleScalar uses a 31-bit address space, and its virtual) 330.02 314.74 P
(memory is laid out as follo) 318 303.74 T
(ws:) 414.52 303.74 T
4 8 Q
(0x00000000) 330.02 289.4 T
(Unused) 395.72 289.4 T
(0x00400000) 330.02 279.41 T
(Start of text segment) 395.72 279.41 T
(0x10000000) 330.02 269.41 T
(Start of data segment) 395.72 269.41 T
(0x7fffc000) 330.02 259.41 T
(Stack base \050grows down\051) 395.72 259.41 T
2 9 Q
0.18 (The top of the data se) 318 244.74 P
0.18 (gment \050which includes init and bss\051 is held) 396.5 244.74 P
1.88 (in) 318 233.74 P
1 F
4.52 (mem_brk_point) 329.14 233.74 P
2 F
1.88 (. The areas belo) 399.34 233.74 P
1.88 (w the te) 461.74 233.74 P
1.88 (xt se) 493.87 233.74 P
1.88 (gment and) 512.37 233.74 P
(abo) 318 222.74 T
(v) 330.86 222.74 T
(e the stack base are unused.) 335.23 222.74 T
0 12 Q
(4  Simulator inter) 318 197.74 T
(nals) 408.82 197.74 T
2 9 Q
0.34 (In this section, we describe the functionality of the processor) 330.02 180.74 P
0.56 (simulators that accompan) 318 169.74 P
0.56 (y the tool set. W) 410.98 169.74 P
0.56 (e describe each of the) 471.77 169.74 P
2.85 (simulators, their functionality) 318 158.74 P
2.85 (, command-line ar) 429.87 158.74 P
2.85 (guments, and) 501.15 158.74 P
(internal structures.) 318 147.74 T
1.44 (The compiler outputs binaries that are compatible with the) 330.02 136.74 P
0.73 (MIPS ECOFF object format. Library calls are handled with the) 318 125.74 P
0.27 (ported v) 318 114.74 P
0.27 (ersion of GNU GLIBC and POSIX-compliant Unix sys-) 347.88 114.74 P
0.29 (tem calls. The simulators currently e) 318 103.74 P
0.29 (x) 450.82 103.74 P
0.29 (ecute only user) 455.18 103.74 P
0.29 (-le) 510.08 103.74 P
0.29 (v) 519.35 103.74 P
0.29 (el code.) 523.72 103.74 P
0.23 (All SimpleScalar) 318 92.74 P
0.23 (-related e) 379.8 92.74 P
0.23 (xtensions to GCC are contained in the) 413.63 92.74 P
1 F
3.58 (config/ss) 318 81.74 P
2 F
1.49 ( subdirectory of the GCC source tree that comes) 366.6 81.74 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(5) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(Har) 171.22 456.14 T
(d) 186.04 456.14 T
(ware Name) 191.41 456.14 T
(Software Name) 251.57 456.14 T
(Description) 329.07 456.14 T
7 F
($0) 171.07 443.14 T
($z) 251.07 443.14 T
(ero) 260.44 443.14 T
(z) 329.07 443.14 T
(ero-v) 333.44 443.14 T
(alued source/sink) 353.71 443.14 T
($1) 171.07 432.14 T
($at) 251.07 432.14 T
(reser) 329.07 432.14 T
(v) 349.85 432.14 T
(ed b) 354.12 432.14 T
(y assemb) 371.45 432.14 T
(ler) 409.79 432.14 T
($2-$3) 171.07 421.14 T
($v0-$v1) 251.07 421.14 T
(fn retur) 329.07 421.14 T
(n result regs) 357.81 421.14 T
($4-$7) 171.07 410.14 T
($a0-$a3) 251.07 410.14 T
(fn argument v) 329.07 410.14 T
(alue regs) 383.87 410.14 T
($8-$15) 171.07 399.14 T
($t0-$t7) 251.07 399.14 T
(temp regs) 329.07 399.14 T
(, caller sa) 368.95 399.14 T
(v) 407.28 399.14 T
(ed) 411.56 399.14 T
($16-$23) 171.07 388.14 T
($s0-$s7) 251.07 388.14 T
(sa) 329.07 388.14 T
(v) 338.4 388.14 T
(ed regs) 342.67 388.14 T
(, callee sa) 372.55 388.14 T
(v) 412.89 388.14 T
(ed) 417.17 388.14 T
($25-$25) 171.07 377.14 T
($t8-$t9) 251.07 377.14 T
(temp regs) 329.07 377.14 T
(, caller sa) 368.95 377.14 T
(v) 407.28 377.14 T
(ed) 411.56 377.14 T
($26-$27) 171.07 366.14 T
($k0-$k1) 251.07 366.14 T
(reser) 329.07 366.14 T
(v) 349.85 366.14 T
(ed b) 354.12 366.14 T
(y OS) 371.45 366.14 T
($28) 171.07 355.14 T
($gp) 251.07 355.14 T
(global pointer) 329.07 355.14 T
($29) 171.07 344.14 T
($sp) 251.07 344.14 T
(stac) 329.07 344.14 T
(k pointer) 345.4 344.14 T
($30) 171.07 333.14 T
($s8) 251.07 333.14 T
(sa) 329.07 333.14 T
(v) 338.4 333.14 T
(ed regs) 342.67 333.14 T
(, callee sa) 372.55 333.14 T
(v) 412.89 333.14 T
(ed) 417.17 333.14 T
($31) 171.07 322.14 T
($r) 251.07 322.14 T
(a) 258.98 322.14 T
(retur) 329.07 322.14 T
(n address reg) 347.8 322.14 T
($hi) 171.07 311.14 T
($hi) 251.07 311.14 T
(high result register) 329.07 311.14 T
($lo) 171.07 300.14 T
($lo) 251.07 300.14 T
(lo) 329.07 300.14 T
(w result register) 335.94 300.14 T
($f0-$f31) 171.07 289.14 T
($f0-$f31) 251.07 289.14 T
(\337oating point registers) 329.07 289.14 T
($fcc) 171.07 278.14 T
($fcc) 251.07 278.14 T
(\337oating point condition code) 329.07 278.14 T
6 10 Q
(T) 178.57 261.47 T
(ab) 183.88 261.47 T
(le 1: SimpleScalar ar) 195.45 261.47 T
(c) 293.08 261.47 T
(hitecture register de\336nitions) 298.54 261.47 T
165.07 464.77 165.07 274.52 2 L
V
0.75 H
0 Z
N
245.07 465.52 245.07 273.77 2 L
V
N
323.07 465.52 323.07 273.77 2 L
V
N
447.07 464.77 447.07 274.52 2 L
V
N
164.7 465.14 447.45 465.14 2 L
V
N
165.45 451.39 446.7 451.39 2 L
V
0.5 H
N
165.45 448.89 446.7 448.89 2 L
V
N
164.7 439.14 447.45 439.14 2 L
V
0.75 H
N
164.7 428.14 447.45 428.14 2 L
V
N
164.7 417.14 447.45 417.14 2 L
V
N
164.7 406.14 447.45 406.14 2 L
V
N
164.7 395.14 447.45 395.14 2 L
V
N
164.7 384.14 447.45 384.14 2 L
V
N
164.7 373.14 447.45 373.14 2 L
V
N
164.7 362.14 447.45 362.14 2 L
V
N
164.7 351.14 447.45 351.14 2 L
V
N
164.7 340.14 447.45 340.14 2 L
V
N
164.7 329.14 447.45 329.14 2 L
V
N
164.7 318.14 447.45 318.14 2 L
V
N
164.7 307.14 447.45 307.14 2 L
V
N
164.7 296.14 447.45 296.14 2 L
V
N
164.7 285.14 447.45 285.14 2 L
V
N
164.7 274.14 447.45 274.14 2 L
V
N
60 72 552.15 239.14 C
60 81.57 552.15 239.14 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Register f) 112.14 218.67 T
(ormat:) 153.26 218.67 T
(Immediate f) 112.14 168.05 T
(ormat:) 163.82 168.05 T
(J) 112.14 117.53 T
(ump f) 116.99 117.53 T
(ormat:) 142.02 117.53 T
2 9 Q
(16-annote) 220.58 231.43 T
(16-opcode) 291.58 231.43 T
(8-rs) 359.58 231.43 T
(8-rt) 396.58 231.43 T
(8-rd) 430.58 231.43 T
(8-ru/shamt) 460.58 231.43 T
(16-imm) 444.07 180.81 T
(6-unused) 349.58 130.04 T
(24-tar) 415.91 130.04 T
(get) 437.24 130.04 T
202.57 214.65 274.58 229.45 R
0.5 H
2 Z
N
346.58 214.65 382.58 229.45 R
N
373.58 113.17 490.58 128.65 R
N
346.58 113.17 373.58 128.65 R
N
274.58 214.65 346.58 229.45 R
N
382.58 214.65 418.58 229.45 R
N
418.58 214.65 454.58 229.45 R
N
454.58 214.65 490.58 229.45 R
N
202.57 164.03 274.58 178.84 R
N
346.58 164.03 382.58 178.84 R
N
274.58 164.03 346.58 178.84 R
N
382.58 164.03 418.58 178.84 R
N
418.58 164.03 490.58 178.84 R
N
202.57 113.17 274.58 128.65 R
N
274.58 113.17 346.58 128.65 R
N
(16-annote) 220.57 180.07 T
(16-opcode) 290.58 180.07 T
(8-rs) 359.57 180.07 T
(8-rt) 396.57 180.07 T
(16-annote) 220.57 130.04 T
(16-opcode) 290.58 130.04 T
1 F
(63) 202.57 207.85 T
(32) 334 207.85 T
(31) 348.72 207.85 T
(0) 486.58 207.85 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 202.57 157.23 T
(32) 334 157.23 T
(31) 348.72 157.23 T
(0) 486.58 157.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 202.57 105.79 T
(32) 334 105.79 T
(31) 348.72 105.79 T
(0) 486.58 105.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(Figure 3. SimpleScalar ar) 175.37 84.62 T
(c) 294.67 84.62 T
(hitecture instruction f) 300.13 84.62 T
(ormats) 402.72 84.62 T
60 72 552.15 239.14 C
0 0 612 792 C
50.97 478.12 561.17 719.86 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0 X
0 0 0 1 0 0 0 K
(j - jump) 57.14 697.71 T
(jal - jump and link) 57.14 688.71 T
(jr - jump re) 57.14 679.71 T
(gister) 97.75 679.71 T
(jalr - jump and link re) 57.14 670.71 T
(gister) 135.75 670.71 T
(beq - branch == 0) 57.14 661.71 T
(bne - branch != 0) 57.14 652.71 T
(blez - branch <= 0) 57.14 643.71 T
(bgtz - branch > 0) 57.14 634.71 T
(bltz - branch < 0) 57.14 625.71 T
(bgez - branch >= 0) 57.14 616.71 T
(bct - branch FCC TR) 57.14 607.71 T
(UE) 132.78 607.71 T
(bcf - branch FCC F) 57.14 598.71 T
(ALSE) 126.47 598.71 T
(lb - load byte) 165.71 697.71 T
(lb) 165.71 688.71 T
(u - load byte unsigned) 172.54 688.71 T
(lh - load half \050short\051) 165.71 679.71 T
(lhu - load half \050short\051 unsigned) 165.71 670.71 T
(l) 165.71 661.71 T
(w - load w) 168.13 661.71 T
(ord) 206.28 661.71 T
(dl) 165.71 652.71 T
(w - load double w) 172.63 652.71 T
(ord) 237.53 652.71 T
(l.s - load single-precision FP) 165.71 643.71 T
(l.d - load double-precision FP) 165.71 634.71 T
(sb - store byte) 165.71 625.71 T
(sb) 165.71 616.71 T
(u - store byte unsigned) 173.54 616.71 T
(sh - store half \050short\051) 165.71 607.71 T
(shu - store half \050short\051 unsigned) 165.71 598.71 T
(sw - store w) 165.71 589.71 T
(ord) 209.37 589.71 T
(dsw - store double w) 165.71 580.71 T
(ord) 240.61 580.71 T
(s.s - store single-precision FP) 165.71 571.71 T
(s.d - store double-precision FP) 165.71 562.71 T
(add - inte) 290.72 697.71 T
(ger add) 324.57 697.71 T
(addu - inte) 290.72 688.71 T
(ger add unsigned) 329.07 688.71 T
(sub - inte) 290.72 679.71 T
(ger subtract) 324.08 679.71 T
(sub) 290.72 670.71 T
(u - inte) 303.04 670.71 T
(ger subtract unsigned) 328.4 670.71 T
(mult - inte) 290.72 661.71 T
(ger multiply) 328.08 661.71 T
(multu - inte) 290.72 652.71 T
(ger multiply unsigned) 332.58 652.71 T
(di) 290.72 643.71 T
(v - inte) 297.49 643.71 T
(ger di) 322.86 643.71 T
(vide) 343.38 643.71 T
(di) 290.72 634.71 T
(vu - inte) 297.49 634.71 T
(ger di) 327.36 634.71 T
(vide unsigned) 347.88 634.71 T
(and - logical AND) 290.72 625.71 T
(or - logical OR) 290.72 616.71 T
(xor - logical XOR) 290.72 607.71 T
(nor - logical NOR) 290.72 598.71 T
(sll - shift left logical) 290.72 589.71 T
(srl - shift right logical) 290.72 580.71 T
(sra - shift right arithmetic) 290.72 571.71 T
(slt - set less than) 290.72 562.71 T
(sltu - set less than unsigned) 290.72 553.71 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(add.s - single-precision \050SP\051 add) 422.86 697 T
(add.d - double-precision \050DP\051 add) 422.86 688 T
(sub) 422.86 679 T
(.s - SP subtract) 435 679 T
(sub) 422.86 670 T
(.d - DP subtract) 435 670 T
(mult.s - SP multiply) 422.86 661 T
(mult.d - DP multiply) 422.86 652 T
(di) 422.86 643 T
(v) 429.64 643 T
(.s - SP di) 433.55 643 T
(vide) 465.83 643 T
(di) 422.86 634 T
(v) 429.64 634 T
(.d - DP di) 433.55 634 T
(vide) 468.33 634 T
(abs.s - SP absolute v) 422.86 625 T
(alue) 496.88 625 T
(abs.d - DP absolute v) 422.86 616 T
(alue) 499.38 616 T
(ne) 422.86 607 T
(g.s - SP ne) 431.22 607 T
(g) 469.59 607 T
(ation) 474.04 607 T
(ne) 422.86 598 T
(g.d - DP ne) 431.22 598 T
(g) 472.08 598 T
(ation) 476.54 598 T
(sqrt.s - SP square root) 422.86 589 T
(sqrt.d - DP square root) 422.86 580 T
(cvt - int., single, double con) 422.86 571 T
(v) 522.99 571 T
(ersion) 527.36 571 T
(c.s - SP compare) 422.86 562 T
(c.d - DP compare) 422.86 553 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(nop - no operation) 422.86 522.71 T
(syscall - system call) 422.86 513.71 T
(break - declare program error) 422.86 504.71 T
(\050C\051) 165.71 534.86 T
(\050re) 165.71 525.86 T
(g+C\051 \050with pre/post inc/dec\051) 175.57 525.86 T
(\050re) 165.71 516.86 T
(g+re) 175.57 516.86 T
(g\051 \050with pre/post inc/dec\051) 192 516.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(Miscellaneous) 422.86 534.14 T
(Floating P) 422.86 709.71 T
(oint Arithmetic) 475.62 709.71 T
(Contr) 57.14 709.71 T
(ol) 87.59 709.71 T
(Load/Stor) 165.71 709.71 T
(e) 217.51 709.71 T
(Integer Arithmetic) 290.72 709.71 T
2 9 Q
(addressing modes:) 165.71 545.14 T
6 10 Q
(Figure 2. Summar) 184.6 484.82 T
(y of SimpleScalar instructions) 269.17 484.82 T
60.36 480.57 552.5 480.57 2 L
0.5 H
2 Z
N
0 0 612 792 C
60 257 552.15 257 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(6) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(with the distrib) 59.98 713.74 T
(ution.) 114.3 713.74 T
2.17 (The architecture is de\336ned in) 72 702.74 P
1 F
5.21 (ss.def) 190.08 702.74 P
2 F
2.17 (, which contains a) 222.48 702.74 P
0.5 (macro de\336nition for each instruction in the instruction set. Each) 59.98 691.74 P
0.17 (macro de\336nes the opcode, name, \337ags, operand sources and des-) 59.98 680.74 P
(tinations, and actions to be tak) 59.98 669.74 T
(en for a particular instruction.) 169.38 669.74 T
2 (The instruction actions \050which appear as macros\051 that are) 72 658.74 P
1.43 (common to all simulators are de\336ned in) 59.98 647.74 P
1 F
3.44 (ss.h) 215.26 647.74 P
2 F
1.43 (. Those actions) 236.86 647.74 P
0.32 (that require dif) 59.98 636.74 P
0.32 (ferent implementations in dif) 113.88 636.74 P
0.32 (ferent simulators are) 219.36 636.74 P
(de\336ned in each simulator code \336le.) 59.98 625.74 T
1.79 (When running a simulator) 72 614.74 P
1.79 (,) 171.26 614.74 P
1 F
4.3 (main\050\051) 177.55 614.74 P
2 F
1.79 ( \050de\336ned in) 209.95 614.74 P
1 F
4.3 (main.c) 258.58 614.74 P
2 F
1.79 (\051) 290.98 614.74 P
0.82 (does all the initialization and loads the tar) 59.98 603.74 P
0.82 (get binary into mem-) 215.78 603.74 P
1.22 (ory) 59.98 592.74 P
1.22 (. The routine then calls) 71.39 592.74 P
1 F
2.93 (sim_main\050\051) 162.49 592.74 P
2 F
1.22 (, which is simulator) 216.49 592.74 P
1.22 (-) 290.98 592.74 P
-0.01 (speci\336c, de\336ned in each simulator code \336le.) 59.98 581.74 P
1 F
-0.03 ( sim_main\050\051) 217.88 581.74 P
2 F
-0.01 ( pre-) 277.25 581.74 P
1.21 (decodes the entire te) 59.98 570.74 P
1.21 (xt se) 137.2 570.74 P
1.21 (gment for f) 155.03 570.74 P
1.21 (aster simulation, and then) 197.85 570.74 P
(be) 59.98 559.74 T
(gins simulation from the tar) 68.34 559.74 T
(get program entry point.) 168.17 559.74 T
1.29 (The follo) 72 548.74 P
1.29 (wing command-line ar) 106.31 548.74 P
1.29 (guments are a) 190.23 548.74 P
1.29 (v) 242.62 548.74 P
1.29 (ailable in all) 246.89 548.74 P
(simulators included with the release:) 59.98 537.74 T
(-h) 72 524.74 T
(prints the simulator help message.) 131.98 524.74 T
(-d) 72 512.74 T
(turn on the deb) 131.98 512.74 T
(ug message.) 186.04 512.74 T
(-i) 72 500.74 T
(start e) 131.98 500.74 T
(x) 153.59 500.74 T
(ecution in the DLite! deb) 157.95 500.74 T
(ugger \050see) 248.26 500.74 T
(Section) 131.98 490.74 T
(5.2\051. This option is not supported in) 161.23 490.74 T
(the) 131.98 480.74 T
0 F
(sim-fast) 145.22 480.74 T
2 F
( simulator) 175.72 480.74 T
(.) 211.47 480.74 T
(-q) 72 468.74 T
(terminate immediately \050for use with -dump-) 131.98 468.74 T
(con\336g\051.) 131.98 458.74 T
(-dumpcon\336g <\336le>) 72 446.74 T
(generate a con\336guration \336le sa) 131.98 434.74 T
(ving the com-) 242.27 434.74 T
(mand-line parameters. Comments are per-) 131.98 424.74 T
(mitted in the con\336g \336les, and be) 131.98 414.74 T
(gin with a #.) 247.59 414.74 T
(-con\336g <\336le>) 72 402.74 T
(read in and use a con\336guration \336le. These) 131.98 402.74 T
(\336les may reference other con\336g \336les.) 131.98 392.74 T
0 11 Q
(4.1  Functional simulation) 59.98 370.4 T
2 9 Q
2.8 (The f) 72 355.74 P
2.8 (astest, least detailed simulator \050) 93.95 355.74 P
0 F
2.8 (sim-fast) 218.39 355.74 P
2 F
2.8 (\051 resides in) 248.88 355.74 P
1 F
4.55 (sim-fast.c) 59.98 344.74 P
2 F
1.9 (.) 113.98 344.74 P
0 F
1.9 (sim-fast) 120.37 344.74 P
2 F
1.9 ( does no time accounting, only func-) 150.86 344.74 P
0.77 (tional simulation\321it e) 59.98 333.74 P
0.77 (x) 142.39 333.74 P
0.77 (ecutes each instruction serially) 146.75 333.74 P
0.77 (, simulat-) 259.2 333.74 P
2.07 (ing no instructions in parallel.) 59.98 322.74 P
0 F
2.07 (sim-fast) 180.34 322.74 P
2 F
2.07 ( is optimized for ra) 210.83 322.74 P
2.07 (w) 287.48 322.74 P
1 (speed, and assumes no cache, instruction checking, and has no) 59.98 311.74 P
(support for DLite!.) 59.98 300.74 T
-0.1 (A separate v) 72 289.74 P
-0.1 (ersion of) 116.64 289.74 P
0 F
-0.1 (sim-fast) 150.43 289.74 P
2 F
-0.1 (, called) 180.92 289.74 P
0 F
-0.1 (sim-safe) 208.95 289.74 P
2 F
-0.1 (, also performs) 240.44 289.74 P
3.03 (functional simulation, b) 59.98 278.74 P
3.03 (ut checks for correct alignment and) 151.61 278.74 P
-0.19 (access permissions for each memory reference. Although similar) 59.98 267.74 P
-0.19 (,) 291.73 267.74 P
0 F
1.67 (sim-fast) 59.98 256.74 P
2 F
1.67 ( and) 90.47 256.74 P
0 F
1.67 (sim-safe) 111.3 256.74 P
2 F
1.67 ( are split \050i.e., protection is not toggled) 142.79 256.74 P
0.57 (with a command-line ar) 59.98 245.74 P
0.57 (gument in a mer) 147.25 245.74 P
0.57 (ged simulator\051 to maxi-) 207.53 245.74 P
1.68 (mize performance. Neither of the simulators accept an) 59.98 234.74 P
1.68 (y addi-) 267.05 234.74 P
0.78 (tional command-line ar) 59.98 223.74 P
0.78 (guments. Both v) 145.36 223.74 P
0.78 (ersions are v) 206.04 223.74 P
0.78 (ery simple:) 252.95 223.74 P
0.95 (less than 300 lines of code\321the) 59.98 212.74 P
0.95 (y therefore mak) 179.81 212.74 P
0.95 (e good starting) 238.59 212.74 P
0.29 (points for understanding the internal w) 59.98 201.74 P
0.29 (orkings of the simulators.) 201.09 201.74 P
0.58 (In addition to the simulator \336le, both) 59.98 190.74 P
0 F
0.58 (sim-fast) 198.52 190.74 P
2 F
0.58 ( and) 229.01 190.74 P
0 F
0.58 (sim-safe) 247.66 190.74 P
2 F
0.58 ( use) 279.15 190.74 P
1.32 (the follo) 59.98 179.74 P
1.32 (wing code \336les \050not including header \336les\051:) 91.32 179.74 P
1 F
3.18 (main.c) 259.33 179.74 P
2 F
1.32 (,) 291.73 179.74 P
1 F
14.85 (syscall.c) 59.98 168.74 P
2 F
6.19 (,) 108.58 168.74 P
1 F
14.85 (memory.c) 119.26 168.74 P
2 F
6.19 (,) 162.46 168.74 P
1 F
14.85 (regs.c) 173.15 168.74 P
2 F
6.19 (,) 205.55 168.74 P
1 F
14.85 (loader.c) 216.24 168.74 P
2 F
6.19 (,) 259.44 168.74 P
1 F
14.85 (ss.c) 270.13 168.74 P
2 F
6.19 (,) 291.73 168.74 P
1 F
(endian.c) 59.98 157.74 T
2 F
(, and) 103.18 157.74 T
1 F
(misc.c) 122.92 157.74 T
2 F
(.) 155.32 157.74 T
0 F
(sim-safe) 159.82 157.74 T
2 F
( also uses) 191.31 157.74 T
1 F
(dlite.c) 228.06 157.74 T
2 F
(.) 265.86 157.74 T
0 11 Q
(4.2  Cache simulation) 59.98 134.41 T
2 9 Q
2.71 (The SimpleScalar distrib) 72 119.74 P
2.71 (ution comes with tw) 166.73 119.74 P
2.71 (o functional) 248.02 119.74 P
0.54 (cache simulators;) 59.98 108.74 P
0 F
0.54 (sim-cache) 126.04 108.74 P
2 F
0.54 ( and) 164.02 108.74 P
0 F
0.54 (sim-cheetah) 182.59 108.74 P
2 F
0.54 (. Both use the \336le) 228.58 108.74 P
1 F
7.64 (cache.c) 59.98 97.74 P
2 F
3.18 (, and the) 97.78 97.74 P
3.18 (y use) 134.75 97.74 P
1 F
7.64 (sim-cache.c) 162.11 97.74 P
2 F
3.18 ( and) 221.51 97.74 P
1 F
7.64 (sim-chee-) 245.38 97.74 P
1.22 (tah.c) 59.98 86.74 P
2 F
0.51 (, respecti) 86.98 86.74 P
0.51 (v) 119.75 86.74 P
0.51 (ely) 124.12 86.74 P
0.51 (. These simulators are ideal for f) 134.53 86.74 P
0.51 (ast simula-) 254.22 86.74 P
1.21 (tion of caches if the ef) 59.98 75.74 P
1.21 (fect of cache performance on e) 146.02 75.74 P
1.21 (x) 263.11 75.74 P
1.21 (ecution) 267.48 75.74 P
(time is not needed.) 318 713.74 T
0 F
-0.05 (sim-cache) 330.02 702.74 P
2 F
-0.05 ( accepts the follo) 368.01 702.74 P
-0.05 (wing ar) 428.89 702.74 P
-0.05 (guments, in addition to the) 455.92 702.74 P
(uni) 318 691.74 T
(v) 329.28 691.74 T
(ersal ar) 333.64 691.74 T
(guments described in Section) 359.71 691.74 T
(4:) 467.71 691.74 T
(-cache:dl1 <con\336g>) 330.02 675.74 T
(con\336gures a le) 422.86 675.74 T
(v) 475.12 675.74 T
(el-one data cache.) 479.48 675.74 T
(-cache:dl2 <con\336g>) 330.02 663.74 T
(con\336gures a le) 422.86 663.74 T
(v) 475.12 663.74 T
(el-tw) 479.48 663.74 T
(o data cache.) 497.89 663.74 T
(-cache:il1 <con\336g>) 330.02 651.74 T
(con\336gures a le) 422.86 651.74 T
(v) 475.12 651.74 T
(el-one instr) 479.48 651.74 T
(. cache.) 519.73 651.74 T
(-cache:il2 <con\336g>) 330.02 639.74 T
(con\336gures a le) 422.86 639.74 T
(v) 475.12 639.74 T
(el-tw) 479.48 639.74 T
(o instr) 497.89 639.74 T
(. cache.) 520.15 639.74 T
(-tlb:dtlb <con\336g>) 330.02 627.74 T
(con\336gures the data TLB.) 422.86 627.74 T
(-tlb:itlb <con\336g>) 330.02 615.74 T
(con\336gures the instruction TLB.) 422.86 615.74 T
(-\337ush <boolean>) 330.02 603.74 T
(\337ush all caches on a system call;) 422.86 603.74 T
-0.07 (\050<boolean> = 0 | 1 | true | TR) 375 591.74 P
-0.07 (UE | f) 478.7 591.74 P
-0.07 (alse | F) 499.76 591.74 P
-0.07 (ALSE\051.) 524.25 591.74 P
(-icompress) 330.02 579.74 T
13.32 (remap SimpleScalar\325) 422.86 579.74 P
13.32 (s 64-bit) 511.42 579.74 P
-0.13 (instructions to a 32-bit equi) 422.86 569.74 P
-0.13 (v) 521.11 569.74 P
-0.13 (alent in) 525.38 569.74 P
7.1 (the simulation \050i.e., model a) 422.86 559.74 P
(machine with 4-w) 422.86 549.74 T
(ord instructions\051.) 487.76 549.74 T
(-pcstat <stat>) 330.02 537.74 T
(generate a te) 422.86 537.74 T
(xt-based pro\336le, as) 468.2 537.74 T
(described in Section) 422.86 527.74 T
(4.3.) 498.1 527.74 T
(The cache con\336guration \050<con\336g>\051 is formatted as follo) 318 512.74 T
(ws:) 520.14 512.74 T
4 8 Q
(<name>:<nsets>:<bsize>:<assoc>:<repl>) 330.02 498.4 T
2 9 Q
(Each of these \336elds has the follo) 318 483.74 T
(wing meaning:) 434.76 483.74 T
3 F
(<name>) 330.02 470.74 T
2 F
(cache name, must be unique.) 390 470.74 T
3 F
(<nsets>) 330.02 458.74 T
2 F
(number of sets in the cache.) 390 458.74 T
3 F
(<bsize>) 330.02 446.74 T
2 F
(block size \050for TLBs, use the page size\051.) 390 446.74 T
3 F
(<assoc>) 330.02 434.74 T
2 F
(associati) 390 434.74 T
(vity of the cache \050po) 420.77 434.74 T
(wer of tw) 494.53 434.74 T
(o\051.) 528.92 434.74 T
3 F
(<r) 330.02 422.74 T
(epl>) 339.27 422.74 T
2 F
(replacement polic) 390 422.74 T
(y \050l | f | r\051, where) 454.1 422.74 T
3 F
(l) 390 410.74 T
2 F
( = LR) 392.5 410.74 T
(U,) 413.22 410.74 T
3 F
(f) 424.22 410.74 T
2 F
( = FIFO,) 426.72 410.74 T
3 F
(r) 460.3 410.74 T
2 F
( = random replacement.) 463.8 410.74 T
0.43 (The cache size is therefore the product of <nsets>, <bsize>, and) 318 398.74 P
1.64 (<assoc>. T) 318 387.74 P
1.64 (o ha) 358.57 387.74 P
1.64 (v) 375.27 387.74 P
1.64 (e a uni\336ed le) 379.64 387.74 P
1.64 (v) 430.58 387.74 P
1.64 (el in the hierarch) 434.95 387.74 P
1.64 (y) 500.56 387.74 P
1.64 (, \322point\323 the) 504.47 387.74 P
-0.2 (instruction cache to the name of the data cache in the correspond-) 318 376.74 P
(ing le) 318 365.74 T
(v) 338.02 365.74 T
(el, as in the follo) 342.39 365.74 T
(wing e) 402.41 365.74 T
(xample:) 426.52 365.74 T
4 8 Q
(-cache:il1 il1:128:64:1:l) 330.02 350.4 T
(-cache:il2 dl2) 330.02 340.4 T
(-cache:dl1 dl1:256:32:1:l) 330.02 330.4 T
(-cache:dl2 ul2:1024:64:2:l) 330.02 320.4 T
2 9 Q
(The def) 318 305.74 T
(aults used in) 345.65 305.74 T
0 F
(sim-cache) 392.9 305.74 T
2 F
( are as follo) 430.89 305.74 T
(ws:) 472.9 305.74 T
(L1 instruction cache:) 330.02 290.74 T
(il1:256:32:1:l) 420 290.74 T
(\0508 KB\051) 497.14 290.74 T
(L1 data cache:) 330.02 278.74 T
(dl1:256:32:1:l) 420 278.74 T
(\0508 KB\051) 497.14 278.74 T
(L2 uni\336ed cache:) 330.02 266.74 T
(ul2:1024:64:4:l) 420 266.74 T
(\050256 KB\051) 497.14 266.74 T
(instruction TLB:) 330.02 254.74 T
(itlb:16:4096:4:l) 420 254.74 T
(\05064 entries\051) 497.14 254.74 T
(data TLB:) 330.02 242.74 T
(dtlb:32:4096:4:l) 420 242.74 T
(\050128 entries\051) 497.14 242.74 T
0 F
0.04 (sim-cheetah) 318 228.74 P
2 F
0.04 ( is based on w) 363.99 228.74 P
0.04 (ork performed by Ragin Sugumar and) 415.06 228.74 P
-0.05 (Santosh Abraham while the) 318 217.74 P
-0.05 (y were at the Uni) 417.46 217.74 P
-0.05 (v) 479.03 217.74 P
-0.05 (ersity of Michig) 483.4 217.74 P
-0.05 (an.) 541.25 217.74 P
-0.19 (It uses their Cheetah cache simulation engine [6] to generate sim-) 318 206.74 P
1.69 (ulation results for multiple cache con\336gurations with a single) 318 195.74 P
3.77 (simulation. The Cheetah engine simulates fully associati) 318 184.74 P
3.77 (v) 543.64 184.74 P
3.77 (e) 548 184.74 P
2.12 (caches ef) 318 173.74 P
2.12 (\336ciently) 353.12 173.74 P
2.12 (, as well as simulating a sometimes-optimal) 382.04 173.74 P
0.8 (replacement polic) 318 162.74 P
0.8 (y) 382.9 162.74 P
0.8 (. This polic) 386.82 162.74 P
0.8 (y w) 429.04 162.74 P
0.8 (as called MIN by Belady [1],) 443 162.74 P
0.29 (although the simulator refers to it as) 318 151.74 P
3 F
0.29 (opt) 452.3 151.74 P
2 F
0.29 (. Opt uses future kno) 463.81 151.74 P
0.29 (wl-) 540 151.74 P
-0.12 (edge to select a replacement; it chooses the block that will be ref-) 318 140.74 P
-0.01 (erenced the furthest in the future \050if at all\051. This polic) 318 129.74 P
-0.01 (y is optimal) 509.51 129.74 P
0.12 (for read-only instruction streams. It is not optimal for write-back) 318 118.74 P
0.35 (caches because it may be more e) 318 107.74 P
0.35 (xpensi) 437.41 107.74 P
0.35 (v) 460.68 107.74 P
0.35 (e to replace a block ref-) 465.05 107.74 P
0.03 (erenced further in the future if the block must be written back, as) 318 96.74 P
-0.08 (opposed to a clean block referenced slightly less f) 318 85.74 P
-0.08 (ar in the future.) 496.75 85.74 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(7) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0.95 (Horwitz et al. [3] formally described an optimal algorithm that) 59.98 714.1 P
0.22 (includes writes; ho) 59.98 703.1 P
0.22 (we) 128.18 703.1 P
0.22 (v) 138.45 703.1 P
0.22 (er) 142.82 703.1 P
0.22 (, only MIN is implemented in the simu-) 149.45 703.1 P
(lator) 59.98 692.1 T
(.) 75.98 692.1 T
-0.09 (W) 72 681.1 P
-0.09 (e ha) 79.78 681.1 P
-0.09 (v) 94.24 681.1 P
-0.09 (e included the Cheetah engine as a stand-alone library) 98.61 681.1 P
-0.09 (,) 291.73 681.1 P
0.38 (which is b) 59.98 670.1 P
0.38 (uilt and resides in the) 97.55 670.1 P
1 F
0.9 (libcheetah/) 178.67 670.1 P
2 F
0.38 ( directory) 238.07 670.1 P
0.38 (.) 272.6 670.1 P
0 F
0.38 (sim-) 277.48 670.1 P
-0.08 (cheetah) 59.98 659.1 P
2 F
-0.08 ( accepts the follo) 89.47 659.1 P
-0.08 (wing command-line ar) 150.23 659.1 P
-0.08 (guments, in addi-) 231.39 659.1 P
(tion to those listed at the be) 59.98 648.1 T
(ginning of Section) 158.84 648.1 T
(4:) 227.59 648.1 T
(-refs [inst | data | uni\336ed]) 72 633.1 T
(specify which reference stream to analyze.) 131.98 619.1 T
(-C [f) 72 607.1 T
(a | sa | dm]) 89.15 607.1 T
(fully associati) 131.98 595.1 T
(v) 182 595.1 T
(e, set associati) 186.36 595.1 T
(v) 237.88 595.1 T
(e, or direct-) 242.24 595.1 T
(mapped cache.) 131.98 585.1 T
(-R [lru | opt]) 72 573.1 T
(replacement polic) 131.98 573.1 T
(y) 196.07 573.1 T
(.) 199.99 573.1 T
(-a <sets>) 72 561.1 T
(log base 2 minimum bound on number of) 131.98 561.1 T
(sets to simulate simultaneously) 131.98 551.1 T
(.) 243.65 551.1 T
(-b <sets>) 72 539.1 T
(log base 2 maximum bound on set number) 131.98 539.1 T
(.) 284.72 539.1 T
(-l <line>) 72 527.1 T
(cache line size \050in bytes\051.) 131.98 527.1 T
(-n <assoc>) 72 515.1 T
(maximum associati) 131.98 515.1 T
(vity to analyze \050in log) 201.5 515.1 T
(base 2\051.) 131.98 505.1 T
(-in <interv) 72 493.1 T
(al>) 110.1 493.1 T
-0.21 (cache size interv) 131.98 493.1 P
-0.21 (al to report when simulating) 191.3 493.1 P
(fully associati) 131.98 483.1 T
(v) 182 483.1 T
(e caches.) 186.36 483.1 T
(-M <size>) 72 471.1 T
(maximum cache size of interest.) 131.98 471.1 T
(-C <size>) 72 459.1 T
(cache size for direct-mapped analyses.) 131.98 459.1 T
2.42 (Both of these simulators are ideal for performing high-le) 59.98 445.1 P
2.42 (v) 283.11 445.1 P
2.42 (el) 287.48 445.1 P
1.76 (cache studies that do not tak) 59.98 434.1 P
1.76 (e access time of the caches into) 170.43 434.1 P
-0.12 (account \050e.g., studies that are concerned only with miss rates\051. T) 59.98 423.1 P
-0.12 (o) 289.48 423.1 P
0 (measure the ef) 59.98 412.1 P
0 (fect of cache or) 112.23 412.1 P
0 (g) 167.8 412.1 P
0 (anization upon the e) 172.25 412.1 P
0 (x) 244.86 412.1 P
0 (ecution time) 249.23 412.1 P
2.06 (of real programs, ho) 59.98 401.1 P
2.06 (we) 138.91 401.1 P
2.06 (v) 149.18 401.1 P
2.06 (er) 153.55 401.1 P
2.06 (, the timing simulator described in) 160.18 401.1 P
(Section) 59.98 390.1 T
(4.4 must be used.) 89.23 390.1 T
0 11 Q
(4.3  Pr) 59.98 366.77 T
(o\336ling) 90.63 366.77 T
2 9 Q
0.83 (The distrib) 72 352.1 P
0.83 (ution comes with a functional simulator that pro-) 111.9 352.1 P
2.14 (duces v) 59.98 341.1 P
2.14 (oluminous and v) 89.18 341.1 P
2.14 (aried pro\336le information.) 153.23 341.1 P
0 F
2.14 (sim-pr) 252.64 341.1 P
2.14 (o\336le) 277.97 341.1 P
2 F
4.9 (can generate detailed pro\336les on instruction classes and) 59.98 330.1 P
1.56 (addresses, te) 59.98 319.1 P
1.56 (xt symbols, memory accesses, branches, and data) 106.89 319.1 P
(se) 59.98 308.1 T
(gment symbols.) 67.34 308.1 T
0 F
2.73 (sim-pr) 72 297.1 P
2.73 (o\336le) 97.33 297.1 P
2 F
2.73 ( tak) 113.34 297.1 P
2.73 (es the follo) 129.22 297.1 P
2.73 (wing command-line ar) 174.45 297.1 P
2.73 (guments,) 261.23 297.1 P
(which toggle the v) 59.98 286.1 T
(arious pro\336ling features:) 126.5 286.1 T
(-iclass) 72 273.1 T
(instruction class pro\336ling \050e.g. ALU,) 131.98 273.1 T
(branch\051.) 131.98 263.1 T
(-iprof) 72 251.1 T
(instruction pro\336ling \050e.g., bnez, addi\051.) 131.98 251.1 T
(-brprof) 72 239.1 T
-0.04 (branch class pro\336ling \050e.g., direct, calls, con-) 131.98 239.1 P
(ditional\051.) 131.98 229.1 T
(-amprof) 72 217.1 T
(addr) 131.98 217.1 T
(. mode pro\336ling \050e.g., displaced, R+R\051.) 147.47 217.1 T
(-se) 72 205.1 T
(gprof) 82.36 205.1 T
(load/store se) 131.98 205.1 T
(gment pro\336ling \050e.g., data,) 177.08 205.1 T
(heap\051.) 131.98 195.1 T
(-tsymprof) 72 183.1 T
(e) 131.98 183.1 T
(x) 135.84 183.1 T
(ecution pro\336le by te) 140.2 183.1 T
(xt symbol \050functions\051.) 212.31 183.1 T
(-dsymprof) 72 171.1 T
(reference pro\336le by data se) 131.98 171.1 T
(gment symbol.) 229.3 171.1 T
(-taddrprof) 72 159.1 T
(e) 131.98 159.1 T
(x) 135.84 159.1 T
(ecution pro\336le by te) 140.2 159.1 T
(xt address.) 212.31 159.1 T
(-all) 72 147.1 T
(turn on all pro\336ling listed abo) 131.98 147.1 T
(v) 239.09 147.1 T
(e.) 243.46 147.1 T
1.35 (Three of the simulators \050) 59.98 135.1 P
0 F
1.35 (sim-pr) 154.36 135.1 P
1.35 (o\336le) 179.69 135.1 P
2 F
1.35 (,) 195.7 135.1 P
0 F
1.35 (sim-cache) 201.55 135.1 P
2 F
1.35 (, and) 239.54 135.1 P
0 F
1.35 (sim-out-) 261.98 135.1 P
3.88 (order) 59.98 124.1 P
2 F
3.88 (\051 support te) 81.47 124.1 P
3.88 (xt se) 130.09 124.1 P
3.88 (gment pro\336les for statistical inte) 150.59 124.1 P
3.88 (ger) 282.48 124.1 P
0.27 (counters. The supported counters include an) 59.98 113.1 P
0.27 (y added by users, so) 220.16 113.1 P
1.98 (long as the) 59.98 102.1 P
1.98 (y are correctly \322re) 102.79 102.1 P
1.98 (gistered\323 with the SimpleScalar) 173.81 102.1 P
0.16 (stats package included with the simulator code \050see Section) 59.98 91.1 P
0.16 (4.5\051.) 277.48 91.1 P
(T) 59.98 80.1 T
(o use the counter pro\336les, simply add the command-line \337ag:) 64.75 80.1 T
(-pcstat <stat>) 330.02 714.1 T
(where <stat> is the inte) 390 702.1 T
(ger counter that you) 474.01 702.1 T
(wish to pro\336le by te) 390 692.1 T
(xt address.) 461.86 692.1 T
1.74 (T) 318 680.1 P
1.74 (o generate the statistics for the pro\336le, follo) 322.78 680.1 P
1.74 (w the follo) 491.74 680.1 P
1.74 (wing) 534 680.1 P
(e) 318 669.1 T
(xample:) 321.86 669.1 T
1 8 Q
(sim-profile -pcstat sim_num_insn test-math >&!) 330.02 654.77 T
(test-math.out) 342.31 644.77 T
(objdump -dl test-math >! test-math.dis) 330.02 634.77 T
(textprof.pl test-math.dis test-math.out) 330.02 624.77 T
(sim_num_insn_by_pc) 342.14 614.77 T
2 9 Q
0.6 (W) 318 600.1 P
0.6 (e sho) 325.78 600.1 P
0.6 (w a se) 344.9 600.1 P
0.6 (gment of the te) 368.45 600.1 P
0.6 (xt pro\336le output in Figure) 424.35 600.1 P
0.6 (4. Mak) 522 600.1 P
0.6 (e) 548 600.1 P
0.99 (sure that \322objdump\323 is the v) 318 589.1 P
0.99 (ersion created when compiling the) 424.06 589.1 P
0.43 (binutils. Also, the \336rst line of) 318 578.1 P
1 F
1.03 (textprof.pl) 428.58 578.1 P
2 F
0.43 ( must be changed) 487.98 578.1 P
0.43 (to re\337ect your system\325) 318 567.1 P
0.43 (s path to Perl \050which must be installed on) 399.54 567.1 P
0.52 (your system for you to use this script\051. As an aside, note that \322-) 318 556.1 P
(taddrprof\323 is equi) 318 545.1 T
(v) 381.26 545.1 T
(alent to \322-pcstat sim_num_insn\323.) 385.54 545.1 T
0 11 Q
(4.4  Out-of-order pr) 318 521.77 T
(ocessor timing simulation) 411.9 521.77 T
2 9 Q
0.58 (The most complicated and detailed simulator in the distrib) 330.02 507.11 P
0.58 (u-) 544.5 507.11 P
1.52 (tion, by f) 318 496.11 P
1.52 (ar) 353.7 496.11 P
1.52 (, is) 360.34 496.11 P
0 F
1.52 (sim-outorder) 376.13 496.11 P
2 F
1.52 ( \050the main code \336le for which is) 426.62 496.11 P
1 F
5.71 (sim-outorder.c) 318 485.11 P
2 F
2.38 (\321about 3500 lines long\051. This simulator) 393.6 485.11 P
0.4 (supports out-of-order issue and e) 318 474.11 P
0.4 (x) 437.94 474.11 P
0.4 (ecution, based on the Re) 442.3 474.11 P
0.4 (gister) 532 474.11 P
0.21 (Update Unit [5]. The R) 318 463.11 P
0.21 (UU scheme uses a reorder b) 402.22 463.11 P
0.21 (uf) 504.32 463.11 P
0.21 (fer to auto-) 511.59 463.11 P
3.21 (matically rename re) 318 452.11 P
3.21 (gisters and hold the results of pending) 395.76 452.11 P
2.66 (instructions. Each c) 318 441.11 P
2.66 (ycle the reorder b) 393.92 441.11 P
2.66 (uf) 464.94 441.11 P
2.66 (fer retires completed) 472.21 441.11 P
(instructions in program order to the architected re) 318 430.11 T
(gister \336le.) 496.58 430.11 T
0.44 (The processor\325) 330.02 419.11 P
0.44 (s memory system emplo) 383.7 419.11 P
0.44 (ys a load/store queue.) 472.69 419.11 P
1.01 (Store v) 318 408.11 P
1.01 (alues are placed in the queue if the store is speculati) 344.54 408.11 P
1.01 (v) 541.39 408.11 P
1.01 (e.) 545.75 408.11 P
0.48 (Loads are dispatched to the memory system when the addresses) 318 397.11 P
-0.14 (of all pre) 318 386.11 P
-0.14 (vious stores are kno) 349.99 386.11 P
-0.14 (wn. Loads may be satis\336ed either by) 421.09 386.11 P
1.05 (the memory system or by an earlier store v) 318 375.11 P
1.05 (alue residing in the) 480.12 375.11 P
0.61 (queue, if their addresses match. Speculati) 318 364.11 P
0.61 (v) 470.07 364.11 P
0.61 (e loads may generate) 474.43 364.11 P
0.34 (cache misses, b) 318 353.11 P
0.34 (ut speculati) 374.23 353.11 P
0.34 (v) 415.6 353.11 P
0.34 (e TLB misses stall the pipeline until) 419.96 353.11 P
(the branch condition is kno) 318 342.11 T
(wn.) 415.77 342.11 T
4.64 (W) 330.02 331.11 P
4.64 (e depict the simulated pipeline of) 337.8 331.11 P
0 F
4.64 (sim-outorder) 487.62 331.11 P
2 F
4.64 ( in) 538.11 331.11 P
6.01 (Figure) 318 320.11 P
6.01 (5. The main loop of the simulator) 343.75 320.11 P
6.01 (, located in) 500.23 320.11 P
1 F
(sim_main\050\051) 318 309.11 T
2 F
(, is structured as follo) 372 309.11 T
(ws:) 449.52 309.11 T
4 8 Q
(ruu_init\050\051;) 330.02 294.77 T
(for \050;;\051 {) 330.02 284.77 T
(ruu_commit\050\051;) 338.57 274.77 T
(ruu_writeback\050\051;) 338.57 264.77 T
(lsq_refresh\050\051;) 338.57 254.77 T
(ruu_issue\050\051;) 338.57 244.77 T
(ruu_dispatch\050\051;) 338.57 234.77 T
(ruu_fetch\050\051;) 338.57 224.77 T
(}) 330.02 214.77 T
2 9 Q
3.62 (This loop is e) 330.02 200.1 P
3.62 (x) 389.5 200.1 P
3.62 (ecuted once for each tar) 393.86 200.1 P
3.62 (get \050simulated\051) 494.14 200.1 P
1.54 (machine c) 318 189.1 P
1.54 (ycle. By w) 356.14 189.1 P
1.54 (alking the pipeline in re) 397.88 189.1 P
1.54 (v) 489.3 189.1 P
1.54 (erse, inter) 493.66 189.1 P
1.54 (-stage) 530.51 189.1 P
1.82 (latch synchronization can be handled correctly with only one) 318 178.1 P
1.81 (pass through each stage. When the tar) 318 167.1 P
1.81 (get program terminates) 464.9 167.1 P
4.67 (with an) 318 156.1 P
1 F
11.21 (exit\050\051) 356.34 156.1 P
2 F
4.67 ( system call, the simulator performs a) 388.74 156.1 P
1 F
(longjmp\050\051) 318 145.1 T
2 F
( to) 366.6 145.1 T
1 F
(main\050\051) 378.1 145.1 T
2 F
( to generate the statistics.) 410.5 145.1 T
5.75 (The fetch stage of the pipeline is implemented in) 330.02 134.1 P
1 F
1.58 (ruu_fetch\050\051) 318 123.1 P
2 F
0.66 (. The fetch unit models the machine instruction) 377.4 123.1 P
0.46 (bandwidth, and tak) 318 112.1 P
0.46 (es the follo) 387.58 112.1 P
0.46 (wing inputs: the program counter) 428.27 112.1 P
0.46 (,) 549.75 112.1 P
0.66 (the predictor state, and misprediction detection from the branch) 318 101.1 P
1.3 (e) 318 90.1 P
1.3 (x) 321.86 90.1 P
1.3 (ecution unit\050s\051. Each c) 326.23 90.1 P
1.3 (ycle, it fetches instructions from only) 410.99 90.1 P
0.42 (one I-cache line \050and it blocks on an I-cache miss until the miss) 318 79.1 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(8) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0.53 (completes\051. After fetching the instructions, it places them in the) 59.98 365.88 P
-0.17 (dispatch queue, and probes the line predictor to obtain the correct) 59.98 354.88 P
(cache line to access in the ne) 59.98 343.88 T
(xt c) 163.81 343.88 T
(ycle.) 176.92 343.88 T
1.9 (The code for the dispatch stage of the pipeline resides in) 72 332.88 P
1 F
0.67 (ruu_dispatch\050\051) 59.98 321.88 P
2 F
0.28 (. This routine is where instruction decoding) 135.58 321.88 P
3.24 (and re) 59.98 310.88 P
3.24 (gister renaming is performed. The function uses the) 85.32 310.88 P
0.23 (instructions in the input queue \336lled by the fetch stage, a pointer) 59.98 299.88 P
0.06 (to the acti) 59.98 288.88 P
0.06 (v) 95.36 288.88 P
0.06 (e R) 99.72 288.88 P
0.06 (UU, and the rename table. Once per c) 111.67 288.88 P
0.06 (ycle, the dis-) 247.62 288.88 P
0.03 (patcher tak) 59.98 277.88 P
0.03 (es as man) 99.65 277.88 P
0.03 (y instructions as possible \050up to the dispatch) 134.55 277.88 P
1.52 (width of the tar) 59.98 266.88 P
1.52 (get machine\051 from the fetch queue and places) 119.62 266.88 P
1.32 (them in the scheduler queue. This routine is the one in which) 59.98 255.88 P
0.54 (branch mispredictions are noted. \050When a misprediction occurs,) 59.98 244.88 P
0.76 (the simulator uses speculati) 59.98 233.88 P
0.76 (v) 161.27 233.88 P
0.76 (e state b) 165.63 233.88 P
0.76 (uf) 196.46 233.88 P
0.76 (fers, which are managed) 203.74 233.88 P
1.69 (with a cop) 59.98 222.88 P
1.69 (y-on-write polic) 100.76 222.88 P
1.69 (y\051. The dispatch routine enters and) 160.55 222.88 P
0.49 (links instructions into the R) 59.98 211.88 P
0.49 (UU and the load/store queue \050LSQ\051,) 161.07 211.88 P
0.21 (as well as splitting memory operations into tw) 59.98 200.88 P
0.21 (o separate instruc-) 227.58 200.88 P
-0.14 (tions \050the addition to compute the ef) 59.98 189.88 P
-0.14 (fecti) 189.42 189.88 P
-0.14 (v) 205.18 189.88 P
-0.14 (e address and the mem-) 209.55 189.88 P
(ory operation itself\051.) 59.98 178.88 T
7.25 (The issue stage of the pipeline is contained in) 72 167.88 P
1 F
2.36 (ruu_issue\050\051) 59.98 156.88 P
2 F
0.98 ( and) 119.38 156.88 P
1 F
2.36 (lsq_refresh\050\051) 138.84 156.88 P
2 F
0.98 (. These routines model) 209.04 156.88 P
-0.18 (instruction w) 59.98 145.88 P
-0.18 (ak) 106.95 145.88 P
-0.18 (eup and issue to the functional units, tracking re) 115.36 145.88 P
-0.18 (g-) 286.48 145.88 P
0.65 (ister and memory dependences. Each c) 59.98 134.88 P
0.65 (ycle, the scheduling rou-) 203.05 134.88 P
0.77 (tines locate the instructions for which the re) 59.98 123.88 P
0.77 (gister inputs are all) 222.93 123.88 P
1.37 (ready) 59.98 112.88 P
1.37 (. The issue of ready loads is stalled if there is an earlier) 79.38 112.88 P
2.91 (store with an unresolv) 59.98 101.88 P
2.91 (ed ef) 148.3 101.88 P
2.91 (fecti) 168.73 101.88 P
2.91 (v) 184.49 101.88 P
2.91 (e address in the load/store) 188.86 101.88 P
0.03 (queue. If the address of the earlier store matches that of the w) 59.98 90.88 P
0.03 (ait-) 281.98 90.88 P
0.31 (ing load, the store v) 59.98 79.88 P
0.31 (alue is forw) 132.22 79.88 P
0.31 (arded to the load. Otherwise, the) 175.23 79.88 P
(load is sent to the memory system.) 318 365.88 T
1.08 (The e) 330.02 354.88 P
1.08 (x) 351.21 354.88 P
1.08 (ecute stage is also handled in) 355.57 354.88 P
1 F
2.59 (ruu_issue\050\051) 469.03 354.88 P
2 F
1.08 (. Each) 528.43 354.88 P
1.7 (c) 318 343.88 P
1.7 (ycle, the routine gets as man) 321.86 343.88 P
1.7 (y ready instructions as possible) 432.71 343.88 P
0.28 (from the scheduler queue \050up to the issue width\051. The functional) 318 332.88 P
2.04 (units\325 a) 318 321.88 P
2.04 (v) 346.61 321.88 P
2.04 (ailability is also check) 350.89 321.88 P
2.04 (ed, and if the) 437.17 321.88 P
2.04 (y ha) 490.15 321.88 P
2.04 (v) 507.26 321.88 P
2.04 (e a) 511.63 321.88 P
2.04 (v) 523.73 321.88 P
2.04 (ailable) 528.01 321.88 P
2.55 (access ports, the instructions are issued. Finally) 318 310.88 P
2.55 (, the routine) 503.67 310.88 P
1.44 (schedules writeback e) 318 299.88 P
1.44 (v) 399.64 299.88 P
1.44 (ents using the latenc) 404 299.88 P
1.44 (y of the functional) 481.43 299.88 P
0.16 (units \050memory operations probe the data cache to obtain the cor-) 318 288.88 P
0.24 (rect latenc) 318 277.88 P
0.24 (y of the operation\051. Data TLB misses stall the issue of) 355.34 277.88 P
1.08 (the memory operation, are serviced in the commit stage of the) 318 266.88 P
1.61 (pipeline, and currently assume a \336x) 318 255.88 P
1.61 (ed latenc) 453.91 255.88 P
1.61 (y) 487.62 255.88 P
1.61 (. The functional) 491.54 255.88 P
8.25 (units\325 latencies are hardcoded in the de\336nition of) 318 244.88 P
1 F
(fu_config[]) 318 233.88 T
2 F
( in) 377.4 233.88 T
1 F
(sim-outorder.c) 388.9 233.88 T
2 F
(.) 464.5 233.88 T
1.21 (The writeback stage resides in) 330.02 222.88 P
1 F
2.9 (ruu_writeback\050\051) 447.3 222.88 P
2 F
1.21 (. Each) 528.3 222.88 P
0.23 (c) 318 211.88 P
0.23 (ycle it scans the e) 321.86 211.88 P
0.23 (v) 386.03 211.88 P
0.23 (ent queue for instruction completions. When) 390.39 211.88 P
0.04 (it \336nds a completed instruction, it w) 318 200.88 P
0.04 (alks the dependence chain of) 447.88 200.88 P
-0.03 (instruction outputs to mark instructions that are dependent on the) 318 189.88 P
0.42 (completed instruction. If a dependent instruction is w) 318 178.88 P
0.42 (aiting only) 512.83 178.88 P
1.02 (for that completion, the routine marks it as ready to be issued.) 318 167.88 P
0.5 (The writeback stage also detects branch mispredictions; when it) 318 156.88 P
0.56 (determines that a branch misprediction has occurred, it rolls the) 318 145.88 P
1.16 (state back to the checkpoint, discarding the erroneously issued) 318 134.88 P
(instructions.) 318 123.88 T
1 F
-0.32 (ruu_commit\050\051) 330.02 112.88 P
2 F
-0.13 ( handles the instructions from the writeback) 394.82 112.88 P
0.63 (stage that are ready to commit. This routine does in-order com-) 318 101.88 P
0.39 (mitting of instructions, updating of the data caches \050or memory\051) 318 90.88 P
-0.22 (with store v) 318 79.88 P
-0.22 (alues, and data TLB miss handling. The routine k) 359.84 79.88 P
-0.22 (eeps) 536.01 79.88 P
60.07 596.24 552.65 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 4. Sample output fr) 163.83 602.2 T
(om te) 287.54 602.2 T
(xt segment statistical pr) 314.06 602.2 T
(o\336le) 428.33 602.2 T
1 8 Q
(00401a10:  \050         13,   0.01\051: <strtod+220> addiu $a1[5],$zero[0],1) 162.02 713.81 T
(strtod.c:79) 162.02 703.81 T
(00401a18:  \050         13,   0.01\051: <strtod+228> bc1f 00401a30 <strtod+240>) 162.02 693.81 T
(strtod.c:87) 162.02 683.81 T
(00401a20:                       : <strtod+230> addiu $s1[17],$s1[17],1) 162.02 673.81 T
(00401a28:                       : <strtod+238> j 00401a58 <strtod+268>) 162.02 663.81 T
(strtod.c:89) 162.02 653.81 T
(00401a30:  \050         13,   0.01\051: <strtod+240> mul.d $f2,$f20,$f4) 162.02 643.81 T
(00401a38:  \050         13,   0.01\051: <strtod+248> addiu $v0[2],$v1[3],-48) 162.02 633.81 T
(00401a40:  \050         13,   0.01\051: <strtod+250> mtc1 $v0[2],$f0) 162.02 623.81 T
4 16 Q
({) 143.86 704.14 T
({) 143.86 669 T
({) 143.86 636 T
2 9 Q
(e) 86.43 707.71 T
(x) 90.29 707.71 T
(ecuted) 94.65 707.71 T
(13 times) 86.43 698.71 T
(ne) 86.43 676.14 T
(v) 94.7 676.14 T
(er) 99.07 676.14 T
(e) 86.43 667.14 T
(x) 90.29 667.14 T
(ecuted) 94.65 667.14 T
139.62 707.88 139.37 710 143.29 708.31 139.87 705.76 4 Y
1 H
0 Z
N
139.62 707.88 139.37 710 143.29 708.31 139.87 705.76 4 Y
V
120 705.57 139.13 707.82 2 L
2 Z
N
141.9 646.39 143.89 647.15 143.21 642.93 139.9 645.62 4 Y
0 Z
N
141.9 646.39 143.89 647.15 143.21 642.93 139.9 645.62 4 Y
V
119.29 705.57 141.72 646.85 2 L
2 Z
N
138.88 673.55 138.93 675.68 142.57 673.45 138.82 671.41 4 Y
0 Z
N
138.88 673.55 138.93 675.68 142.57 673.45 138.82 671.41 4 Y
V
115.71 674.14 138.38 673.56 2 L
2 Z
N
60 597.71 552.15 597.71 2 L
0.5 H
N
0 0 612 792 C
59.19 383.83 552.96 570.57 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
151.66 520.08 207.37 550.8 R
4 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
236.17 520.08 296.89 550.8 R
4 X
V
0 X
N
78.57 520.08 122.86 550.8 R
4 X
V
0 X
N
325.69 520.08 367.12 550.8 R
4 X
V
0 X
N
487.57 520.08 536.86 550.8 R
4 X
V
0 X
N
395.92 520.08 458.77 550.8 R
4 X
V
0 X
N
236.17 489.6 296.89 520.31 R
4 X
V
0 X
N
325.69 489.37 367.12 520.08 R
4 X
V
0 X
N
179.64 412.51 272.5 443.22 R
4 X
V
0 X
N
78.57 431 129.29 461.71 R
4 X
V
0 X
N
2 13 Q
(Fetch) 86.27 531 T
(Mem) 332.68 500.29 T
(Ex) 333.51 531 T
(ec) 347.75 531 T
(Scheduler) 240.54 531 T
(Dispatch) 156.41 531 T
(V) 184.76 423.43 T
(irtual memory) 193.36 423.43 T
(I-Cache) 83.36 441.92 T
(Memory) 241.62 508.43 T
(Commit) 490.9 531 T
(Writeback) 400.27 531 T
(scheduler) 241.62 495.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
368.14 431 418.86 461.71 R
4 X
V
0 X
N
(D-TLB) 374.37 441.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
317.43 431 368.14 461.71 R
4 X
V
0 X
N
(D-Cache) 319.69 441.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 0.75 0.75 143.57 535.57 G
144.32 535.57 144.32 538.4 149.21 535.57 144.32 532.74 4 Y
1.5 H
N
144.32 535.57 144.32 538.4 149.21 535.57 144.32 532.74 4 Y
V
125.71 535.57 143.57 535.57 2 L
2 Z
N
90 450 0.75 0.75 228.09 535.57 G
228.84 535.57 228.84 538.4 233.73 535.57 228.84 532.74 4 Y
0 Z
N
228.84 535.57 228.84 538.4 233.73 535.57 228.84 532.74 4 Y
V
210.23 535.57 228.09 535.57 2 L
2 Z
N
90 450 0.75 0.75 317.6 535.57 G
318.35 535.57 318.35 538.4 323.24 535.57 318.35 532.74 4 Y
0 Z
N
318.35 535.57 318.35 538.4 323.24 535.57 318.35 532.74 4 Y
V
299.74 535.57 317.6 535.57 2 L
2 Z
N
90 450 0.75 0.75 387.83 535.57 G
388.58 535.57 388.58 538.4 393.47 535.57 388.58 532.74 4 Y
0 Z
N
388.58 535.57 388.58 538.4 393.47 535.57 388.58 532.74 4 Y
V
369.97 535.57 387.83 535.57 2 L
2 Z
N
90 450 0.75 0.75 479.49 535.57 G
480.23 535.57 480.24 538.4 485.13 535.57 480.24 532.74 4 Y
0 Z
N
480.23 535.57 480.24 538.4 485.13 535.57 480.24 532.74 4 Y
V
461.63 535.57 479.49 535.57 2 L
2 Z
N
90 450 0.75 0.75 270 100.71 559.14 GG
100.71 558.39 103.54 558.39 100.71 553.5 97.89 558.39 4 Y
0 Z
N
100.71 558.39 103.54 558.39 100.71 553.5 97.89 558.39 4 Y
V
100.71 566.29 100.71 559.14 2 L
2 Z
N
90 450 0.75 0.75 205.3 280.03 429.34 GG
279.35 429.02 280.56 426.46 274.93 426.92 278.15 431.57 4 Y
0 Z
N
279.35 429.02 280.56 426.46 274.93 426.92 278.15 431.57 4 Y
V
315.29 446 280.03 429.34 2 L
2 Z
N
90 450 0.75 0.75 338.48 170.5 430.33 GG
171.2 430.06 172.23 432.69 175.75 428.26 170.16 427.43 4 Y
0 Z
N
171.2 430.06 172.23 432.69 175.75 428.26 170.16 427.43 4 Y
V
131.14 445.86 170.5 430.33 2 L
2 Z
N
90 450 0.75 0.75 332.65 385.8 466.71 GG
386.46 466.36 387.76 468.87 390.81 464.12 385.17 463.85 4 Y
0 Z
N
386.46 466.36 387.76 468.87 390.81 464.12 385.17 463.85 4 Y
V
346.29 487.14 385.8 466.71 2 L
2 Z
N
90 450 0.75 0.75 270 346.4 472 GG
346.4 471.25 349.23 471.25 346.4 466.36 343.58 471.25 4 Y
0 Z
N
346.4 471.25 349.23 471.25 346.4 466.36 343.58 471.25 4 Y
V
346.4 487 346.4 472 2 L
2 Z
N
90 450 0.75 0.75 270 100.71 473.43 GG
100.71 472.68 103.54 472.68 100.71 467.78 97.89 472.68 4 Y
0 Z
N
100.71 472.68 103.54 472.68 100.71 467.78 97.89 472.68 4 Y
V
100.71 516.29 100.71 473.43 2 L
2 Z
N
427.34 566.29 427.34 552 2 L
N
427.34 566.29 100.71 566.29 2 L
N
6 10 Q
(Figure 5. Pipeline f) 224.59 391.63 T
(or sim-outor) 313.31 391.63 T
(der) 372 391.63 T
60 386.28 552.15 386.28 2 L
0.5 H
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(9) 303.48 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
1.61 (retiring instructions at the head of the R) 59.29 713.86 P
1.61 (UU that are ready to) 213.42 713.86 P
0.51 (commit until the head instruction is one that is not ready) 59.29 702.86 P
0.51 (. When) 266.83 702.86 P
1.38 (an instruction is committed, its result is placed into the archi-) 59.29 691.86 P
0.78 (tected re) 59.29 680.86 P
0.78 (gister \336le, and the R) 90.66 680.86 P
0.78 (UU/LSQ resources de) 166.15 680.86 P
0.78 (v) 246.96 680.86 P
0.78 (oted to that) 251.28 680.86 P
(instruction are reclaimed.) 59.29 669.86 T
0 F
0.72 (sim-outorder) 71.31 658.86 P
2 F
0.72 ( runs about an order of magnitude slo) 121.8 658.86 P
0.72 (wer than) 261.37 658.86 P
0 F
0.61 (sim-fast) 59.29 647.86 P
2 F
0.61 (. In addition to the ar) 89.78 647.86 P
0.61 (guments listed at the be) 168.16 647.86 P
0.61 (ginning of) 255.47 647.86 P
0.33 (Section) 59.29 636.86 P
0.33 (4,) 88.54 636.86 P
0 F
0.33 (sim-outorder) 97.86 636.86 P
2 F
0.33 ( uses the follo) 148.35 636.86 P
0.33 (wing command-line ar) 199.36 636.86 P
0.33 (gu-) 281.34 636.86 P
(ments:) 59.29 625.86 T
0 F
(Specifying the pr) 59.29 610.86 T
(ocessor cor) 124.63 610.86 T
(e) 167.2 610.86 T
2 F
(-fetch:ifqsize <size>) 71.31 597.86 T
(set the fetch width to be <size> instructions.) 131.29 585.86 T
(Must be a po) 131.29 575.86 T
(wer of tw) 177.81 575.86 T
(o. The def) 212.21 575.86 T
(ault is 4.) 248.85 575.86 T
(-fetch:speed <ratio>) 71.31 563.86 T
-0.11 (set the ratio of the front end speed relati) 131.29 551.86 P
-0.11 (v) 273.68 551.86 P
-0.11 (e to) 278.05 551.86 P
-0.41 (the e) 131.29 541.86 P
-0.41 (x) 147.99 541.86 P
-0.41 (ecution core \050allo) 152.35 541.86 P
-0.41 (wing <ratio> times as) 214.3 541.86 P
(man) 131.29 531.86 T
(y instructions to be fetched as decoded) 146.65 531.86 T
(per c) 131.29 521.86 T
(ycle\051.) 148.89 521.86 T
(-fetch:mplat <c) 71.31 509.86 T
(ycles>) 126.49 509.86 T
(set the branch misprediction latenc) 131.29 497.86 T
(y) 256.63 497.86 T
(. The) 260.54 497.86 T
(def) 131.29 487.86 T
(ault is 3 c) 142.69 487.86 T
(ycles.) 177.3 487.86 T
(-decode:width <insts>) 71.31 475.86 T
(set the decode width to be <insts>, which) 131.29 463.86 T
(must be a po) 131.29 453.86 T
(wer of tw) 176.81 453.86 T
(o. The def) 211.21 453.86 T
(ault is 4.) 247.85 453.86 T
(-issue:width <insts>) 71.31 441.86 T
(set the maximum issue width in a gi) 131.29 429.86 T
(v) 260.81 429.86 T
(en) 265.18 429.86 T
-0.29 (c) 131.29 419.86 P
-0.29 (ycle. Must be a po) 135.15 419.86 P
-0.29 (wer of tw) 200.01 419.86 P
-0.29 (o. The def) 233.83 419.86 P
-0.29 (ault is) 269.91 419.86 P
(4.) 131.29 409.86 T
(-issue:inorder) 71.31 397.86 T
-0.21 (force the simulator to use in-order issue. The) 131.29 397.86 P
(def) 131.29 387.86 T
(ault is f) 142.69 387.86 T
(alse.) 169.6 387.86 T
(-issue:wrongpath) 71.31 375.86 T
(allo) 131.29 363.86 T
(w instructions to issue after a misspecu-) 144.56 363.86 T
(lation. The def) 131.29 353.86 T
(ault is true.) 183.94 353.86 T
(-ruu:size <insts>) 71.31 341.86 T
(capacity of the R) 131.29 329.86 T
(UU \050in instructions\051. The) 192.16 329.86 T
(def) 131.29 319.86 T
(ault is 16.) 142.69 319.86 T
(-lsq:size <insts>) 71.31 307.86 T
(capacity of the load/store queue \050in instruc-) 131.29 295.86 T
(tions\051. The def) 131.29 285.86 T
(ault is 8.) 183.94 285.86 T
(-res:ialu <num>) 71.31 273.86 T
-0.38 (specify number of inte) 131.29 261.86 P
-0.38 (ger ALUs. The def) 211.23 261.86 P
-0.38 (ault) 277.97 261.86 P
(is 4.) 131.29 251.86 T
(-res:imult <num>) 71.31 239.86 T
(specify number of inte) 131.29 227.86 T
(ger multipliers/di) 212.38 227.86 T
(vid-) 274.41 227.86 T
(ers. The def) 131.29 217.86 T
(ault is 1.) 173.93 217.86 T
(-res:memports <num>) 71.31 205.86 T
(specify number of L1 cache ports. The) 131.29 193.86 T
(def) 131.29 183.86 T
(ault is 2.) 142.69 183.86 T
(-res:fpalu <num>) 71.31 171.86 T
(specify number of \337oating point ALUs. The) 131.29 159.86 T
(def) 131.29 149.86 T
(ault is 4.) 142.69 149.86 T
(-res: fpmult <num>) 71.31 137.86 T
(specify number of \337oating point multipliers/) 131.29 125.86 T
(di) 131.29 115.86 T
(viders. The def) 138.06 115.86 T
(ault is 1.) 192.21 115.86 T
0 F
(Specifying the memory hierar) 59.29 101.86 T
(ch) 173.86 101.86 T
(y) 182.72 101.86 T
2 F
1.33 (All of the cache ar) 71.31 88.86 P
1.33 (guments and formats used in) 142.95 88.86 P
0 F
1.33 (sim-cache) 255.35 88.86 P
2 F
0.37 (\050listed at the be) 59.29 77.86 P
0.37 (ginning of Section) 115.51 77.86 P
0.37 (4.2\051 are also used in) 185 77.86 P
0 F
0.37 (sim-out-) 261.34 77.86 P
(order) 317.38 713.86 T
2 F
(, with the follo) 338.51 713.86 T
(wing additions:) 391.29 713.86 T
(-cache:dl1lat <c) 329.41 700.86 T
(ycles>) 387.08 700.86 T
(specify the hit latenc) 389.38 688.86 T
(y of the L1 data cache.) 463.98 688.86 T
(The def) 389.38 678.86 T
(ault is 1 c) 417.03 678.86 T
(ycle.) 451.64 678.86 T
(-cache:d12lat <c) 329.41 666.86 T
(ycles>) 389.08 666.86 T
(specify the hit latenc) 389.38 654.86 T
(y of the L2 data cache.) 463.98 654.86 T
(The def) 389.38 644.86 T
(ault is 6 c) 417.03 644.86 T
(ycles.) 451.64 644.86 T
(-cache:il1lat <c) 329.41 632.86 T
(ycles>) 385.08 632.86 T
(specify the hit latenc) 389.38 620.86 T
(y of the L1 instruction) 463.98 620.86 T
(cache. The def) 389.38 610.86 T
(ault is 1 c) 442.01 610.86 T
(ycle.) 476.63 610.86 T
(-cache:il2lat <c) 329.41 598.86 T
(ycles>) 385.08 598.86 T
(specify the hit latenc) 389.38 586.86 T
(y of the L2 instruction) 463.98 586.86 T
(cache. The def) 389.38 576.86 T
(ault is 6 c) 442.01 576.86 T
(ycles.) 476.63 576.86 T
(-mem:lat <1st> <ne) 329.41 564.86 T
(xt>) 400.5 564.86 T
(specify main memory access latenc) 389.38 552.86 T
(y \050\336rst,) 516.71 552.86 T
-0.13 (rest\051. The def) 389.38 542.86 P
-0.13 (aults are 18 c) 437.26 542.86 P
-0.13 (ycles and 2 c) 484.47 542.86 P
-0.13 (ycles.) 530.69 542.86 P
(-mem:width <bytes>) 329.41 530.86 T
(specify width of memory b) 389.38 518.86 T
(us in bytes. The) 486.69 518.86 T
(def) 389.38 508.86 T
(ault is 8 bytes.) 400.79 508.86 T
(-tlb:lat <c) 329.41 496.86 T
(ycles>) 364.6 496.86 T
(specify latenc) 389.38 484.86 T
(y \050in c) 438.98 484.86 T
(ycles\051 to service a TLB) 461.84 484.86 T
(miss. The def) 389.38 474.86 T
(ault is 30 c) 438.04 474.86 T
(ycles.) 477.15 474.86 T
0 F
(Specifying the branch pr) 317.38 460.86 T
(edictor) 412.48 460.86 T
2 F
0.35 (Branch prediction is speci\336ed by choosing the follo) 329.41 447.86 P
0.35 (wing \337ag) 517.34 447.86 P
0.12 (with one of the six subsequent ar) 317.38 436.86 P
0.12 (guments. The def) 436.43 436.86 P
0.12 (ault is a bimo-) 499.32 436.86 P
(dal predictor with 2048 entries.) 317.38 425.86 T
(-bpred <type>) 329.41 412.86 T
3 F
(nottak) 329.41 400.86 T
(en) 351.82 400.86 T
2 F
(al) 389.38 400.86 T
(w) 395.79 400.86 T
(ays predict not tak) 402.2 400.86 T
(en.) 468.35 400.86 T
3 F
(tak) 329.41 388.86 T
(en) 340.31 388.86 T
2 F
(al) 389.38 388.86 T
(w) 395.79 388.86 T
(ays predict tak) 402.2 388.86 T
(en.) 454.6 388.86 T
3 F
(perfect) 329.41 376.86 T
2 F
(perfect predictor) 389.38 376.86 T
(.) 448.61 376.86 T
3 F
(bimod) 329.41 364.86 T
2 F
3.72 (bimodal predictor) 389.38 364.86 P
3.72 (, using a branch tar) 456.98 364.86 P
3.72 (get) 540.43 364.86 P
(b) 389.38 354.86 T
(uf) 393.7 354.86 T
(fer \050BTB\051 with 2-bit counters.) 400.97 354.86 T
3 F
(2le) 329.41 342.86 T
(v) 340.27 342.86 T
2 F
(2-le) 389.38 342.86 T
(v) 403.15 342.86 T
(el adapti) 407.52 342.86 T
(v) 438.04 342.86 T
(e predictor) 442.4 342.86 T
(.) 480.64 342.86 T
3 F
(comb) 329.41 330.86 T
2 F
3.73 (combined predictor \050bimodal and 2-le) 389.38 330.86 P
3.73 (v) 540.57 330.86 P
3.73 (el) 544.93 330.86 P
(adapti) 389.38 320.86 T
(v) 411.15 320.86 T
(e\051.) 415.52 320.86 T
(The predictor) 317.38 306.86 T
(-speci\336c ar) 365.94 306.86 T
(guments are listed belo) 405.51 306.86 T
(w:) 488.53 306.86 T
(-bpred:bimod <size>) 329.41 293.86 T
(set the bimodal predictor table size to be) 389.38 281.86 T
(<size> entries.) 389.38 271.86 T
(-bpred:2le) 329.41 259.86 T
(v <l1size> <l2size> <hist_size> <xor>) 366.17 259.86 T
(specify the 2-le) 389.38 247.86 T
(v) 444.64 247.86 T
(el adapti) 449.01 247.86 T
(v) 479.53 247.86 T
(e predictor) 483.89 247.86 T
(.) 522.13 247.86 T
(<l1size> speci\336es the number of entries in) 389.38 237.86 T
(the \336rst-le) 389.38 227.86 T
(v) 425.9 227.86 T
(el table, <l2size> speci\336es the) 430.27 227.86 T
(number of entries in the second-le) 389.38 217.86 T
(v) 511.88 217.86 T
(el table,) 516.25 217.86 T
(<hist_size> speci\336es the history width, and) 389.38 207.86 T
(<xor> allo) 389.38 197.86 T
(ws you to xor the history and the) 427.06 197.86 T
(address in the second le) 389.38 187.86 T
(v) 474.64 187.86 T
(el of the predictor) 479 187.86 T
(.) 542.74 187.86 T
(This or) 389.38 177.86 T
(g) 414.97 177.86 T
(anization is depicted in Figure) 419.42 177.86 T
(6. In) 530.66 177.86 T
(T) 389.38 167.86 T
(able) 394.16 167.86 T
(2 we sho) 411.4 167.86 T
(w ho) 443.17 167.86 T
(w these parameters cor-) 460.7 167.86 T
(respond to modern prediction schemes. The) 389.38 157.86 T
-0.26 (def) 389.38 147.86 P
-0.26 (ault settings for the four parameters are 1,) 400.79 147.86 P
(1024, 8, and 0, respecti) 389.38 137.86 T
(v) 472.89 137.86 T
(ely) 477.26 137.86 T
(.) 487.67 137.86 T
(-bpred:comb <size>) 329.41 125.86 T
(set the meta-table size of the combined pre-) 389.38 113.86 T
(dictor to be <size> entries. The def) 389.38 103.86 T
(ault is) 515.17 103.86 T
(1024.) 389.38 93.86 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(10) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(pr) 76.74 548.47 T
(edictor) 86.56 548.47 T
(l1_size) 128.98 548.47 T
(hist_size) 170.09 548.47 T
(l2_size) 219.98 548.47 T
(xor) 262.42 548.47 T
2 F
(GAg) 76.64 532.47 T
(1) 141.84 532.47 T
(W) 184.24 532.47 T
(2) 225.84 529.81 T
2 8 Q
(W) 230.84 533.81 T
2 10 Q
(0) 268.32 532.47 T
(GAp) 76.64 515.81 T
(1) 141.84 515.81 T
(W) 184.24 515.81 T
(>2) 220.08 513.14 T
2 8 Q
(W) 230.72 517.14 T
2 10 Q
(0) 268.32 515.81 T
(P) 76.64 499.14 T
(Ag) 81.28 499.14 T
(N) 139.62 499.14 T
(W) 184.24 499.14 T
(2) 225.84 496.48 T
2 8 Q
(W) 230.84 500.48 T
2 10 Q
(0) 268.32 499.14 T
(P) 76.64 482.48 T
(Ap) 81.28 482.48 T
(N) 139.62 482.48 T
(W) 184.24 482.48 T
(2) 225.84 479.81 T
2 8 Q
(N+W) 230.84 483.81 T
2 10 Q
(0) 268.32 482.48 T
(gshare) 76.64 465.81 T
(1) 141.84 465.81 T
(W) 184.24 465.81 T
(2) 225.84 463.14 T
2 8 Q
(W) 230.84 467.14 T
2 10 Q
(1) 268.32 465.81 T
6 F
(T) 88.8 446.14 T
(ab) 94.11 446.14 T
(le 2: Branc) 105.68 446.14 T
(h predictor parameter) 156.71 446.14 T
(s) 259.92 446.14 T
70.64 559.77 70.64 459.18 2 L
V
0.75 H
0 Z
N
121.39 559.77 121.39 459.18 2 L
V
0.5 H
N
123.89 559.77 123.89 459.18 2 L
V
N
163.64 560.52 163.64 458.43 2 L
V
0.75 H
N
212.64 560.52 212.64 458.43 2 L
V
N
255.64 560.52 255.64 458.43 2 L
V
N
283.64 559.77 283.64 459.18 2 L
V
N
70.27 560.14 284.02 560.14 2 L
V
N
71.02 543.39 283.27 543.39 2 L
V
0.5 H
N
71.02 540.89 283.27 540.89 2 L
V
N
70.27 525.47 284.02 525.47 2 L
V
0.75 H
N
70.27 508.81 284.02 508.81 2 L
V
N
70.27 492.14 284.02 492.14 2 L
V
N
70.27 475.48 284.02 475.48 2 L
V
N
70.27 458.81 284.02 458.81 2 L
V
N
2 9 Q
(-bpred:ras <size>) 72.17 422.28 T
(set the return stack size to <size> \0500 entries) 132.14 410.28 T
(means to return stack\051. The def) 132.14 400.28 T
(ault is 8.) 244.02 400.28 T
(entries.) 132.14 390.28 T
(-bpred:btb <sets> <assoc>) 72.17 378.28 T
-0.31 (con\336gure the BTB to ha) 132.14 366.28 P
-0.31 (v) 217.72 366.28 P
-0.31 (e <sets> sets and an) 222.09 366.28 P
(associati) 132.14 356.28 T
(vity of <assoc>. The def) 162.91 356.28 T
(aults are) 250.71 356.28 T
(512 sets and an associati) 132.14 346.28 T
(vity of 4.) 220.41 346.28 T
(-bpred:spec_update <stage>) 72.17 334.28 T
(allo) 132.14 322.28 T
(w speculati) 145.42 322.28 T
(v) 185.94 322.28 T
(e updates of the branch pre-) 190.3 322.28 T
(dictor in the decode or writeback stages) 132.14 312.28 T
(\050<stage> = [ID|WB]\051. The def) 132.14 302.28 T
(ault is non-) 240.3 302.28 T
(speculati) 132.14 292.28 T
(v) 163.91 292.28 T
(e updates in the commit stage.) 168.28 292.28 T
0 F
(V) 60.14 278.28 T
(isualization) 66.31 278.28 T
2 F
(-pcstat <stat>) 72.17 265.28 T
(record statistic <stat> by te) 132.14 253.28 T
(xt address;) 229.65 253.28 T
(described in Section) 132.14 243.28 T
(4.3.) 207.38 243.28 T
(-ptrace <\336le> <range>) 72.17 231.28 T
(pipeline tracing, described in Section) 132.14 219.28 T
(5.) 268.12 219.28 T
0 11 Q
(4.5  Simulator code \336le descriptions) 60.14 196.95 T
2 9 Q
1.14 (The follo) 72.17 182.28 P
1.14 (wing list describes the functionality of the C code) 106.33 182.28 P
0.42 (\336les in the) 60.14 171.28 P
1 F
1.01 (simplesim-2.0/) 101.16 171.28 P
2 F
0.42 ( directory) 176.76 171.28 P
0.42 (, which are used by all) 211.34 171.28 P
(of the simulators.) 60.14 160.28 T
(\245) 60.14 147.28 T
1 F
3.44 (bitmap.h) 78.14 147.28 P
2 F
1.43 (: Contains support macros for performing bit-) 121.34 147.28 P
(map manipulation.) 78.14 136.28 T
(\245) 60.14 123.28 T
1 F
5.16 (bpred.[c,h]) 78.14 123.28 P
2 F
2.15 (: Handles the creation, functionality) 137.54 123.28 P
2.15 (, and) 274.79 123.28 P
3.69 (updates of the branch predictors.) 78.14 112.28 P
1 F
8.86 (bpred_create\050\051) 216.58 112.28 P
2 F
3.69 (,) 292.18 112.28 P
1 F
1.84 (bpred_lookup\050\051) 78.14 101.28 P
2 F
0.77 (, and) 153.74 101.28 P
1 F
1.84 (bpred_update\050\051) 175.02 101.28 P
2 F
0.77 ( are the k) 250.62 101.28 P
0.77 (e) 286.07 101.28 P
0.77 (y) 289.93 101.28 P
(interf) 78.14 90.28 T
(ace functions.) 97.55 90.28 T
(\245) 60.14 77.28 T
1 F
8.23 (cache.[c,h]) 78.14 77.28 P
2 F
3.43 (: Contains general functions to support) 137.54 77.28 P
3.37 (multiple cache types \050e.g., TLBs, instruction and data) 335.43 713.57 P
0.38 (caches\051. Uses a link) 335.43 702.57 P
0.38 (ed-list for tag comparisons in caches of) 407.96 702.57 P
1.6 (lo) 335.43 691.57 P
1.6 (w associati) 342.21 691.57 P
1.6 (vity \050less than or equal to four\051, and a hash) 383.33 691.57 P
(table for tag comparisons in higher) 335.43 680.57 T
(-associati) 460.98 680.57 T
(vity caches.) 494.75 680.57 T
(The important interf) 335.43 669.57 T
(aces are) 408.33 669.57 T
1 F
(cache_create\050\051) 439.31 669.57 T
2 F
(,) 514.91 669.57 T
1 F
(cache_access\050\051) 335.43 658.57 T
2 F
(,) 411.03 658.57 T
1 F
(cache_probe\050\051) 415.53 658.57 T
2 F
(,) 485.73 658.57 T
1 F
(cache_flush\050\051) 335.43 647.57 T
2 F
(, and) 405.63 647.57 T
1 F
(cache_flush_addr\050\051) 425.38 647.57 T
2 F
(.) 522.58 647.57 T
(\245) 317.43 634.57 T
1 F
1.51 (dlite.[c,h]) 335.43 634.57 P
2 F
0.63 (: Contains the code for DLite!, the source-) 394.83 634.57 P
(le) 335.43 623.57 T
(v) 341.7 623.57 T
(el tar) 346.07 623.57 T
(get program deb) 364.15 623.57 T
(ugger) 422.95 623.57 T
(.) 442.95 623.57 T
(\245) 317.43 610.57 T
1 F
1.02 (endian.[c,h]) 335.43 610.57 P
2 F
0.43 (: De\336nes a fe) 400.23 610.57 P
0.43 (w simple functions to deter-) 449.02 610.57 P
(mine byte- and w) 335.43 599.57 T
(ord-order on the host and tar) 398.08 599.57 T
(get platforms.) 500.64 599.57 T
(\245) 317.43 586.57 T
1 F
0.06 (eval.[c,h]) 335.43 586.57 P
2 F
0.02 (: Contains code to e) 389.43 586.57 P
0.02 (v) 460.8 586.57 P
0.02 (aluate e) 465.07 586.57 P
0.02 (xpressions, used) 492.7 586.57 P
(in DLite!.) 335.43 575.57 T
(\245) 317.43 562.57 T
1 F
1.8 (eventq.[c,h]) 335.43 562.57 P
2 F
0.75 (: De\336nes functions and macros to handle) 400.23 562.57 P
1.46 (ordered e) 335.43 551.57 P
1.46 (v) 370.4 551.57 P
1.46 (ent queues \050used for ordering writebacks\051. The) 374.76 551.57 P
1.11 (important interf) 335.43 540.57 P
1.11 (ace functions are) 393.2 540.57 P
1 F
2.67 (eventq_queue\050\051) 459.76 540.57 P
2 F
1.11 ( and) 535.36 540.57 P
1 F
(eventq_service_events\050\051) 335.43 529.57 T
2 F
(.) 459.63 529.57 T
(\245) 317.43 516.57 T
1 F
2.4 (loader.[c,h]) 335.43 516.57 P
2 F
1 (: Loads the tar) 400.23 516.57 P
1 (get program into memory) 454.81 516.57 P
1 (,) 549.47 516.57 P
0.87 (sets up the se) 335.43 505.57 P
0.87 (gment sizes and addresses, sets up the initial) 385.65 505.57 P
0.92 (call stack, and obtains the tar) 335.43 494.57 P
0.92 (get program entry point. The) 444.32 494.57 P
(interf) 335.43 483.57 T
(ace is) 354.83 483.57 T
1 F
(ld_load_prog\050\051) 377.33 483.57 T
2 F
(.) 452.92 483.57 T
(\245) 317.43 470.57 T
1 F
(main.c) 335.43 470.57 T
2 F
(: Performs all initialization and launches the main) 367.83 470.57 T
(simulator function. The k) 335.43 459.57 T
(e) 426.83 459.57 T
(y functions are) 430.7 459.57 T
1 F
(sim_options\050\051) 335.43 448.57 T
2 F
(,) 405.63 448.57 T
1 F
(sim_config\050\051) 410.13 448.57 T
2 F
(,) 474.93 448.57 T
1 F
(sim_main\050\051) 479.43 448.57 T
2 F
(,) 533.43 448.57 T
(and) 335.43 437.57 T
1 F
(sim_stats\050\051) 350.68 437.57 T
2 F
(.) 410.08 437.57 T
(\245) 317.43 424.57 T
1 F
7.2 (memory.[c,h]) 335.43 424.57 P
2 F
3 (: Contains functions for reading from,) 400.23 424.57 P
0.28 (writing to, initializing, and dumping the contents of the tar-) 335.43 413.57 P
1.17 (get main memory) 335.43 402.57 P
1.17 (. Memory is implemented as a lar) 400.69 402.57 P
1.17 (ge \337at) 528.3 402.57 P
3.23 (space, each portion of which is allocated on demand.) 335.43 391.57 P
1 F
(mem_access\050\051) 335.43 380.57 T
2 F
( is the important interf) 400.23 380.57 T
(ace function.) 480.64 380.57 T
(\245) 317.43 367.57 T
1 F
(misc.[c,h]) 335.43 367.57 T
2 F
(: Contains numerous useful support func-) 389.43 367.57 T
(tions, such as) 335.43 356.57 T
1 F
(fatal\050\051) 385.93 356.57 T
2 F
(,) 423.73 356.57 T
1 F
(panic\050\051) 428.23 356.57 T
2 F
(,) 466.03 356.57 T
1 F
(warn\050\051) 470.53 356.57 T
2 F
(,) 502.93 356.57 T
1 F
(info\050\051) 507.43 356.57 T
2 F
(,) 539.83 356.57 T
1 F
(debug\050\051) 335.43 345.57 T
2 F
(,) 373.23 345.57 T
1 F
(getcore\050\051) 377.73 345.57 T
2 F
(, and) 426.33 345.57 T
1 F
(elapsed_time\050\051) 446.08 345.57 T
2 F
(.) 521.68 345.57 T
(\245) 317.43 332.57 T
1 F
10.25 (options.[c,h]) 335.43 332.57 P
2 F
4.27 (: Contains the SimpleScalar options) 405.63 332.57 P
2.37 (package code, used to process command-line ar) 335.43 321.57 P
2.37 (guments) 521.22 321.57 P
1.26 (and/or option speci\336cations from con\336g \336les. Options are) 335.43 310.57 P
0.5 (re) 335.43 299.57 P
0.5 (gistered with an option database \050see the functions called) 342.29 299.57 P
1 F
4.54 (opt_reg_*\050\051) 335.43 288.57 P
2 F
1.89 (\051.) 394.83 288.57 P
1 F
4.54 (opt_print_help) 404.22 288.57 P
2 F
1.89 (\050\051 generates a help) 479.82 288.57 P
1.54 (listing, and) 335.43 277.57 P
1 F
3.69 (opt_print_options\050\051) 380.76 277.57 P
2 F
1.54 ( prints the current) 483.36 277.57 P
(options\325 state.) 335.43 266.57 T
(\245) 317.43 253.57 T
1 F
5.4 (ptrace.[c,h]) 335.43 253.57 P
2 F
2.25 (: Contains code to collect and produce) 400.23 253.57 P
(pipeline traces from) 335.43 242.57 T
0 F
(sim-outorder) 409.66 242.57 T
2 F
(.) 459.66 242.57 T
(\245) 317.43 229.57 T
1 F
1.77 (range.[c,h]) 335.43 229.57 P
2 F
0.74 (: Holds code that interprets program range) 394.83 229.57 P
(commands used in DLite!.) 335.43 218.57 T
(\245) 317.43 205.57 T
1 F
1.77 (regs.[c,h]) 335.43 205.57 P
2 F
0.74 (: Contains functions to initialize the re) 389.43 205.57 P
0.74 (gister) 531.72 205.57 P
(\336les and dump their contents.) 335.43 194.57 T
(\245) 317.43 181.57 T
1 F
3.1 (resource.[c,h]) 335.43 181.57 P
2 F
1.29 (: Contains code to manage functional) 411.03 181.57 P
1.57 (unit resources, di) 335.43 170.57 P
1.57 (vided up into classes. The three de\336ned) 400.08 170.57 P
4.82 (functions create the resource pools and b) 335.43 159.57 P
4.82 (usy tables) 511.15 159.57 P
-0.12 (\050) 335.43 148.57 P
1 F
-0.28 (res_create_pool\050\051) 338.43 148.57 P
2 F
-0.12 (\051, return a resource from the spec-) 430.23 148.57 P
1.42 (i\336ed pool if a) 335.43 137.57 P
1.42 (v) 387.76 137.57 P
1.42 (ailable \050) 392.04 137.57 P
1 F
3.41 (reg_get\050\051) 422.7 137.57 P
2 F
1.42 (\051, and dump the con-) 471.3 137.57 P
(tents of a pool \050) 335.43 126.57 T
1 F
(res_dump\050\051) 391.92 126.57 T
2 F
(\051.) 445.92 126.57 T
(\245) 317.43 113.57 T
1 F
4.86 (sim.h) 335.43 113.57 P
2 F
2.02 (: Contains a fe) 362.43 113.57 P
2.02 (w e) 420.52 113.57 P
2.02 (xtern v) 435.15 113.57 P
2.02 (ariable declarations and) 462.2 113.57 P
(function prototypes.) 335.43 102.57 T
(\245) 317.43 89.57 T
1 F
-0.04 (stats.[c,h]) 335.43 89.57 P
2 F
-0.02 (: Contains routines to handle statistics mea-) 394.83 89.57 P
1.05 (suring tar) 335.43 78.57 P
1.05 (get program beha) 370.56 78.57 P
1.05 (vior) 435.47 78.57 P
1.05 (. As with the options pack-) 449.47 78.57 P
61.69 572.4 292.6 719.86 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 6. 2-le) 71.27 578.31 T
(vel adaptive predictor structure) 132.81 578.31 T
2 9 Q
(branch) 65.72 672.12 T
(address) 65.72 663.12 T
(hist_size) 124.29 600.69 T
(l1size) 0 -90 157.86 657.4 TF
(l2size) 0 -90 222.24 657.4 TF
(branch) 254.29 672.12 T
(prediction) 254.29 663.12 T
2 11 Q
(pattern) 125 699.26 T
(history) 125 690.26 T
(2-bit) 185.72 699.26 T
(predictors) 185.72 690.26 T
133.27 612.83 133.27 610.7 129.57 612.83 133.27 614.97 4 Y
1 H
0 Z
N
133.27 612.83 133.27 610.7 129.57 612.83 133.27 614.97 4 Y
V
145.31 612.83 145.31 614.97 149 612.83 145.31 610.7 4 Y
N
145.31 612.83 145.31 614.97 149 612.83 145.31 610.7 4 Y
V
133.77 612.83 144.81 612.83 2 L
N
127.86 618.55 149.29 683.55 R
3 X
V
0 X
N
191.57 618.55 213 683.55 R
3 X
V
0 X
N
114.02 671.83 114.02 673.97 117.72 671.83 114.02 669.7 4 Y
N
114.02 671.83 114.02 673.97 117.72 671.83 114.02 669.7 4 Y
V
93.57 671.83 113.52 671.83 2 L
2 Z
N
154.43 623.24 156.57 623.24 154.43 619.54 152.3 623.24 4 Y
0 Z
N
154.43 623.24 156.57 623.24 154.43 619.54 152.3 623.24 4 Y
V
154.43 678.71 152.3 678.71 154.43 682.41 156.57 678.71 4 Y
N
154.43 678.71 152.3 678.71 154.43 682.41 156.57 678.71 4 Y
V
154.43 623.74 154.43 678.21 2 L
N
218.15 623.24 220.28 623.24 218.15 619.54 216.01 623.24 4 Y
N
218.15 623.24 220.28 623.24 218.15 619.54 216.01 623.24 4 Y
V
218.15 678.71 216.01 678.71 218.15 682.41 220.28 678.71 4 Y
N
218.15 678.71 216.01 678.71 218.15 682.41 220.28 678.71 4 Y
V
218.15 623.74 218.15 678.21 2 L
N
245.59 672.4 245.59 674.54 249.29 672.4 245.59 670.27 4 Y
N
245.59 672.4 245.59 674.54 249.29 672.4 245.59 670.27 4 Y
V
225.15 672.4 245.09 672.4 2 L
2 Z
N
180.74 672.26 180.74 674.4 184.43 672.26 180.74 670.13 4 Y
0 Z
N
180.74 672.26 180.74 674.4 184.43 672.26 180.74 670.13 4 Y
V
160.29 672.26 180.24 672.26 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
61.43 574.86 292.14 574.86 2 L
0.5 H
N
0 0 612 792 C
62.29 441.14 293 441.14 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(11) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
2.74 (age, counters are \322re) 77.98 713.74 P
2.74 (gistered\323 by type with an internal) 160.03 713.74 P
1.27 (database. The) 77.98 702.74 P
1 F
3.06 (stat_reg_*\050\051) 132.26 702.74 P
2 F
1.27 ( routines re) 197.06 702.74 P
1.27 (gister counters) 239.96 702.74 P
0.09 (of v) 77.98 691.74 P
0.09 (arious types, and) 92.08 691.74 P
1 F
0.2 (stat_reg_formula\050\051) 155.33 691.74 P
2 F
0.09 ( allo) 252.53 691.74 P
0.09 (ws you) 268.14 691.74 P
4.34 (to re) 77.98 680.74 P
4.34 (gister e) 98.43 680.74 P
4.34 (xpressions constructed of other statistics.) 128.88 680.74 P
1 F
7.01 (stat_print_stats\050\051) 77.98 669.74 P
2 F
2.92 ( prints all re) 175.18 669.74 P
2.92 (gistered statistics.) 227.05 669.74 P
-0.15 (The statistics package also has f) 77.98 658.74 P
-0.15 (acilities to measure distrib) 192.37 658.74 P
-0.15 (u-) 286.48 658.74 P
1.64 (tions;) 77.98 647.74 P
1 F
3.94 (stat_reg_dist\050\051) 101.87 647.74 P
2 F
1.64 ( creates an array distrib) 182.87 647.74 P
1.64 (ution,) 273.22 647.74 P
1 F
2.31 (stat_reg_sdist\050\051) 77.98 636.74 P
2 F
0.96 ( creates a sparse array distrib) 164.38 636.74 P
0.96 (ution,) 273.22 636.74 P
(and) 77.98 625.74 T
1 F
(stat_add_sample\050\051) 93.22 625.74 T
2 F
(updates a distrib) 190.42 625.74 T
(ution.) 249.24 625.74 T
(\245) 59.98 612.74 T
1 F
2.3 (ss.[c,h]) 77.98 612.74 P
2 F
0.96 (: De\336nes macros to e) 121.18 612.74 P
0.96 (xpedite the processing of) 200.87 612.74 P
0.75 (instructions, numerous constants needed across simulators,) 77.98 601.74 P
0.32 (and a function to print out indi) 77.98 590.74 P
0.32 (vidual instructions in a read-) 189.69 590.74 P
(able format.) 77.98 579.74 T
(\245) 59.98 566.74 T
1 F
-0.45 (ss.def) 77.98 566.74 P
2 F
-0.19 (: Holds a list of macro calls \050the macros are de\336ned) 110.38 566.74 P
2.2 (in the simulators and) 77.98 555.74 P
1 F
5.29 (ss.h) 164.29 555.74 P
2 F
2.2 ( and) 185.89 555.74 P
1 F
5.29 (ss.c) 207.79 555.74 P
2 F
2.2 (\051, each of which) 229.39 555.74 P
0.31 (de\336nes an instruction. The macro calls accept as ar) 77.98 544.74 P
0.31 (guments) 263.48 544.74 P
1.11 (the opcode, name of the instruction, sources, destinations,) 77.98 533.74 P
0.02 (actions to e) 77.98 522.74 P
0.02 (x) 118.88 522.74 P
0.02 (ecute, and other information. This \336le serv) 123.24 522.74 P
0.02 (es as) 276.71 522.74 P
(the de\336nition of the instruction set.) 77.98 511.74 T
(\245) 59.98 498.74 T
1 F
2.08 (symbol.[c,h]) 77.98 498.74 P
2 F
0.87 (: Holds routines to handle program sym-) 142.78 498.74 P
(bol and line information \050used in DLite!\051.) 77.98 487.74 T
(\245) 59.98 474.74 T
1 F
0.4 (syscall.[c,h]) 77.98 474.74 P
2 F
0.17 (: Contains code that acts as the interf) 148.18 474.74 P
0.17 (ace) 281.99 474.74 P
0.68 (between the SimpleScalar system calls \050which are POSIX-) 77.98 463.74 P
(compliant\051 and the system calls on the host machine.) 77.98 452.74 T
(\245) 59.98 439.74 T
1 F
-0.26 (sysprobe.c) 77.98 439.74 P
2 F
-0.11 (: Determines byte and w) 131.98 439.74 P
-0.11 (ord order on the host) 219.43 439.74 P
(platform, and generates appropriate compiler \337ags.) 77.98 428.74 T
(\245) 59.98 415.74 T
1 F
1.31 (version.h) 77.98 415.74 P
2 F
0.55 (: De\336nes the v) 126.58 415.74 P
0.55 (ersion number and release date) 180.32 415.74 P
(of the distrib) 77.98 404.74 T
(ution.) 123.79 404.74 T
0 12 Q
(5  Utilities) 59.98 379.74 T
2 9 Q
1.32 (In this section we describe the utilities that accompan) 72 362.74 P
1.32 (y the) 274.91 362.74 P
0.26 (SimpleScalar tool set; pipeline tracing and a source-le) 59.98 351.74 P
0.26 (v) 255.79 351.74 P
0.26 (el deb) 260.15 351.74 P
0.26 (ug-) 281.98 351.74 P
(ger) 59.98 340.74 T
(.) 70.97 340.74 T
0 11 Q
(5.1  Out-of-order pipeline tracing) 59.98 317.4 T
2 9 Q
0.39 (The tool set pro) 72 302.74 P
0.39 (vides the ability to e) 129.77 302.74 P
0.39 (xtract and vie) 204.18 302.74 P
0.39 (w traces of) 253.72 302.74 P
0.82 (the out-of-order pipeline. Using the \322-ptrace\323 option, a detailed) 59.98 291.74 P
0.47 (history of all instructions e) 59.98 280.74 P
0.47 (x) 158.21 280.74 P
0.47 (ecuted in a range may be sa) 162.58 280.74 P
0.47 (v) 264.68 280.74 P
0.47 (ed to a) 269.04 280.74 P
-0.02 (\336le. The information sa) 59.98 269.74 P
-0.02 (v) 144.22 269.74 P
-0.02 (ed includes instruction fetch, retirement,) 148.59 269.74 P
(and stage transitions. The syntax of this command is as follo) 59.98 258.74 T
(ws:) 277.49 258.74 T
(-ptrace <\336le> <start>:<end>) 72 245.74 T
(<\336le> is the \336le to which the trace will be) 131.98 233.74 T
(sa) 131.98 223.74 T
(v) 139.29 223.74 T
(ed. <start> and <end> are the instruction) 143.66 223.74 T
(numbers at which the trace will be started) 131.98 213.74 T
(and stopped. If the) 131.98 203.74 T
(y are left blank, the trace) 198.83 203.74 T
(will start at the be) 131.98 193.74 T
(ginning and/or stop at the) 196.34 193.74 T
(end of the program, respecti) 131.98 183.74 T
(v) 232.97 183.74 T
(ely) 237.34 183.74 T
(.) 247.75 183.74 T
(F) 72 171.74 T
(or e) 76.87 171.74 T
(xample:) 90.48 171.74 T
(-ptrace FOO.trc 100:500) 72 158.74 T
(trace from instructions 100 to 500, store the) 131.98 146.74 T
(trace in \336le FOO.src.) 131.98 136.74 T
(-ptrace FOO.trc :10000) 72 124.74 T
(trace from program be) 131.98 112.74 T
(ginning to instruction) 212.56 112.74 T
(10000.) 131.98 102.74 T
(-ptrace FOO.trc :) 72 90.74 T
(trace the entire program e) 131.98 78.74 T
(x) 224.31 78.74 T
(ecution.) 228.67 78.74 T
0.65 (The traces may be vie) 318 713.74 P
0.65 (wed with the) 399.35 713.74 P
1 F
1.56 (pipeview.pl) 450.05 713.74 P
2 F
0.65 ( Perl script,) 509.45 713.74 P
0.25 (which is pro) 318 702.74 P
0.25 (vided in the simplesim-2.0 directory) 362.87 702.74 P
0.25 (. \050Y) 494.05 702.74 P
0.25 (ou will ha) 507.31 702.74 P
0.25 (v) 543.64 702.74 P
0.25 (e) 548 702.74 P
-0.21 (to update the \336rst line of) 318 691.74 P
1 F
-0.5 (pipeview.pl) 407.24 691.74 P
2 F
-0.21 ( to ha) 466.64 691.74 P
-0.21 (v) 486.04 691.74 P
-0.21 (e the correct path) 490.4 691.74 P
1.31 (to your local Perl binary) 318 680.74 P
1.31 (, and you must ha) 410.15 680.74 P
1.31 (v) 478.96 680.74 P
1.31 (e Perl installed on) 483.32 680.74 P
(your system\051.) 318 669.74 T
4 8 Q
(pipeview.pl <ptrace_file>) 330.02 655.41 T
2 9 Q
(W) 318 640.74 T
(e depict sample output from the pipetracer in Figure) 325.78 640.74 T
(7.) 515.5 640.74 T
0 11 Q
(5.2  The DLite! deb) 318 617.41 T
(ugger) 408.53 617.41 T
2 9 Q
0.5 (Release 2.0 of SimpleScalar includes a lightweight symbolic) 330.02 602.74 P
-0.13 (deb) 318 591.74 P
-0.13 (ugger called DLite!, which runs with all simulators e) 330.82 591.74 P
-0.13 (xcept for) 519.89 591.74 P
0 F
-0.13 (sim-fast) 318 580.74 P
2 F
-0.13 (. DLite! allo) 348.49 580.74 P
-0.13 (ws you to step through the) 392.25 580.74 P
3 F
-0.13 (benc) 488.95 580.74 P
-0.13 (hmark tar) 505.81 580.74 P
-0.13 (g) 541.09 580.74 P
-0.13 (et) 545.5 580.74 P
0.55 (code) 318 569.74 P
2 F
0.55 (, not the simulator code. The deb) 334.99 569.74 P
0.55 (ugger can be incorporated) 456.62 569.74 P
0.68 (into a simulator by adding only four function calls \050which ha) 318 558.74 P
0.68 (v) 543.64 558.74 P
0.68 (e) 548 558.74 P
1.86 (already been added to all simulators in the distrib) 318 547.74 P
1.86 (ution\051. The) 510.15 547.74 P
(needed four function prototypes are in) 318 536.74 T
1 F
(dlite.h) 457.97 536.74 T
2 F
(.) 495.77 536.74 T
2.21 (T) 330.02 525.74 P
2.21 (o use the deb) 334.8 525.74 P
2.21 (ugger in a simulation, add the \322-i\323 option) 388.51 525.74 P
1.77 (\050which stands for interacti) 318 514.74 P
1.77 (v) 417.31 514.74 P
1.77 (e\051 to the simulator command line.) 421.67 514.74 P
(Belo) 318 503.74 T
(w we list the set of commands that DLite! accepts.) 334.78 503.74 T
0 F
(Getting help and getting out:) 318 487.74 T
3 F
(help [string]) 330.02 474.74 T
2 F
(print command reference.) 390 474.74 T
3 F
(ver) 330.02 462.74 T
(sion) 341.43 462.74 T
2 F
(print DLite! v) 390 462.74 T
(ersion information.) 439.86 462.74 T
3 F
(quit) 330.02 450.74 T
2 F
(e) 390 450.74 T
(xit simulator) 393.86 450.74 T
(.) 439.12 450.74 T
3 F
(terminate) 330.02 438.74 T
2 F
(generate statistics and e) 390 438.74 T
(xit simulator) 475.1 438.74 T
(.) 520.36 438.74 T
0 F
(Running and setting br) 318 423.74 T
(eakpoints:) 407.11 423.74 T
3 F
(step) 330.02 410.74 T
2 F
(e) 390 410.74 T
(x) 393.86 410.74 T
(ecute ne) 398.23 410.74 T
(xt instruction and break.) 427.83 410.74 T
3 F
(cont [addr]) 330.02 398.74 T
2 F
(continue e) 390 398.74 T
(x) 427.11 398.74 T
(ecution \050optionally continuing) 431.47 398.74 T
(starting at <addr>\051.) 390 388.74 T
3 F
(br) 330.02 376.74 T
(eak <addr>) 337.69 376.74 T
2 F
(set breakpoint at <addr>, returns <id> of) 390 376.74 T
(breakpoint.) 390 366.74 T
3 F
(dbr) 330.02 354.74 T
(eak <addr>) 342.19 354.74 T
2 F
( [r) 386.08 354.74 T
(,w) 393.97 354.74 T
(,x]) 402.13 354.74 T
(set data breakpoint at <addr> for \050r\051ead,) 390 342.74 T
(\050w\051rite, and/or e\050x\051ecute, returns <id> of) 390 332.74 T
(breakpoint.) 390 322.74 T
3 F
(rbr) 330.02 310.74 T
(eak <r) 341.19 310.74 T
(ang) 365.38 310.74 T
(e>) 378.79 310.74 T
2 F
( [r) 388.86 310.74 T
(,w) 396.74 310.74 T
(,x]) 404.9 310.74 T
(set breakpoint at <range> for \050r\051ead, \050w\051rite,) 390 298.74 T
(and/or e\050x\051ecute, returns <id> of breakpoint.) 390 288.74 T
3 F
(br) 330.02 276.74 T
(eaks) 337.69 276.74 T
2 F
(list acti) 390 276.74 T
(v) 416.03 276.74 T
(e code and data breakpoints.) 420.39 276.74 T
3 F
(delete <id>) 330.02 264.74 T
2 F
(delete breakpoint <id>.) 390 264.74 T
3 F
(clear) 330.02 252.74 T
2 F
(clear all breakpoints \050code and data\051.) 390 252.74 T
0 F
(Printing inf) 318 237.74 T
(ormation:) 362.53 237.74 T
3 F
(print [modi\336er) 330.02 224.74 T
(s] <e) 383.19 224.74 T
(xpr>) 402.33 224.74 T
2 F
(print the v) 390 212.74 T
(alue of <e) 426.77 212.74 T
(xpr> using optional) 462.7 212.74 T
(modi\336ers.) 390 202.74 T
3 F
(display [modi\336er) 330.02 190.74 T
(s] <e) 391.68 190.74 T
(xpr>) 410.83 190.74 T
2 F
(display the v) 390 178.74 T
(alue of <e) 435.77 178.74 T
(xpr> using optional) 471.7 178.74 T
(modi\336ers.) 390 168.74 T
3 F
(option <string>) 330.02 156.74 T
2 F
(print the v) 390 156.74 T
(alue of option <string>.) 426.77 156.74 T
3 F
(options) 330.02 144.74 T
2 F
(print the v) 390 144.74 T
(alues of all options.) 426.77 144.74 T
3 F
(stat <string>) 330.02 132.74 T
2 F
(print the v) 390 132.74 T
(alue of a statistical v) 426.77 132.74 T
(ariable.) 500.54 132.74 T
3 F
(stats) 330.02 120.74 T
2 F
(print the v) 390 120.74 T
(alues of all statistical v) 426.77 120.74 T
(ariables.) 509.04 120.74 T
3 F
(whatis <e) 330.02 108.74 T
(xpr>) 365.67 108.74 T
2 F
(print the type of <e) 390 108.74 T
(xpr>.) 458.93 108.74 T
3 F
(r) 330.02 96.74 T
(e) 333.19 96.74 T
(gs) 336.83 96.74 T
2 F
(print all re) 390 96.74 T
(gister contents.) 427.36 96.74 T
3 F
(ir) 330.02 84.74 T
(e) 335.69 84.74 T
(gs) 339.33 84.74 T
2 F
(print all instruction re) 390 84.74 T
(gister contents.) 468.11 84.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(12) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
(fpr) 72 487.31 T
(e) 82.17 487.31 T
(gs) 85.81 487.31 T
2 F
(print all \337oating point re) 131.98 487.31 T
(gister contents.) 219.84 487.31 T
3 F
(mstate [string]) 72 475.31 T
2 F
(print machine-speci\336c state.) 131.98 475.31 T
3 F
(dump <addr> [count]) 72 463.31 T
2 F
(dump memory at <addr> \050optionally for) 131.98 451.31 T
(<count> w) 131.98 441.31 T
(ords\051.) 170.78 441.31 T
3 F
(dis <addr> [count]) 72 429.31 T
2 F
(disassemble instructions at <addr> \050option-) 131.98 417.31 T
(ally for <count> instructions\051.) 131.98 407.31 T
3 F
(symbols) 72 395.31 T
2 F
(print the v) 131.98 395.31 T
(alue of all program symbols.) 168.75 395.31 T
3 F
(tsymbols) 72 383.31 T
2 F
(print the v) 131.98 383.31 T
(alue of all program te) 168.75 383.31 T
(xt symbols.) 246.1 383.31 T
3 F
(dsymbols) 72 371.31 T
2 F
(print the v) 131.98 371.31 T
(alue of all program data symbols.) 168.75 371.31 T
3 F
(symbol <string>) 72 359.31 T
2 F
(print the v) 131.98 347.31 T
(alue of symbol <string>.) 168.75 347.31 T
0 F
(Legal ar) 59.98 332.31 T
(guments:) 92.13 332.31 T
2 F
1.6 (Ar) 72 321.31 P
1.6 (guments <addr>, <cnt>, <e) 81.33 321.31 P
1.6 (xpr>, and <id> are an) 184.1 321.31 P
1.6 (y le) 268.31 321.31 P
1.6 (g) 283.02 321.31 P
1.6 (al) 287.48 321.31 P
(e) 59.98 310.31 T
(xpression:) 63.84 310.31 T
(<e) 72 299.31 T
(xpr>) 80.94 299.31 T
8 F
(\254) 111.26 299.31 T
2 F
( <f) 120.15 299.31 T
(actor> +|- <e) 130.38 299.31 T
(xpr>) 176.76 299.31 T
(<f) 72 286.31 T
(actor>) 79.98 286.31 T
8 F
(\254) 111.26 286.31 T
2 F
( <term> *|/ <f) 120.15 286.31 T
(actor>) 170.33 286.31 T
(<term>) 72 274.31 T
8 F
(\254) 111.26 274.31 T
2 F
( \050 <e) 120.15 274.31 T
(xpr> \051) 136.58 274.31 T
(| - <term> | <const> | <symbol> | <\336le:loc>) 121.98 262.31 T
(<symbol>) 72 250.31 T
8 F
(\254) 111.26 250.31 T
2 F
( <literal> | <function name> | <re) 120.14 250.31 T
(gister>) 239.97 250.31 T
(<literal>) 72 238.31 T
8 F
(\254) 111.26 238.31 T
2 F
( [0-9]+ | 0x[0-9,a-f]+ | 0[0-7]+) 120.14 238.31 T
(<re) 72 226.31 T
(gister>) 83.93 226.31 T
8 F
(\254) 111.26 226.31 T
2 F
( $r[0-31] | $f[0-31] | $pc | $fcc | $hi | $lo) 120.14 226.31 T
0 F
(Legal ranges:) 59.98 211.31 T
2 F
(<range>) 72 198.31 T
8 F
(\254) 111.26 198.31 T
2 F
( <address> | <instruction> | <c) 120.14 198.31 T
(ycle>) 229.73 198.31 T
(<address>) 72 186.31 T
8 F
(\254) 111.39 186.31 T
2 F
( @<function name>:{+<literal>}) 120.28 186.31 T
(<instruction>) 72 174.31 T
8 F
(\254) 120.65 174.31 T
2 F
( {<literal>}:{<literal>}) 129.54 174.31 T
(<c) 72 162.31 T
(ycle>) 80.94 162.31 T
8 F
(\254) 111.26 162.31 T
2 F
( #{<literal>}:{<literal>}) 120.14 162.31 T
0.48 (Omitting optional ar) 59.98 150.31 P
0.48 (guments to the left of the colon will def) 134.27 150.31 P
0.48 (ault) 280.48 150.31 P
3.19 (to the smallest v) 59.98 139.31 P
3.19 (alue permitted in that range. Omitting an) 128.08 139.31 P
1.46 (optional ar) 59.98 128.31 P
1.46 (gument at the right of the colon will def) 100.01 128.31 P
1.46 (ault to the) 255.06 128.31 P
(lar) 59.98 117.31 T
(gest v) 69.31 117.31 T
(alue permitted in that range.) 90.33 117.31 T
0 F
(Legal command modi\336ers:) 59.98 101.31 T
3 F
(b) 72 88.31 T
2 F
(print a byte) 89.29 88.31 T
3 F
(h) 72 76.31 T
2 F
(print a half \050short\051) 89.29 76.31 T
(w) 330.02 487.31 T
(print a w) 347.31 487.31 T
(ord \050def) 379.21 487.31 T
(ault\051) 407.86 487.31 T
3 F
(t) 330.02 475.31 T
2 F
(print in decimal format \050def) 347.31 475.31 T
(ault\051) 447.2 475.31 T
3 F
(o) 330.02 463.31 T
2 F
(print in octal format) 347.31 463.31 T
3 F
(x) 330.02 451.31 T
2 F
(print in he) 347.31 451.31 T
(x format) 384.17 451.31 T
3 F
(1) 330.02 439.31 T
2 F
(print in binary format) 347.31 439.31 T
3 F
(f) 330.02 427.31 T
2 F
(print \337oat) 347.31 427.31 T
3 F
(d) 330.02 415.31 T
2 F
(print double) 347.31 415.31 T
3 F
(c) 330.02 403.31 T
2 F
(print character) 347.31 403.31 T
3 F
(s) 330.02 391.31 T
2 F
(print string) 347.31 391.31 T
0 F
(Examples of legal commands:) 318 376.31 T
4 8 Q
(break main+8) 330.02 361.98 T
(break 0x400148) 330.02 351.98 T
(dbreak stdin w) 330.02 341.98 T
(dbreak sys_count wr) 330.02 331.98 T
(rbreak @main:+279) 330.02 321.98 T
(rbreak 2000:3500) 330.02 311.98 T
(rbreak #:100) 330.02 301.98 T
(cycle 0 to cycle 100) 422.86 301.98 T
(rbreak :) 330.02 291.98 T
(entire execution) 422.86 291.98 T
0 12 Q
(6  Summary) 318 267.31 T
2 9 Q
1.04 (The SimpleScalar tool set w) 330.02 250.31 P
1.04 (as written by T) 435.57 250.31 P
1.04 (odd Austin o) 492.2 250.31 P
1.04 (v) 540.64 250.31 P
1.04 (er) 545.01 250.31 P
-0.2 (about one and a half years, between 1994 and 1996. He continues) 318 239.31 P
0.75 (to add impro) 318 228.31 P
0.75 (v) 365.37 228.31 P
0.75 (ements and updates. The ancestors of the tool set) 369.74 228.31 P
1.4 (date back to the mid to late 1980s, to tools written by Manoj) 318 217.31 P
0.48 (Franklin. At the time the tools were de) 318 206.31 P
0.48 (v) 460.14 206.31 P
0.48 (eloped, both indi) 464.51 206.31 P
0.48 (viduals) 526 206.31 P
0.29 (were research assistants at the Uni) 318 195.31 P
0.29 (v) 442.93 195.31 P
0.29 (ersity of W) 447.29 195.31 P
0.29 (isconsin-Madison) 488 195.31 P
1.72 (Computer Sciences Department, supervised by Professor Guri) 318 184.31 P
0.58 (Sohi. Scott Breach pro) 318 173.31 P
0.58 (vided v) 401.1 173.31 P
0.58 (aluable assistance with the imple-) 428.2 173.31 P
0.04 (mentation of the proxy system calls. The \336rst release w) 318 162.31 P
0.04 (as assem-) 517.22 162.31 P
3.75 (bled, deb) 318 151.31 P
3.75 (ugged, and documented by Doug Bur) 354.56 151.31 P
3.75 (ger) 508.12 151.31 P
3.75 (, also a) 519.26 151.31 P
0.07 (research assistant at W) 318 140.31 P
0.07 (isconsin, who is the maintainer of the sec-) 400.06 140.31 P
2.84 (ond release as well. K) 318 129.31 P
2.84 (e) 408.37 129.31 P
2.84 (vin Skadron, currently at Princeton,) 412.14 129.31 P
0.34 (implemented man) 318 118.31 P
0.34 (y of the more recent branch prediction mecha-) 382.95 118.31 P
(nisms.) 318 107.31 T
0.18 (Man) 330.02 96.31 P
0.18 (y e) 346.39 96.31 P
0.18 (xciting e) 357.18 96.31 P
0.18 (xtensions to SimpleScalar are both underw) 388.47 96.31 P
0.18 (ay) 543.5 96.31 P
0.37 (and planned. Ef) 318 85.31 P
0.37 (forts ha) 375.26 85.31 P
0.37 (v) 402.69 85.31 P
0.37 (e be) 407.06 85.31 P
0.37 (gun to e) 422.04 85.31 P
0.37 (xtend the processor simula-) 451.65 85.31 P
60 494.86 552.15 719.86 C
60 505.26 552.15 719.86 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(@ 610) 182.9 706.51 T
(gf = \3240x0040d098: addiu) 182.9 677.09 T
(r2, r4, -1\325) 310.34 677.09 T
(gg = \3240x0040d0a0: beq) 182.9 664.34 T
(r3, r5, 0x30\325) 310.34 664.34 T
([IF]) 183.39 642.84 T
(gf) 184.4 632.15 T
(gg) 184.88 621.46 T
([D) 255.39 642.84 T
(A]) 264.03 642.84 T
(gb) 258.71 632.15 T
(gc) 259.21 621.46 T
(gd\134) 258.71 610.76 T
(ge) 258.71 600.07 T
([EX]) 331.52 642.84 T
(fy) 336.28 632.15 T
(fz) 336.53 621.46 T
(ga+) 336.28 610.76 T
([WB]) 410.35 642.84 T
(fr\134) 416.11 632.15 T
(fs) 416.6 621.46 T
(ft) 416.11 610.76 T
(fu) 416.11 600.07 T
([CT]) 488.66 642.84 T
(fq) 493.41 632.15 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ne) 83.4 710.11 T
(w cycle) 93.23 710.11 T
(indicator) 83.4 699.41 T
(ne) 83.4 677.09 T
(w instr) 93.23 677.09 T
(uction) 119.36 677.09 T
(de\336nitions) 83.4 666.4 T
(current pipeline) 83.4 627.84 T
(state) 83.4 617.14 T
(inst. being) 182.9 570 T
(inst. being) 254.48 570 T
(inst.) 331.04 570 T
(inst. wr) 409.62 570 T
(iting) 438.26 570 T
(inst. retir) 488.18 570 T
(ing) 522.82 570 T
(f) 182.9 559.3 T
(etched, or in) 185.13 559.3 T
(f) 182.9 548.61 T
(etch queue) 185.13 548.61 T
(decoded, or) 254.48 559.3 T
(a) 254.48 548.61 T
(w) 259.3 548.61 T
(aiting issue) 265.66 548.61 T
(e) 331.04 559.3 T
(x) 335.77 559.3 T
(ecuting) 340 559.3 T
(results into) 409.62 559.3 T
(R) 409.62 548.61 T
(UU) 415.76 548.61 T
(, or) 428.39 548.61 T
(a) 409.62 537.91 T
(w) 414.45 537.91 T
(aiting retire) 420.81 537.91 T
(results to) 488.18 559.3 T
(register \336le) 488.18 548.61 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pipeline e) 452.45 696.52 T
(v) 490.7 696.52 T
(ent:) 494.97 696.52 T
(\050misprediction) 452.45 685.82 T
(detected\051, see output) 452.45 675.13 T
(header f) 452.45 664.43 T
(or e) 485.2 664.43 T
(v) 500.43 664.43 T
(ent defs) 504.71 664.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(Figure 7. Example of sim-outor) 200.87 514.37 T
(der pipetrace) 347.37 514.37 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
430.75 636.89 431.88 634.59 426.76 634.93 429.62 639.2 4 Y
0.5 H
0 Z
N
430.75 636.89 431.88 634.59 426.76 634.93 429.62 639.2 4 Y
V
483 662.57 430.97 637 2 L
2 Z
N
263.6 588.91 261.03 588.91 263.6 593.36 266.16 588.91 4 Y
0 Z
N
263.6 588.91 261.03 588.91 263.6 593.36 266.16 588.91 4 Y
V
263.6 577.57 263.6 588.66 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.89 588.91 187.32 588.91 189.89 593.36 192.46 588.91 4 Y
0 Z
N
189.89 588.91 187.32 588.91 189.89 593.36 192.46 588.91 4 Y
V
189.89 577.57 189.89 588.66 2 L
2 Z
N
341.54 588.91 338.97 588.91 341.54 593.36 344.1 588.91 4 Y
0 Z
N
341.54 588.91 338.97 588.91 341.54 593.36 344.1 588.91 4 Y
V
341.54 577.57 341.54 588.66 2 L
2 Z
N
420.1 588.91 417.53 588.91 420.1 593.36 422.67 588.91 4 Y
0 Z
N
420.1 588.91 417.53 588.91 420.1 593.36 422.67 588.91 4 Y
V
420.1 577.57 420.1 588.66 2 L
2 Z
N
497.16 588.91 494.6 588.91 497.16 593.36 499.73 588.91 4 Y
0 Z
N
497.16 588.91 494.6 588.91 497.16 593.36 499.73 588.91 4 Y
V
497.16 577.57 497.16 588.66 2 L
2 Z
N
165.65 709 165.65 711.57 170.1 709 165.65 706.43 4 Y
0 Z
N
165.65 709 165.65 711.57 170.1 709 165.65 706.43 4 Y
V
149.17 709 165.4 709 2 L
2 Z
N
164.36 673.86 164.36 676.42 168.81 673.86 164.36 671.29 4 Y
0 Z
N
164.36 673.86 164.36 676.42 168.81 673.86 164.36 671.29 4 Y
V
147.88 673.86 164.11 673.86 2 L
2 Z
N
165.93 629.43 165.93 631.99 170.38 629.43 165.93 626.86 4 Y
0 Z
N
165.93 629.43 165.93 631.99 170.38 629.43 165.93 626.86 4 Y
V
149.45 629.43 165.68 629.43 2 L
2 Z
N
60 507.71 550.72 507.71 2 L
N
60 494.86 552.15 719.86 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(13) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
0.08 (tors to simulate multithreaded processors and multiprocessors. A) 59.98 713.74 P
0.55 (Linux port to SimpleScalar \050enabling simulation of the OS on a) 59.98 702.74 P
0.44 (k) 59.98 691.74 P
0.44 (ernel with publicly a) 64.39 691.74 P
0.44 (v) 139.76 691.74 P
0.44 (ailable sources\051 is planned, using de) 144.04 691.74 P
0.44 (vice-) 275.98 691.74 P
0.44 (le) 59.98 680.74 P
0.44 (v) 66.25 680.74 P
0.44 (el emulation and a user) 70.61 680.74 P
0.44 (-le) 155.67 680.74 P
0.44 (v) 164.94 680.74 P
0.44 (el \336le system. Other plans include) 169.3 680.74 P
0.65 (e) 59.98 669.74 P
0.65 (xtending the tool set to simulate ISAs other than SimpleScalar) 63.84 669.74 P
0.19 (and MIPS \050Alpha and SP) 59.98 658.74 P
0.19 (ARC ISA support will be the \336rst addi-) 150.9 658.74 P
(tions\051.) 59.98 647.74 T
-0.17 (As the) 72 636.74 P
-0.17 (y stand no) 94.95 636.74 P
-0.17 (w) 131.39 636.74 P
-0.17 (, these tools pro) 137.3 636.74 P
-0.17 (vide researchers with a sim-) 193.67 636.74 P
0.4 (ulation infrastructure that is f) 59.98 625.74 P
0.4 (ast, \337e) 166.49 625.74 P
0.4 (xible, and ef) 190.25 625.74 P
0.4 (\336cient. Changes) 235.58 625.74 P
0.1 (in both the tar) 59.98 614.74 P
0.1 (get hardw) 110.37 614.74 P
0.1 (are and softw) 146.13 614.74 P
0.1 (are may be made with min-) 194.73 614.74 P
0.02 (imal ef) 59.98 603.74 P
0.02 (fort. W) 85.02 603.74 P
0.02 (e hope that you \336nd these tools useful, and encour-) 110.31 603.74 P
0.1 (age you to contact us with w) 59.98 592.74 P
0.1 (ays that we can impro) 163.45 592.74 P
0.1 (v) 242.69 592.74 P
0.1 (e the release,) 247.05 592.74 P
(documentation, and the tools themselv) 59.98 581.74 T
(es.) 198.59 581.74 T
0 12 Q
(Refer) 59.98 556.74 T
(ences) 88.4 556.74 T
2 9 Q
([1]) 59.98 539.74 T
1.38 (L.) 81.58 539.74 P
1.38 (A. Belady) 91.57 539.74 P
1.38 (. A Study of Replacement Algorithms for a) 128.86 539.74 P
0.49 (V) 81.58 528.74 P
0.49 (irtual-Storage Computer) 87.53 528.74 P
0.49 (.) 175.27 528.74 P
3 F
0.49 (IBM Systems J) 180.26 528.74 P
0.49 (ournal) 233.99 528.74 P
2 F
0.49 (, 5\0502\051:78\320) 257.99 528.74 P
(101, 1966.) 81.58 517.74 T
([2]) 59.98 506.74 T
0.25 (Doug Bur) 81.58 506.74 P
0.25 (ger) 117.41 506.74 P
0.25 (, T) 128.54 506.74 P
0.25 (odd) 138.07 506.74 P
0.25 (M. Austin, and Ste) 153.82 506.74 P
0.25 (v) 222.1 506.74 P
0.25 (en Bennett. Ev) 226.46 506.74 P
0.25 (alu-) 279.98 506.74 P
0.98 (ating Future Microprocessors: the SimpleScalar T) 81.58 495.74 P
0.98 (ool Set.) 265.49 495.74 P
1.86 (T) 81.58 484.74 P
1.86 (echnical Report 1308, Computer Sciences Department,) 86.44 484.74 P
(Uni) 81.58 473.74 T
(v) 94.85 473.74 T
(ersity of W) 99.22 473.74 T
(isconsin, Madison, WI, July 1996.) 139.35 473.74 T
([3]) 59.98 462.74 T
0.45 (L.) 81.58 462.74 P
0.45 (P) 91.57 462.74 P
0.45 (. Horwitz, R.) 95.58 462.74 P
0.45 (M. Karp, R.) 145.47 462.74 P
0.45 (E. Miller) 191.87 462.74 P
0.45 (, and A.) 224.45 462.74 P
0.45 (W) 256.1 462.74 P
0.45 (inograd.) 264.23 462.74 P
0.56 (Inde) 81.58 451.74 P
0.56 (x Re) 97.43 451.74 P
0.56 (gister Allocation.) 114.61 451.74 P
3 F
0.56 (J) 180.48 451.74 P
0.56 (ournal of the A) 184.25 451.74 P
0.56 (CM) 239.92 451.74 P
2 F
0.56 (, 13\0501\051:43\320) 253.42 451.74 P
(61, January 1966.) 81.58 440.74 T
([4]) 59.98 429.74 T
0.17 (Charles Price.) 81.58 429.74 P
3 F
0.17 (MIPS IV Instruction Set, r) 134.66 429.74 P
0.17 (e) 229.26 429.74 P
0.17 (vision 3.1) 233.12 429.74 P
2 F
0.17 (. MIPS) 268.3 429.74 P
(T) 81.58 418.74 T
(echnologies, Inc., Mountain V) 86.44 418.74 T
(ie) 195.39 418.74 T
(w) 201.66 418.74 T
(, CA, January 1995.) 207.58 418.74 T
([5]) 59.98 407.74 T
0.45 (Gurindar) 81.58 407.74 P
0.45 (S. Sohi. Instruction Issue Logic for High-Perfor-) 116.32 407.74 P
1.28 (mance, Interruptible, Multiple Functional Unit, Pipelined) 81.58 396.74 P
0.57 (Computers.) 81.58 385.74 P
3 F
0.57 (IEEE T) 126.15 385.74 P
0.57 (r) 152.98 385.74 P
0.57 (ansactions on Computer) 156.34 385.74 P
0.57 (s) 245.4 385.74 P
2 F
0.57 (, 39\0503\051:349\320) 248.91 385.74 P
(359, March 1990.) 81.58 374.74 T
([6]) 59.98 363.74 T
3.43 (Rabin) 81.58 363.74 P
3.43 (A. Sugumar and Santosh) 105.33 363.74 P
3.43 (G. Abraham. Ef) 207.36 363.74 P
3.43 (\336cient) 271.48 363.74 P
2.15 (Simulation of Caches under Optimal Replacement with) 81.58 352.74 P
1.26 (Applications to Miss Characterization. In) 81.58 341.74 P
3 F
1.26 (Pr) 238.88 341.74 P
1.26 (oceedings of) 247.47 341.74 P
1.81 (the 1993 A) 81.58 330.74 P
1.81 (CM Sigmetrics Confer) 123.92 330.74 P
1.81 (ence on Measur) 208.21 330.74 P
1.81 (ements) 268.98 330.74 P
1.88 (and Modeling of Computer Systems) 81.58 319.74 P
2 F
1.88 (, pages 24\32035, May) 217.59 319.74 P
(1993.) 81.58 308.74 T
0 12 Q
(A Instruction set de\336nition) 59.98 283.74 T
2 9 Q
1.6 (This appendix lists all SimpleScalar instructions with their) 72 266.74 P
2.36 (opcode, assembler format, and semantics. The semantics are) 59.98 255.74 P
0.8 (e) 59.98 244.74 P
0.8 (xpressed as a C-style e) 63.84 244.74 P
0.8 (xpression that uses the e) 148.89 244.74 P
0.8 (xtended opera-) 239.45 244.74 P
1.56 (tors and operands described in T) 59.98 233.74 P
1.56 (able) 184.27 233.74 P
1.56 (3. Operands that are not) 201.51 233.74 P
1.75 (listed in T) 59.98 222.74 P
1.75 (able) 99.26 222.74 P
1.75 (3 refer to actual instruction \336elds described in) 116.5 222.74 P
0.34 (Figure) 59.98 211.74 P
0.34 (3. F) 85.72 211.74 P
0.34 (or each instruction, the ne) 99.94 211.74 P
0.34 (xt PC v) 194.41 211.74 P
0.34 (alue \050NPC\051 def) 221.89 211.74 P
0.34 (aults) 276.98 211.74 P
1.88 (to the current PC v) 59.98 200.74 P
1.88 (alue plus eight \050CPC+8\051 unless otherwise) 135.26 200.74 P
(speci\336ed.) 59.98 189.74 T
0 11 Q
(A.1 Contr) 59.98 166.41 T
(ol instructions) 106.82 166.41 T
0 9 Q
(J) 59.98 149.74 T
2 F
(:) 64.48 149.74 T
(Jump to absolute address.) 131.98 149.74 T
(Opcode:) 72 138.74 T
(0x01) 131.98 138.74 T
(F) 72 128.74 T
(ormat:) 76.87 128.74 T
(J tar) 131.98 128.74 T
(get) 147.06 128.74 T
(Semantics:) 71.98 118.74 T
2 8 Q
-0.97 (SET_NPC\050\050CPC & 0xf0000000\051 | \050T) 131.98 118.74 P
-0.97 (ARGET<<2\051\051\051) 246.3 118.74 P
0 9 Q
(J) 59.98 97.74 T
(AL) 64.21 97.74 T
2 F
(:) 76.71 97.74 T
(Jump to absolute address and link.) 131.98 97.74 T
(Opcode:) 72 86.74 T
(0x02) 131.98 86.74 T
(F) 72 76.74 T
(ormat:) 76.87 76.74 T
(J) 131.98 76.74 T
(AL tar) 134.94 76.74 T
(get) 158.52 76.74 T
(Semantics:) 330 713.74 T
2 8 Q
(SET_NPC\050\050CPC\134&0xf0000000\051 | \050T) 390 713.74 T
(ARGET<<2\051\051) 506.42 713.74 T
(SET_GPR\05031, CPC + 8\051\051) 390 704.41 T
0 9 Q
(JR) 318 683.74 T
2 F
(:) 329 683.74 T
(Jump to re) 390 683.74 T
(gister address.) 427.86 683.74 T
(Opcode:) 330.02 672.74 T
(0x03) 390 672.74 T
(F) 330.02 662.74 T
(ormat:) 334.89 662.74 T
(JR rs) 390 662.74 T
(Semantics:) 330 652.74 T
2 8 Q
(T) 390 652.74 T
(ALIGN\050GPR\050RS\051\051) 394.14 652.74 T
(SET_NPC\050GPR\050RS\051\051) 390 643.41 T
0 9 Q
(J) 318 622.74 T
(ALR) 322.23 622.74 T
2 F
(:) 341.23 622.74 T
(Jump to re) 390 622.74 T
(gister address and link.) 427.86 622.74 T
(Opcode:) 330.02 611.74 T
(0x04) 390 611.74 T
(F) 330.02 601.74 T
(ormat:) 334.89 601.74 T
(J) 390 601.74 T
(ALR rs) 392.96 601.74 T
(Semantics:) 330.02 591.74 T
2 8 Q
(T) 390 591.74 T
(ALIGN\050GPR\050RS\051\051) 394.14 591.74 T
2 9 Q
(SET_GPR\050RD, CPC + 8\051) 390 581.74 T
2 8 Q
(SET_NPC\050GPR\050RS\051\051) 390 572.41 T
0 9 Q
(BEQ) 318 551.74 T
2 F
(:) 337.01 551.74 T
(Branch if equal.) 390 551.74 T
(Opcode:) 330.02 540.74 T
(0x05) 390 540.74 T
(F) 330.02 530.74 T
(ormat:) 334.89 530.74 T
(BEQ rs,rt,of) 390 530.74 T
(fset) 434.02 530.74 T
(Semantics:) 330 520.74 T
2 8 Q
(if \050GPR\050RS\051 == GPR\050R) 390 520.74 T
(T\051\051) 466.33 520.74 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 397.2 511.4 T
(else) 390 502.4 T
(SET_NPC\050CPC + 8\051) 397.2 493.4 T
0 9 Q
(BNE) 318 472.74 T
2 F
(:) 336.5 472.74 T
(Branch if not equal.) 390 472.74 T
(Opcode:) 330.02 461.74 T
(0x06) 390 461.74 T
(F) 330.02 451.74 T
(ormat:) 334.89 451.74 T
(BEQ rs,rt,of) 390 451.74 T
(fset) 434.02 451.74 T
(Semantics:) 330 441.74 T
2 8 Q
(if \050GPR\050RS\051 != GPR\050R) 390 441.74 T
(T\051\051) 464.48 441.74 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 397.2 432.4 T
(else) 390 423.4 T
(SET_NPC\050CPC + 8\051) 397.2 414.4 T
0 9 Q
(BLEZ) 318 393.74 T
2 F
(:) 342.01 393.74 T
(Branch if less than or equal to zero.) 390 393.74 T
(Opcode:) 330.02 382.74 T
(0x07) 390 382.74 T
(F) 330.02 372.74 T
(ormat:) 334.89 372.74 T
(BLEZ rs,of) 390 372.74 T
(fset) 430.77 372.74 T
(Semantics:) 330 362.74 T
2 8 Q
(if \050GPR\050RS\051 <= 0\051) 390 362.74 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 397.2 353.4 T
(else) 390 344.4 T
(SET_NPC\050CPC + 8\051) 397.2 335.4 T
0 9 Q
(BGTZ) 318 314.74 T
2 F
(:) 343.01 314.74 T
(Branch if greater than zero.) 390 314.74 T
(Opcode:) 330.02 303.74 T
(0x08) 390 303.74 T
(F) 330.02 293.74 T
(ormat:) 334.89 293.74 T
(BGTZ rs,of) 390 293.74 T
(fset) 431.77 293.74 T
(Semantics:) 330 283.74 T
2 8 Q
(if \050GPR\050RS\051 > 0\051) 390 283.74 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 397.2 274.41 T
(else) 390 265.41 T
(SET_NPC\050CPC + 8\051) 397.2 256.41 T
0 9 Q
(BL) 318 235.74 T
(TZ) 329.18 235.74 T
2 F
(:) 341.18 235.74 T
(Branch if less than zero.) 390 235.74 T
(Opcode:) 330.02 224.74 T
(0x09) 390 224.74 T
(F) 330.02 214.74 T
(ormat:) 334.89 214.74 T
(BL) 390 214.74 T
(TZ rs,of) 400.67 214.74 T
(fset) 429.94 214.74 T
(Semantics:) 330 204.74 T
2 8 Q
(if \050GPR\050RS\051 < 0\051) 390 204.74 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 397.2 195.41 T
(else) 390 186.41 T
(SET_NPC\050CPC + 8\051) 397.2 177.41 T
0 9 Q
(BGEZ) 318 156.74 T
2 F
(:) 343.01 156.74 T
(Branch if greater than or equal to zero.) 390 156.74 T
(Opcode:) 330.02 145.74 T
(0x0a) 390 145.74 T
(F) 330.02 135.74 T
(ormat:) 334.89 135.74 T
(BGEZ rs,of) 390 135.74 T
(fset) 431.77 135.74 T
(Semantics:) 330 125.74 T
2 8 Q
(if \050GPR\050RS\051 >= 0\051) 390 125.74 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 397.2 116.41 T
(else) 390 107.41 T
(SET_NPC\050CPC + 8\051) 397.2 98.41 T
0 9 Q
(BC1F) 318 77.74 T
2 F
(:) 340.5 77.74 T
(Branch on \337oating point compare f) 390 77.74 T
(alse.) 516.14 77.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(14) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Opcode:) 72 330.17 T
(0x0b) 131.98 330.17 T
(F) 72 320.17 T
(ormat:) 76.87 320.17 T
(BC1F of) 131.98 320.17 T
(fset) 163.01 320.17 T
(Semantics:) 71.98 310.17 T
2 8 Q
(if \050!FCC\051) 131.98 310.17 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 139.18 300.83 T
(else) 131.98 291.83 T
(SET_NPC\050CPC + 8\051) 139.18 282.83 T
0 9 Q
(BC1T) 59.98 262.16 T
2 F
(:) 82.53 262.16 T
(Branch on \337oating point compare true.) 131.98 262.16 T
(Opcode:) 72 251.16 T
(0x0c) 131.98 251.16 T
(F) 72 241.16 T
(ormat:) 76.87 241.16 T
(BC1T of) 131.98 241.16 T
(fset) 163.5 241.16 T
(Semantics:) 71.98 231.16 T
2 8 Q
(if \050FCC\051) 131.98 231.16 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 139.18 221.83 T
(else) 131.98 212.83 T
(SET_NPC\050CPC + 8\051) 139.18 203.83 T
0 11 Q
(A.2 Load/stor) 59.98 181.83 T
(e instructions) 124.56 181.83 T
0 9 Q
(LB) 59.98 165.16 T
2 F
(:) 71.98 165.16 T
(Load byte signed, displaced addressing.) 131.98 165.16 T
(Opcode:) 72 154.16 T
(0x20) 131.98 154.16 T
(F) 72 144.16 T
(ormat:) 76.87 144.16 T
(LB rt,of) 131.98 144.16 T
(fset\050rs\051 inc_dec) 160.75 144.16 T
(Semantics:) 71.98 134.16 T
2 8 Q
-1.46 (SET_GPR\050R) 131.98 134.16 P
-1.46 (T) 173.28 134.16 P
-1.46 (, READ_SIGNED_BYTE\050GPR\050RS\051) 177.58 134.16 P
(+ OFFSET\051\051) 131.98 124.16 T
0 9 Q
(LB) 59.98 103.16 T
2 F
(:) 71.98 103.16 T
(Load byte signed, inde) 131.98 103.16 T
(x) 213.83 103.16 T
(ed addressing.) 218.2 103.16 T
(Opcode:) 72 92.16 T
(0xc0) 131.98 92.16 T
(F) 72 82.16 T
(ormat:) 76.87 82.16 T
(LB rt,\050rs+rd\051 inc_dec) 131.98 82.16 T
(Semantics:) 330 330.17 T
2 8 Q
(SET_GPR\050R) 390 330.17 T
(T) 431.3 330.17 T
(,) 435.6 330.17 T
(READ_SIGNED_BYTE\050GPR\050RS\051+GPR\050RD\051\051\051) 390 320.17 T
0 9 Q
(LB) 318 299.17 T
(U) 329.92 299.17 T
2 F
(:) 336.41 299.17 T
(Load byte unsigned, displaced addressing.) 390 299.17 T
(Opcode:) 330.02 288.17 T
(0x22) 390 288.17 T
(F) 330.02 278.16 T
(ormat:) 334.89 278.16 T
(LB) 390 278.16 T
(U rt,of) 401.41 278.16 T
(fset\050rs\051 inc_dec) 425.18 278.16 T
(Semantics:) 330 268.16 T
2 8 Q
(SET_GPR\050R) 390 268.16 T
(T) 431.3 268.16 T
(,) 435.6 268.16 T
(READ_UNSIGNED_BYTE\050GPR\050RS\051+OFF-) 390 258.16 T
(SET\051\051) 390 248.16 T
0 9 Q
(LB) 318 227.16 T
(U) 329.92 227.16 T
2 F
(:) 336.41 227.16 T
(Load byte unsigned, inde) 390 227.16 T
(x) 480.86 227.16 T
(ed addressing.) 485.22 227.16 T
(Opcode:) 330.02 216.16 T
(0xc1) 390 216.16 T
(F) 330.02 206.16 T
(ormat:) 334.89 206.16 T
(LB) 390 206.16 T
(U rt,\050rs+rd\051 inc_dec) 401.41 206.16 T
(Semantics:) 330 196.16 T
2 8 Q
(SET_GPR\050R) 390 196.16 T
(T) 431.3 196.16 T
(,) 435.6 196.16 T
(READ_UNSIGNED_BYTE\050GPR\050RS\051+GPR\050RD\051) 390 186.16 T
(\051\051) 390 176.16 T
0 9 Q
(LH) 318 155.16 T
2 F
(:) 331.01 155.16 T
(Load half signed, displaced addressing.) 390 155.16 T
(Opcode:) 330.02 144.16 T
(0x24) 390 144.16 T
(F) 330.02 134.16 T
(ormat:) 334.89 134.16 T
(LH rt,of) 390 134.16 T
(fset\050rs\051 inc_dec) 419.27 134.16 T
(Semantics:) 330 124.16 T
2 8 Q
(SET_GPR\050R) 390 124.16 T
(T) 431.3 124.16 T
(,) 435.6 124.16 T
(READ_SIGNED_HALF\050GPR\050RS\051+OFFSET\051\051) 390 114.16 T
0 9 Q
(LH) 318 93.16 T
2 F
(:) 331.01 93.16 T
(Load half signed, inde) 390 93.16 T
(x) 470.35 93.16 T
(ed addressing.) 474.72 93.16 T
(Opcode:) 330.02 82.16 T
(0xc2) 390 82.16 T
6 8 Q
(Operator/operand) 168.72 709.38 T
(Semantics) 344.49 709.38 T
7 F
(FS) 150 697.38 T
(same as \336eld RS) 267 697.38 T
(FT) 150 687.38 T
(same as \336eld R) 267 687.38 T
(T) 321.89 687.38 T
(FD) 150 677.38 T
(same as \336eld RD) 267 677.38 T
(UIMM) 150 667.38 T
(IMM \336eld unsigned-e) 267 667.38 T
(xtended to w) 341.01 667.38 T
(ord v) 386.29 667.38 T
(alue) 403.87 667.38 T
(IMM) 150 657.38 T
(IMM \336eld sign-e) 267 657.38 T
(xtended to w) 323.22 657.38 T
(ord v) 368.5 657.38 T
(alue) 386.08 657.38 T
(OFFSET) 150 647.38 T
(IMM \336eld sign-e) 267 647.38 T
(xtended to w) 323.22 647.38 T
(ord v) 368.5 647.38 T
(alue) 386.08 647.38 T
(CPC) 150 637.38 T
(PC v) 267 637.38 T
(alue of e) 284.14 637.38 T
(x) 314.58 637.38 T
(ecuting instr) 318.34 637.38 T
(uction) 361.59 637.38 T
(NPC) 150 627.38 T
(ne) 267 627.38 T
(xt PC v) 275.66 627.38 T
(alue) 301.24 627.38 T
(SET_NPC\050V\051) 150 617.38 T
(Set ne) 267 617.38 T
(xt PC to v) 289.89 617.38 T
(alue V) 324.37 617.38 T
(GPR\050N\051) 150 607.38 T
(Gener) 267 607.38 T
(al pur) 289.15 607.38 T
(pose register N) 309.4 607.38 T
(SET_GPR\050N,V\051) 150 597.38 T
(Set gener) 267 597.38 T
(al pur) 301.61 597.38 T
(pose register N to v) 321.86 597.38 T
(alue V) 391.02 597.38 T
(FPR_F\050N\051) 150 587.38 T
(Floating point register N single-precision v) 267 587.38 T
(alue) 415.74 587.38 T
(SET_FPR_F\050N,V\051) 150 577.38 T
(Set \337oating point register N to single-precision v) 267 577.38 T
(alue V) 436.2 577.38 T
(FPR_D\050N\051) 150 567.38 T
(Floating point register N doub) 267 567.38 T
(le-precision v) 371.78 567.38 T
(alue) 418.7 567.38 T
(SET_FPR_D\050N,V\051) 150 557.38 T
(Set \337oating point register N to doub) 267 557.38 T
(le-precision v) 392.24 557.38 T
(alue V) 439.16 557.38 T
(FPR_L\050N\051) 150 547.38 T
(Floating point register N liter) 267 547.38 T
(al w) 366.95 547.38 T
(ord v) 381.1 547.38 T
(alue) 398.68 547.38 T
(SET_FPR_L\050N,V\051) 150 537.38 T
(Set \337oating point register N to liter) 267 537.38 T
(al w) 387.42 537.38 T
(ord v) 401.56 537.38 T
(alue V) 419.14 537.38 T
(HI) 150 527.38 T
(High result register v) 267 527.38 T
(alue) 340.15 527.38 T
(SET_HI\050V\051) 150 517.38 T
(Set high result register to v) 267 517.38 T
(alue V) 361.95 517.38 T
(LO) 150 507.38 T
(Lo) 267 507.38 T
(w result register v) 275.78 507.38 T
(alue) 338.26 507.38 T
(SET_LO\050V\051) 150 497.38 T
(Set lo) 267 497.38 T
(w result register to v) 287.34 497.38 T
(alue V) 358.71 497.38 T
(READ_SIGNED_BYTE\050A\051) 150 487.38 T
(Read signed b) 267 487.38 T
(yte from address A) 318.42 487.38 T
(READ_UNSIGNED_BYTE\050A\051) 150 477.38 T
(Read unsigned b) 267 477.38 T
(yte from address A) 327.32 477.38 T
(WRITE_BYTE\050V) 150 467.38 T
(,A\051) 208.12 467.38 T
(Wr) 267 467.38 T
(ite b) 277.34 467.38 T
(yte v) 292.3 467.38 T
(alue V at address A) 308.99 467.38 T
(READ_SIGNED_HALF\050A\051) 150 457.38 T
(Read signed half from address A) 267 457.38 T
(READ_UNSIGNED_HALF\050A\051) 150 447.38 T
(Read unsigned half from address A) 267 447.38 T
(WRITE_HALF\050V) 150 437.38 T
(,A\051) 207.67 437.38 T
(Wr) 267 437.38 T
(ite half v) 277.34 437.38 T
(alue V at address A) 306.93 437.38 T
(READ_W) 150 427.38 T
(ORD\050A\051) 184.06 427.38 T
(Read w) 267 427.38 T
(ord from address A) 294.04 427.38 T
(WRITE_W) 150 417.38 T
(ORD\050V) 187.62 417.38 T
(,A\051) 212.39 417.38 T
(Wr) 267 417.38 T
(ite w) 277.34 417.38 T
(ord v) 293.7 417.38 T
(alue V at address A) 311.29 417.38 T
(T) 150 407.38 T
(ALIGN\050T\051) 153.93 407.38 T
(Chec) 267 407.38 T
(k target T is aligned to 8 b) 285.51 407.38 T
(yte boundar) 377.4 407.38 T
(y) 419.89 407.38 T
(FP) 150 397.38 T
(ALIGN\050N\051) 159.26 397.38 T
(Chec) 267 397.38 T
(k register N is wholly divisib) 285.51 397.38 T
(le b) 383.14 397.38 T
(y 2) 395.88 397.38 T
(O) 150 387.38 T
(VER\050X,Y\051) 155.82 387.38 T
(Chec) 267 387.38 T
(k f) 285.51 387.38 T
(or o) 293.72 387.38 T
(v) 307.38 387.38 T
(er\337o) 311.18 387.38 T
(w when adding X to Y) 326.62 387.38 T
(UNDER\050X,Y\051) 150 377.38 T
(Chec) 267 377.38 T
(k f) 285.51 377.38 T
(or o) 293.72 377.38 T
(v) 307.38 377.38 T
(er\337o) 311.18 377.38 T
(w when subtr) 326.62 377.38 T
(action Y from X) 373.67 377.38 T
(DIV0\050V\051) 150 367.38 T
(Chec) 267 367.38 T
(k f) 285.51 367.38 T
(or division b) 293.72 367.38 T
(y z) 336.24 367.38 T
(ero error with divisor V) 346.34 367.38 T
6 10 Q
(T) 218.09 351.05 T
(ab) 223.4 351.05 T
(le 3: Operator/operand semantics) 234.97 351.05 T
144 717.34 144 364.09 2 L
V
0.75 H
0 Z
N
261 718.09 261 363.34 2 L
V
N
468 717.34 468 364.09 2 L
V
N
143.62 717.71 468.38 717.71 2 L
V
N
144.38 704.96 467.62 704.96 2 L
V
0.5 H
N
144.38 702.46 467.62 702.46 2 L
V
N
143.62 693.71 468.38 693.71 2 L
V
0.75 H
N
143.62 683.71 468.38 683.71 2 L
V
N
143.62 673.71 468.38 673.71 2 L
V
N
143.62 663.71 468.38 663.71 2 L
V
N
143.62 653.71 468.38 653.71 2 L
V
N
143.62 643.71 468.38 643.71 2 L
V
N
143.62 633.71 468.38 633.71 2 L
V
N
143.62 623.71 468.38 623.71 2 L
V
N
143.62 613.71 468.38 613.71 2 L
V
N
143.62 603.71 468.38 603.71 2 L
V
N
143.62 593.71 468.38 593.71 2 L
V
N
143.62 583.71 468.38 583.71 2 L
V
N
143.62 573.71 468.38 573.71 2 L
V
N
143.62 563.71 468.38 563.71 2 L
V
N
143.62 553.71 468.38 553.71 2 L
V
N
143.62 543.71 468.38 543.71 2 L
V
N
143.62 533.71 468.38 533.71 2 L
V
N
143.62 523.71 468.38 523.71 2 L
V
N
143.62 513.71 468.38 513.71 2 L
V
N
143.62 503.71 468.38 503.71 2 L
V
N
143.62 493.71 468.38 493.71 2 L
V
N
143.62 483.71 468.38 483.71 2 L
V
N
143.62 473.71 468.38 473.71 2 L
V
N
143.62 463.71 468.38 463.71 2 L
V
N
143.62 453.71 468.38 453.71 2 L
V
N
143.62 443.71 468.38 443.71 2 L
V
N
143.62 433.71 468.38 433.71 2 L
V
N
143.62 423.71 468.38 423.71 2 L
V
N
143.62 413.71 468.38 413.71 2 L
V
N
143.62 403.71 468.38 403.71 2 L
V
N
143.62 393.71 468.38 393.71 2 L
V
N
143.62 383.71 468.38 383.71 2 L
V
N
143.62 373.71 468.38 373.71 2 L
V
N
143.62 363.71 468.38 363.71 2 L
V
N
60 347 552.86 347 2 L
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(15) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(F) 72 713.74 T
(ormat:) 76.87 713.74 T
(LH rt,\050rs+rd\051 inc_dec) 131.98 713.74 T
(Semantics:) 71.98 703.74 T
2 8 Q
(SET_GPR\050R) 131.98 703.74 T
(T) 173.28 703.74 T
(,) 177.58 703.74 T
(READ_SIGNED_HALF\050GPR\050RS\051+GPR\050RD\051\051\051) 131.98 693.74 T
0 9 Q
(LHU) 59.98 672.74 T
2 F
(:) 79.48 672.74 T
(Load half unsigned, displaced addressing.) 131.98 672.74 T
(Opcode:) 72 661.74 T
(0x26) 131.98 661.74 T
(F) 72 651.74 T
(ormat:) 76.87 651.74 T
(LHU rt,of) 131.98 651.74 T
(fset\050rs\051 inc_dec) 167.74 651.74 T
(Semantics:) 71.98 641.74 T
2 8 Q
(SET_GPR\050R) 131.98 641.74 T
(T) 173.28 641.74 T
(,) 177.58 641.74 T
(READ_UNSIGNED_HALF\050GPR\050RS\051+OFF-) 131.98 631.74 T
(SET\051\051) 131.98 621.74 T
0 9 Q
(LHU) 59.98 600.74 T
2 F
(:) 79.48 600.74 T
(Load half unsigned, inde) 131.98 600.74 T
(x) 221.33 600.74 T
(ed addressing.) 225.69 600.74 T
(Opcode:) 72 589.74 T
(0xc3) 131.98 589.74 T
(F) 72 579.74 T
(ormat:) 76.87 579.74 T
(LHU rt,\050rs+rd\051 inc_dec) 131.98 579.74 T
(Semantics:) 71.98 569.74 T
2 8 Q
(SET_GPR\050R) 131.98 569.74 T
(T) 173.28 569.74 T
(,) 177.58 569.74 T
(READ_UNSIGNED_HALF\050GPR\050RS\051+GPR\050RD\051) 131.98 559.74 T
(\051\051) 131.98 549.74 T
0 9 Q
(L) 59.98 528.74 T
(W) 65.15 528.74 T
2 F
(:) 73.82 528.74 T
(Load w) 131.98 528.74 T
(ord, displaced addressing.) 159.13 528.74 T
(Opcode:) 72 517.74 T
(0x28) 131.98 517.74 T
(F) 72 507.74 T
(ormat:) 76.87 507.74 T
(L) 131.98 507.74 T
(W rt,of) 136.81 507.74 T
(fset\050rs\051 inc_dec) 162.58 507.74 T
(Semantics:) 71.98 497.74 T
2 8 Q
(SET_GPR\050R) 131.98 497.74 T
(T) 173.28 497.74 T
(, READ_W) 177.58 497.74 T
(ORD\050GPR\050RS\051+OFF-) 214.82 497.74 T
(SET\051\051) 131.98 487.74 T
0 9 Q
(L) 59.98 466.74 T
(W) 65.15 466.74 T
2 F
(:) 73.82 466.74 T
(Load w) 131.98 466.74 T
(ord, inde) 159.13 466.74 T
(x) 190.99 466.74 T
(ed addressing.) 195.35 466.74 T
(Opcode:) 72 455.74 T
(0xc4) 131.98 455.74 T
(F) 72 445.74 T
(ormat:) 76.87 445.74 T
(L) 131.98 445.74 T
(W rt,\050rs+rd\051 inc_dec) 136.81 445.74 T
(Semantics:) 71.98 435.74 T
2 8 Q
(SET_GPR\050R) 131.98 435.74 T
(T) 173.28 435.74 T
(,) 177.58 435.74 T
(READ_W) 131.98 425.74 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 165.22 425.74 T
0 9 Q
(DL) 59.98 404.74 T
(W) 71.65 404.74 T
2 F
(:) 80.32 404.74 T
(Double load w) 131.98 404.74 T
(ord, displaced addressing.) 184.88 404.74 T
(Opcode:) 72 393.74 T
(0x29) 131.98 393.74 T
(F) 72 383.74 T
(ormat:) 76.87 383.74 T
(DL) 131.98 383.74 T
(W rt,of) 143.31 383.74 T
(fset\050rs\051 inc_dec) 169.07 383.74 T
(Semantics:) 71.98 373.74 T
2 8 Q
(SET_GPR\050R) 131.98 373.74 T
(T) 173.28 373.74 T
(, READ_W) 177.58 373.74 T
(ORD\050GPR\050RS\051+OFF-) 214.82 373.74 T
(SET\051\051) 131.98 363.74 T
(SET_GPR\050R) 131.98 354.4 T
(T+1,) 173.28 354.4 T
(READ_W) 131.98 345.4 T
(ORD\050GPR\050RS\051+OFFSET+4\051\051) 165.22 345.4 T
0 9 Q
(DL) 59.98 324.74 T
(W) 71.65 324.74 T
2 F
(:) 80.32 324.74 T
(Double load w) 131.98 324.74 T
(ord, inde) 184.88 324.74 T
(x) 216.74 324.74 T
(ed addressing.) 221.1 324.74 T
(Opcode:) 72 313.74 T
(0xce) 131.98 313.74 T
(F) 72 303.74 T
(ormat:) 76.87 303.74 T
(DL) 131.98 303.74 T
(W rt,\050rs+rd\051 inc_dec) 143.31 303.74 T
(Semantics:) 71.98 293.74 T
2 8 Q
(SET_GPR\050R) 131.98 293.74 T
(T) 173.28 293.74 T
(,) 177.58 293.74 T
(READ_W) 131.98 283.74 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 165.22 283.74 T
(SET_GPR\050R) 131.98 274.41 T
(T+1,) 173.28 274.41 T
(READ_W) 131.98 265.41 T
(ORD\050GPR\050RS\051+GPR\050RD\051+4\051\051) 165.22 265.41 T
0 9 Q
(L.S) 59.98 244.74 T
2 F
(:) 73.23 244.74 T
1.83 (Load w) 131.98 244.74 P
1.83 (ord into \337oating point re) 160.96 244.74 P
1.83 (gister \336le,) 256.15 244.74 P
(displaced addressing.) 131.98 233.74 T
(Opcode:) 72 222.74 T
(0x2a) 131.98 222.74 T
(F) 72 212.74 T
(ormat:) 76.87 212.74 T
(L.S ft,of) 131.98 212.74 T
(fset\050rs\051 inc_dec) 162 212.74 T
(Semantics:) 71.98 202.74 T
2 8 Q
-0.07 (SET_FPR_L\050FT) 131.98 202.74 P
-0.07 (, READ_W) 184.73 202.74 P
-0.07 (ORD\050GPR\050RS\051+OFF-) 221.9 202.74 P
(SET\051\051) 131.98 192.74 T
0 9 Q
(L.S) 59.98 171.74 T
2 F
(:) 73.23 171.74 T
1.83 (Load w) 131.98 171.74 P
1.83 (ord into \337oating point re) 160.96 171.74 P
1.83 (gister \336le,) 256.15 171.74 P
(inde) 131.98 160.74 T
(x) 147.34 160.74 T
(ed addressing.) 151.7 160.74 T
(Opcode:) 72 149.74 T
(0xc5) 131.98 149.74 T
(F) 72 139.74 T
(ormat:) 76.87 139.74 T
(L.S ft,\050rs+rd\051 inc_dec) 131.98 139.74 T
(Semantics:) 71.98 129.74 T
2 8 Q
(SET_FPR_L\050R) 131.98 129.74 T
(T) 180.84 129.74 T
(,) 185.14 129.74 T
(READ_W) 131.98 119.74 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 165.22 119.74 T
0 9 Q
(L.D) 59.98 98.74 T
2 F
(:) 74.73 98.74 T
0.04 (Load double w) 131.98 98.74 P
0.04 (ord into \337oating point re) 185.96 98.74 P
0.04 (gister) 273.98 98.74 P
(\336le, displaced addressing.) 131.98 87.74 T
(Opcode:) 72 76.74 T
(0x2b) 131.98 76.74 T
(F) 330.02 713.74 T
(ormat:) 334.89 713.74 T
(L.D ft,of) 390 713.74 T
(fset\050rs\051 inc_dec) 421.52 713.74 T
(Semantics:) 330 703.74 T
2 8 Q
-0.07 (SET_FPR_L\050FT) 390 703.74 P
-0.07 (, READ_W) 442.75 703.74 P
-0.07 (ORD\050GPR\050RS\051+OFF-) 479.93 703.74 P
(SET\051\051) 390 693.74 T
(SET_FPR_L\050FT+1,) 390 684.41 T
(READ_W) 390 675.41 T
(ORD\050GPR\050RS\051+OFFSET+4\051\051) 423.25 675.41 T
0 9 Q
(L.D) 318 654.74 T
2 F
(:) 332.75 654.74 T
0.04 (Load double w) 390 654.74 P
0.04 (ord into \337oating point re) 443.98 654.74 P
0.04 (gister) 532 654.74 P
(\336le, inde) 390 643.74 T
(x) 421.36 643.74 T
(ed addressing.) 425.73 643.74 T
(Opcode:) 330.02 632.74 T
(0xcf) 390 632.74 T
(F) 330.02 622.74 T
(ormat:) 334.89 622.74 T
(L.D ft,\050rs+rd\051 inc_dec) 390 622.74 T
(Semantics:) 330 612.74 T
2 8 Q
(SET_FPR_L\050R) 390 612.74 T
(T) 438.86 612.74 T
(,) 443.16 612.74 T
(READ_W) 390 602.74 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 423.25 602.74 T
(SET_FPR_L\050R) 390 593.41 T
(T+1,) 438.86 593.41 T
(READ_W) 390 584.41 T
(ORD\050GPR\050RS\051+GPR\050RD\051+4\051\051) 423.25 584.41 T
0 9 Q
(L) 318 563.74 T
(WL) 323.17 563.74 T
2 F
(:) 338.18 563.74 T
(Load w) 390 563.74 T
(ord left, displaced addressing.) 417.15 563.74 T
(Opcode:) 330.02 552.74 T
(0x2c) 390 552.74 T
(F) 330.02 542.74 T
(ormat:) 334.89 542.74 T
(L) 390 542.74 T
(WL of) 394.83 542.74 T
(fset\050rs\051) 418.35 542.74 T
(Semantics:) 330 532.74 T
-0.61 (See) 390 532.74 P
1 F
-1.46 (ss.def) 404.64 532.74 P
2 F
-0.61 ( for a detailed description of this) 437.04 532.74 P
-1.12 (instruction\325) 390 522.74 P
-1.12 (s semantics. NO) 431 522.74 P
-1.12 (TE: L) 487.15 522.74 P
-1.12 (WL does not) 506.61 522.74 P
(support pre-/post- inc/dec.) 390 512.74 T
0 F
(L) 318 491.74 T
(WR) 323.17 491.74 T
2 F
(:) 338.67 491.74 T
(Load w) 390 491.74 T
(ord right, displaced addressing.) 417.15 491.74 T
(Opcode:) 330.02 480.74 T
(0x2d) 390 480.74 T
(F) 330.02 470.74 T
(ormat:) 334.89 470.74 T
(L) 390 470.74 T
(WR of) 394.83 470.74 T
(fset\050rs\051) 418.85 470.74 T
(Semantics:) 330 460.74 T
-0.85 (See) 390 460.74 P
1 F
-2.05 (ss.def) 404.39 460.74 P
2 F
-0.85 (for a detailed description of this) 440.14 460.74 P
-1.2 (instruction\325) 390 450.74 P
-1.2 (s semantics. NO) 431 450.74 P
-1.2 (TE: L) 486.98 450.74 P
-1.2 (WR does not) 506.36 450.74 P
(support pre-/post- inc/dec.) 390 440.74 T
0 F
(SB) 318 419.74 T
2 F
(:) 329.01 419.74 T
(Store byte, displaced addressing.) 390 419.74 T
(Opcode:) 330.02 408.74 T
(0x30) 390 408.74 T
(F) 330.02 398.74 T
(ormat:) 334.89 398.74 T
(SB rt,of) 390 398.74 T
(fset\050rs\051 inc_dec) 418.28 398.74 T
(Semantics:) 330 388.74 T
2 8 Q
(WRITE_BYTE\050GPR\050R) 390 388.74 T
(T\051, GPR\050RS\051+OFFSET\051) 465.96 388.74 T
0 9 Q
(SB) 318 367.74 T
2 F
(:) 329.01 367.74 T
(Store byte, inde) 390 367.74 T
(x) 446.61 367.74 T
(ed addressing.) 450.98 367.74 T
(Opcode:) 330.02 356.74 T
(0xc6) 390 356.74 T
(F) 330.02 346.74 T
(ormat:) 334.89 346.74 T
(SB rt,\050rs+rd\051 inc_dec) 390 346.74 T
(Semantics:) 330 336.74 T
2 8 Q
(WRITE_BYTE\050GPR\050R) 390 336.74 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 465.96 336.74 T
0 9 Q
(SH) 318 315.74 T
2 F
(:) 330.01 315.74 T
(Store half, displaced addressing.) 390 315.74 T
(Opcode:) 330.02 304.74 T
(0x32) 390 304.74 T
(F) 330.02 294.74 T
(ormat:) 334.89 294.74 T
(SH rt,of) 390 294.74 T
(fset\050rs\051 inc_dec) 418.77 294.74 T
(Semantics:) 330.02 284.74 T
2 8 Q
(WRITE_HALF\050GPR\050R) 390 284.74 T
(T\051, GPR\050RS\051+OFFSET\051) 465.96 284.74 T
0 9 Q
(SH) 318 263.74 T
2 F
(:) 330.01 263.74 T
(Store half, inde) 390 263.74 T
(x) 445.11 263.74 T
(ed addressing.) 449.47 263.74 T
(Opcode:) 330.02 252.74 T
(0xc7) 390 252.74 T
(F) 330.02 242.74 T
(ormat:) 334.89 242.74 T
(SH rt,\050rs+rd\051 inc_dec) 390 242.74 T
(Semantics:) 330 232.74 T
2 8 Q
(WRITE_HALF\050GPR\050R) 390 232.74 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 465.96 232.74 T
0 9 Q
(SW) 318 211.74 T
2 F
(:) 331.67 211.74 T
(Store w) 390 211.74 T
(ord, displaced addressing.) 417.66 211.74 T
(Opcode:) 330.02 200.74 T
(0x34) 390 200.74 T
(F) 330.02 190.74 T
(ormat:) 334.89 190.74 T
(SW rt,of) 390 190.74 T
(fset\050rs\051 inc_dec) 420.77 190.74 T
(Semantics:) 330 180.74 T
2 8 Q
(WRITE_W) 390 180.74 T
(ORD\050GPR\050R) 426.8 180.74 T
(T\051, GPR\050RS\051+OFFSET\051) 469.43 180.74 T
0 9 Q
(SW) 318 159.74 T
2 F
(:) 331.67 159.74 T
(Store w) 390 159.74 T
(ord, inde) 417.66 159.74 T
(x) 449.52 159.74 T
(ed addressing.) 453.88 159.74 T
(Opcode:) 330.02 148.74 T
(0xc8) 390 148.74 T
(F) 330.02 138.74 T
(ormat:) 334.89 138.74 T
(SW rt,\050rs+rd\051 inc_dec) 390 138.74 T
(Semantics:) 330 128.74 T
2 8 Q
(WRITE_W) 390 128.74 T
(ORD\050GPR\050R) 426.8 128.74 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 469.43 128.74 T
0 9 Q
(DSW) 318 107.74 T
2 F
(:) 338.17 107.74 T
(Double store w) 390 107.74 T
(ord, displaced addressing.) 444.9 107.74 T
(Opcode:) 330.02 96.74 T
(0x35) 390 96.74 T
(F) 330.02 86.74 T
(ormat:) 334.89 86.74 T
(DSW rt,of) 390 86.74 T
(fset\050rs\051 inc_dec) 427.27 86.74 T
(Semantics:) 330 76.74 T
2 8 Q
(WRITE_W) 390 76.74 T
(ORD\050GPR\050R) 426.8 76.74 T
(T\051, GPR\050RS\051+OFFSET\051) 469.43 76.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(16) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 8 Q
(WRITE_W) 131.98 714.41 T
(ORD\050GPR\050R) 168.78 714.41 T
(T+1\051, GPR\050RS\051+OFF-) 211.41 714.41 T
(SET+4\051) 131.98 705.41 T
0 9 Q
(DSW) 59.98 684.74 T
2 F
(:) 80.14 684.74 T
(Double store w) 131.98 684.74 T
(ord, inde) 186.88 684.74 T
(x) 218.74 684.74 T
(ed addressing.) 223.1 684.74 T
(Opcode:) 72 673.74 T
(0xd0) 131.98 673.74 T
(F) 72 663.74 T
(ormat:) 76.87 663.74 T
(DSW rt,\050rs+rd\051 inc_dec) 131.98 663.74 T
(Semantics:) 71.98 653.74 T
2 8 Q
(WRITE_W) 131.98 653.74 T
(ORD\050GPR\050R) 168.78 653.74 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 211.41 653.74 T
(WRITE_W) 131.98 644.41 T
(ORD\050GPR\050R) 168.78 644.41 T
(T+1\051,) 211.41 644.41 T
(GPR\050RS\051+GPR\050RD\051+4\051) 131.98 635.41 T
0 9 Q
(DSZ) 59.98 614.74 T
2 F
(:) 77.48 614.74 T
(Double store zero, displaced addressing.) 131.98 614.74 T
(Opcode:) 72 603.74 T
(0x38) 131.98 603.74 T
(F) 72 593.74 T
(ormat:) 76.87 593.74 T
(DSW rt,of) 131.98 593.74 T
(fset\050rs\051 inc_dec) 169.24 593.74 T
(Semantics:) 72 583.74 T
2 8 Q
(WRITE_W) 131.98 583.74 T
(ORD\0500, GPR\050RS\051+OFFSET\051) 168.78 583.74 T
(WRITE_W) 131.98 574.41 T
(ORD\0500, GPR\050RS\051+OFFSET+4\051) 168.78 574.41 T
0 9 Q
(DSZ) 59.98 553.74 T
2 F
(:) 77.48 553.74 T
(Double store zero, inde) 131.98 553.74 T
(x) 215.82 553.74 T
(ed addressing.) 220.18 553.74 T
(Opcode:) 72 542.74 T
(0xd1) 131.98 542.74 T
(F) 72 532.74 T
(ormat:) 76.87 532.74 T
(DSW rt,\050rs+rd\051 inc_dec) 131.98 532.74 T
(Semantics:) 71.98 522.74 T
2 8 Q
(WRITE_W) 131.98 522.74 T
(ORD\0500, GPR\050RS\051+GPR\050RD\051\051) 168.78 522.74 T
(WRITE_W) 131.98 513.41 T
(ORD\0500, GPR\050RS\051+GPR\050RD\051+4\051) 168.78 513.41 T
0 9 Q
(S.S) 59.98 492.74 T
2 F
(:) 72.23 492.74 T
1.16 (Store w) 131.98 492.74 P
1.16 (ord from \337oating point re) 160.8 492.74 P
1.16 (gister \336le,) 256.81 492.74 P
(displaced addressing.) 131.98 481.74 T
(Opcode:) 72 470.74 T
(0x36) 131.98 470.74 T
(F) 72 460.74 T
(ormat:) 76.87 460.74 T
(S.S ft,of) 131.98 460.74 T
(fset\050rs\051 inc_dec) 161.51 460.74 T
(Semantics:) 71.98 450.74 T
2 8 Q
(WRITE_W) 131.98 450.74 T
(ORD\050FPR_L\050FT\051, GPR\050RS\051+OFF-) 168.78 450.74 T
(SET\051) 131.98 440.74 T
0 9 Q
(S.S) 59.98 419.74 T
2 F
(:) 72.23 419.74 T
1.16 (Store w) 131.98 419.74 P
1.16 (ord from \337oating point re) 160.8 419.74 P
1.16 (gister \336le,) 256.81 419.74 P
(inde) 131.98 408.74 T
(x) 147.34 408.74 T
(ed addressing.) 151.7 408.74 T
(Opcode:) 72 397.74 T
(0xc9) 131.98 397.74 T
(F) 72 387.74 T
(ormat:) 76.87 387.74 T
(S.S ft,\050rs+rd\051 inc_dec) 131.98 387.74 T
(Semantics:) 71.98 377.74 T
2 8 Q
(WRITE_W) 131.98 377.74 T
(ORD\050FPR_L\050FT\051,) 168.78 377.74 T
(GPR\050RS\051+GPR\050RD\051\051) 131.98 367.74 T
0 9 Q
(S.D) 59.98 346.74 T
2 F
(:) 73.73 346.74 T
0.46 (Store double w) 131.98 346.74 P
0.46 (ord from \337oating point re) 187.29 346.74 P
0.46 (gis-) 280.48 346.74 P
(ter \336le, displaced addressing.) 131.98 335.74 T
(Opcode:) 72 324.74 T
(0x37) 131.98 324.74 T
(F) 72 314.74 T
(ormat:) 76.87 314.74 T
(S.D ft,of) 131.98 314.74 T
(fset\050rs\051 inc_dec) 163 314.74 T
(Semantics:) 71.98 304.74 T
2 8 Q
(WRITE_W) 131.98 304.74 T
(ORD\050FPR_L\050FT\051, GPR\050RS\051+OFF-) 168.78 304.74 T
(SET\051) 131.98 294.74 T
(WRITE_W) 131.98 285.4 T
(ORD\050FPR_L\050FT+1\051, GPR\050RS\051+OFF-) 168.78 285.4 T
(SET+4\051) 131.98 276.41 T
0 9 Q
(S.D) 59.98 255.74 T
2 F
(:) 73.73 255.74 T
0.46 (Store double w) 131.98 255.74 P
0.46 (ord from \337oating point re) 187.29 255.74 P
0.46 (gis-) 280.48 255.74 P
(ter \336le, inde) 131.98 244.74 T
(x) 175.09 244.74 T
(ed addressing.) 179.45 244.74 T
(Opcode:) 72 233.74 T
(0xd2) 131.98 233.74 T
(F) 72 223.74 T
(ormat:) 76.87 223.74 T
(S.D ft,\050rs+rd\051 inc_dec) 131.98 223.74 T
(Semantics:) 71.98 213.74 T
2 8 Q
(WRITE_W) 131.98 213.74 T
(ORD\050FPR_L\050FT\051,) 168.78 213.74 T
(GPR\050RS\051+GPR\050RD\051\051) 131.98 203.74 T
(WRITE_W) 131.98 194.41 T
(ORD\050FPR_L\050FT+1\051,) 168.78 194.41 T
(GPR\050RS\051+GPR\050RD\051+4\051) 131.98 185.41 T
0 9 Q
(SWL) 59.98 164.74 T
2 F
(:) 79.98 164.74 T
(Store w) 131.98 164.74 T
(ord left, displaced addressing.) 159.63 164.74 T
(Opcode:) 72 153.74 T
(0x39) 131.98 153.74 T
(F) 72 143.74 T
(ormat:) 76.87 143.74 T
(SWL rt,of) 131.98 143.74 T
(fset\050rs\051) 168.25 143.74 T
(Semantics:) 71.98 133.74 T
-0.85 (See) 131.98 133.74 P
1 F
-2.05 (ss.def) 146.37 133.74 P
2 F
-0.85 (for a detailed description of this) 182.12 133.74 P
-1.15 (instruction\325) 131.98 123.74 P
-1.15 (s semantics. NO) 172.98 123.74 P
-1.15 (TE: SWL does not) 229.07 123.74 P
(support pre-/post- inc/dec.) 131.98 113.74 T
0 F
(SWR) 59.98 93.74 T
2 F
(:) 80.48 93.74 T
(Store w) 131.98 93.74 T
(ord right, displaced addressing.) 159.63 93.74 T
(Opcode:) 72 82.74 T
(0x3a) 131.98 82.74 T
(F) 330.02 713.74 T
(ormat:) 334.89 713.74 T
(SWR rt,of) 390 713.74 T
(fset\050rs\051) 426.77 713.74 T
(Semantics:) 330 703.74 T
-0.61 (See) 390 703.74 P
1 F
-1.46 (ss.def) 404.64 703.74 P
2 F
-0.61 ( for a detailed description of this) 437.04 703.74 P
-1.23 (instruction\325) 390 693.74 P
-1.23 (s semantics. NO) 431 693.74 P
-1.23 (TE: SWR does not) 486.92 693.74 P
(support pre-/post- inc/dec.) 390 683.74 T
0 11 Q
(A.3 Integer instructions) 318 661.41 T
0 9 Q
(ADD) 318 644.74 T
2 F
(:) 337.49 644.74 T
(Add signed \050with o) 390 644.74 T
(v) 459.11 644.74 T
(er\337o) 463.48 644.74 T
(w check\051.) 479.75 644.74 T
(Opcode:) 330.02 633.74 T
(0x40) 390 633.74 T
(F) 330.02 623.74 T
(ormat:) 334.89 623.74 T
(ADD rd,rs,rt) 390 623.74 T
(Semantics:) 330.02 613.74 T
2 8 Q
(O) 390 613.74 T
(VER\050GPR\050R) 395.38 613.74 T
(T\051,GPR\050R) 437.12 613.74 T
(T\051\051) 469.75 613.74 T
(SET_GPR\050RD, GPR\050RS\051 + GPR\050R) 390 604.41 T
(T\051\051) 503.82 604.41 T
0 9 Q
(ADDI) 318 583.74 T
2 F
(:) 340.99 583.74 T
6.38 (Add immediate signed \050with o) 390 583.74 P
6.38 (v) 524.86 583.74 P
6.38 (er\337o) 529.23 583.74 P
6.38 (w) 545.5 583.74 P
(check\051.) 318 572.74 T
(Opcode:) 330.02 561.74 T
(0x41) 390 561.74 T
(F) 330.02 551.74 T
(ormat:) 334.89 551.74 T
(ADDI rd,rs,rt) 390 551.74 T
(Semantics:) 330.02 541.74 T
2 8 Q
(O) 390 541.74 T
(VER\050GPR\050RS\051,IMM\051) 395.38 541.74 T
(SET_GPR\050R) 390 532.41 T
(T) 431.3 532.41 T
(, GPR\050RS\051 + IMM\051) 435.6 532.41 T
0 9 Q
(ADDU) 318 511.74 T
2 F
(:) 343.99 511.74 T
(Add unsigned \050no o) 390 511.74 T
(v) 461.11 511.74 T
(er\337o) 465.47 511.74 T
(w check\051.) 481.75 511.74 T
(Opcode:) 330.02 500.74 T
(0x42) 390 500.74 T
(F) 330.02 490.74 T
(ormat:) 334.89 490.74 T
(ADDU rd,rs,rt) 390 490.74 T
(Semantics:) 330.02 480.74 T
2 8 Q
(SET_GPR\050RD, GPR\050RS\051 + GPR\050R) 390 480.74 T
(T\051\051) 503.82 480.74 T
0 9 Q
(ADDIU) 318 459.74 T
2 F
(:) 347.49 459.74 T
(Add immediate unsigned \050no o) 390 459.74 T
(v) 501.36 459.74 T
(er\337o) 505.72 459.74 T
(w) 521.99 459.74 T
(check\051.) 318 448.74 T
(Opcode:) 330.02 437.74 T
(0x43) 390 437.74 T
(F) 330.02 427.74 T
(ormat:) 334.89 427.74 T
(ADDIU rd,rs,rt) 390 427.74 T
(Semantics:) 330.02 417.74 T
2 8 Q
(SET_GPR\050R) 390 417.74 T
(T) 431.3 417.74 T
(, GPR\050RS\051 + IMM\051) 435.6 417.74 T
0 9 Q
(SUB) 318 396.74 T
2 F
(:) 335.51 396.74 T
(Subtract signed \050with under\337o) 390 396.74 T
(w check\051.) 499.02 396.74 T
(Opcode:) 330.02 385.74 T
(0x44) 390 385.74 T
(F) 330.02 375.74 T
(ormat:) 334.89 375.74 T
(SUB rd,rs,rt) 390 375.74 T
(Semantics:) 330.02 365.74 T
2 8 Q
(UNDER\050GPR\050RS\051,GPR\050R) 390 365.74 T
(T\051\051) 475.97 365.74 T
(SET_GPR\050RD, GPR\050RS\051 - GPR\050R) 390 356.4 T
(T\051\051) 501.98 356.4 T
0 9 Q
(SUB) 318 335.74 T
(U) 335.42 335.74 T
2 F
(:) 341.91 335.74 T
(Subtract unsigned \050without under\337o) 390 335.74 T
(w) 519.52 335.74 T
(check\051.) 318 324.74 T
(Opcode:) 330.02 313.74 T
(0x45) 390 313.74 T
(F) 330.02 303.74 T
(ormat:) 334.89 303.74 T
(SUB) 390 303.74 T
(U rd,rs,rt) 407.42 303.74 T
(Semantics:) 330.02 293.74 T
2 8 Q
(SET_GPR\050RD, GPR\050RS\051 - GPR\050R) 390 293.74 T
(T\051\051) 501.98 293.74 T
0 9 Q
(MUL) 318 272.74 T
(T) 338.17 272.74 T
2 F
(:) 343.72 272.74 T
(Multiply signed.) 390 272.74 T
(Opcode:) 330.02 261.74 T
(0x46) 390 261.74 T
(F) 330.02 251.74 T
(ormat:) 334.89 251.74 T
(MUL) 390 251.74 T
(T rs,rt) 409.17 251.74 T
(Semantics:) 330.02 241.74 T
2 8 Q
(SET_HI\050\050RS * R) 390 241.74 T
(T\051 / \0501<<32\051\051) 444.63 241.74 T
(SET_LO\050\050RS * R) 390 232.41 T
(T\051 % \0501<<32\051\051) 446.86 232.41 T
0 9 Q
(MUL) 318 211.74 T
(TU) 338.17 211.74 T
2 F
(:) 350.67 211.74 T
(Multiply unsigned.) 390 211.74 T
(Opcode:) 330.02 200.74 T
(0x47) 390 200.74 T
(F) 330.02 190.74 T
(ormat:) 334.89 190.74 T
(MUL) 390 190.74 T
(TU rs,rt) 409.17 190.74 T
(Semantics:) 330 180.74 T
2 8 Q
(SET_HI\050\050\050unsigned\051RS * \050unsigned\051R) 390 180.74 T
(T\051/\0501<<32\051\051) 513.06 180.74 T
(SET_LO\050\050\050unsigned\051RS*\050unsigned\051R) 390 170.74 T
(T\051 %) 511.29 170.74 T
(\0501<<32\051\051) 390 160.74 T
0 9 Q
(DIV) 318 139.74 T
2 F
(:) 333.83 139.74 T
(Di) 390 139.74 T
(vide signed.) 398.77 139.74 T
(Opcode:) 330.02 128.74 T
(0x48) 390 128.74 T
(F) 330.02 118.74 T
(ormat:) 334.89 118.74 T
(DIV rs,rt) 390 118.74 T
(Semantics:) 330.02 108.74 T
2 8 Q
(DIV0\050GPR\050R) 390 108.74 T
(T\051\051) 433.96 108.74 T
(SET_LO\050GPR\050RS\051 / GPR\050R) 390 99.41 T
(T\051\051) 481.53 99.41 T
(SET_HI\050GPR\050RS\051 % GPR\050R) 390 90.41 T
(T\051\051) 483.74 90.41 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(17) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(DIVU) 59.98 713.74 T
2 F
(Di) 131.98 713.74 T
(vide unsigned.) 140.75 713.74 T
(Opcode:) 72 702.74 T
(0x49) 131.98 702.74 T
(F) 72 692.74 T
(ormat:) 76.87 692.74 T
(DIVU rs,rt) 131.98 692.74 T
(Semantics:) 72 682.74 T
2 8 Q
(DIV0\050GPR\050R) 131.98 682.74 T
(T\051\051) 175.94 682.74 T
(SET_LO\050\050unsigned\051GPR\050RS\051/) 131.98 673.41 T
(\050unsigned\051GPR\050R) 131.98 664.41 T
(T\051\051) 189.27 664.41 T
(SET_HI\050\050unsigned\051GPR\050RS\051%\050unsigned\051GPR\050R) 131.98 655.41 T
(T\051\051) 131.98 646.41 T
0 9 Q
(MFHI) 59.98 625.74 T
2 F
(:) 84.47 625.74 T
(Mo) 131.98 625.74 T
(v) 144.34 625.74 T
(e from HI re) 148.71 625.74 T
(gister) 193.3 625.74 T
(.) 212.8 625.74 T
(Opcode:) 72 614.74 T
(0x4a) 131.98 614.74 T
(F) 72 604.74 T
(ormat:) 76.87 604.74 T
(MFHI rd) 131.98 604.74 T
(Semantics:) 72 594.74 T
2 8 Q
(SET_GPR\050RD, HI\051) 131.98 594.74 T
0 9 Q
(MTHI) 59.98 573.74 T
2 F
(:) 84.98 573.74 T
(Mo) 131.98 573.74 T
(v) 144.34 573.74 T
(e to HI re) 148.71 573.74 T
(gister) 182.81 573.74 T
(.) 202.31 573.74 T
(Opcode:) 72 562.74 T
(0x4b) 131.98 562.74 T
(F) 72 552.74 T
(ormat:) 76.87 552.74 T
(MTHI rs) 131.98 552.74 T
(Semantics:) 72 542.74 T
2 8 Q
(SET_HI\050GPR\050RS\051\051) 131.98 542.74 T
0 9 Q
(MFLO) 59.98 521.74 T
2 F
(:) 86.98 521.74 T
(Mo) 131.98 521.74 T
(v) 144.34 521.74 T
(e from LO re) 148.71 521.74 T
(gister) 195.8 521.74 T
(.) 215.31 521.74 T
(Opcode:) 72 510.74 T
(0x4c) 131.98 510.74 T
(F) 72 500.74 T
(ormat:) 76.87 500.74 T
(MFLO rd) 131.98 500.74 T
(Semantics:) 72 490.74 T
2 8 Q
(SET_GPR\050RD, LO\051) 131.98 490.74 T
0 9 Q
(MTLO) 59.98 469.74 T
2 F
(:) 87.48 469.74 T
(Mo) 131.98 469.74 T
(v) 144.34 469.74 T
(e to LO re) 148.71 469.74 T
(gister) 185.31 469.74 T
(.) 204.81 469.74 T
(Opcode:) 72 458.74 T
(0x4d) 131.98 458.74 T
(F) 72 448.74 T
(ormat:) 76.87 448.74 T
(MTLO rs) 131.98 448.74 T
(Semantics:) 72 438.74 T
2 8 Q
(SET_LO\050GPR\050RS\051\051) 131.98 438.74 T
0 9 Q
(AND) 59.98 417.74 T
2 F
(:) 79.47 417.74 T
(Logical AND.) 131.98 417.74 T
(Opcode:) 72 406.74 T
(0x4e) 131.98 406.74 T
(F) 72 396.74 T
(ormat:) 76.87 396.74 T
(AND rd,rs,rt) 131.98 396.74 T
(Semantics:) 72 386.74 T
2 8 Q
(SET_GPR\050RD, GPR\050RS\051 & GPR\050R) 131.98 386.74 T
(T\051\051) 247.51 386.74 T
0 9 Q
(ANDI) 59.98 365.74 T
2 F
(:) 82.97 365.74 T
(Logical AND immediate.) 131.98 365.74 T
(Opcode:) 72 354.74 T
(0x4f) 131.98 354.74 T
(F) 72 344.74 T
(ormat:) 76.87 344.74 T
(ANDI rd,rt,imm) 131.98 344.74 T
(Semantics:) 72 334.74 T
2 8 Q
(SET_GPR\050R) 131.98 334.74 T
(T) 173.28 334.74 T
(, GPR\050RS\051 & UIMM\051) 177.58 334.74 T
0 9 Q
(OR) 59.98 313.74 T
2 F
(:) 73.48 313.74 T
(Logical OR.) 131.98 313.74 T
(Opcode:) 72 302.74 T
(0x50) 131.98 302.74 T
(F) 72 292.74 T
(ormat:) 76.87 292.74 T
(OR rd,rs,rt) 131.98 292.74 T
(Semantics:) 72 282.74 T
2 8 Q
(SET_GPR\050RD, GPR\050RS\051 | GPR\050R) 131.98 282.74 T
(T\051\051) 242.89 282.74 T
0 9 Q
(ORI) 59.98 261.74 T
2 F
(:) 76.98 261.74 T
(Logical OR immediate.) 131.98 261.74 T
(Opcode:) 72 250.74 T
(0x51) 131.98 250.74 T
(F) 72 240.74 T
(ormat:) 76.87 240.74 T
(ORI rd,rt,imm) 131.98 240.74 T
(Semantics:) 72 230.74 T
2 8 Q
(SET_GPR\050R) 131.98 230.74 T
(T) 173.28 230.74 T
(, GPR\050RS\051 | UIMM\051) 177.58 230.74 T
0 9 Q
(XOR) 59.98 209.74 T
2 F
(:) 79.97 209.74 T
(Logical XOR.) 131.98 209.74 T
(Opcode:) 72 198.74 T
(0x52) 131.98 198.74 T
(F) 72 188.74 T
(ormat:) 76.87 188.74 T
(XOR rd,rs,rt) 131.98 188.74 T
(Semantics:) 72 178.74 T
2 8 Q
(SET_GPR\050RD, GPR\050RS\051 ^ GPR\050R) 131.98 178.74 T
(T\051\051) 245.04 178.74 T
0 9 Q
(XORI) 59.98 157.74 T
2 F
(:) 83.47 157.74 T
(Logical XOR immediate.) 131.98 157.74 T
(Opcode:) 72 146.74 T
(0x53) 131.98 146.74 T
(F) 72 136.74 T
(ormat:) 76.87 136.74 T
(ORI rd,rt,uimm) 131.98 136.74 T
(Semantics:) 72 126.74 T
2 8 Q
(SET_GPR\050R) 131.98 126.74 T
(T) 173.28 126.74 T
(, GPR\050RS\051 ^ UIMM\051) 177.58 126.74 T
0 9 Q
(NOR) 59.98 105.74 T
2 F
(:) 79.97 105.74 T
(Logical NOR.) 131.98 105.74 T
(Opcode:) 72 94.74 T
(0x54) 131.98 94.74 T
(F) 72 84.74 T
(ormat:) 76.87 84.74 T
(NOR rd,rs,rt) 131.98 84.74 T
(Semantics:) 330.02 713.74 T
2 8 Q
(SET_GPR\050RD, ~\050GPR\050RS\051 | GPR\050R) 390 713.74 T
(T\051\051\051) 507.9 713.74 T
0 9 Q
(SLL) 318 692.74 T
2 F
(:) 335.01 692.74 T
(Shift left logical.) 390 692.74 T
(Opcode:) 330.02 681.74 T
(0x55) 390 681.74 T
(F) 330.02 671.74 T
(ormat:) 334.89 671.74 T
(SLL rd,rt,shamt) 390 671.74 T
(Semantics:) 330.02 661.74 T
2 8 Q
(SET_GPR\050RD, GPR\050R) 390 661.74 T
(T\051 << SHAMT\051) 464.64 661.74 T
0 9 Q
(SLL) 318 640.74 T
(V) 334.18 640.74 T
2 F
(:) 340.01 640.74 T
(Shift left logical v) 390 640.74 T
(ariable.) 455.02 640.74 T
(Opcode:) 330.02 629.74 T
(0x56) 390 629.74 T
(F) 330.02 619.74 T
(ormat:) 334.89 619.74 T
(SLL) 390 619.74 T
(V rd,rt,rs) 405.1 619.74 T
(Semantics:) 330.02 609.74 T
2 8 Q
(SET_GPR\050RD, GPR\050R) 390 609.74 T
(T\051 << \050GPR\050RS\051 & 0x1f\051\051) 464.64 609.74 T
0 9 Q
(SRL) 318 588.74 T
2 F
(:) 335.51 588.74 T
(Shift right logical.) 390 588.74 T
(Opcode:) 330.02 577.74 T
(0x57) 390 577.74 T
(F) 330.02 567.74 T
(ormat:) 334.89 567.74 T
(SRL rd,rt,shamt) 390 567.74 T
(Semantics:) 330.02 557.74 T
2 8 Q
(SET_GPR\050RD, GPR\050R) 390 557.74 T
(T\051 >> SHAMT\051) 464.64 557.74 T
0 9 Q
(SRL) 318 536.74 T
(V) 334.68 536.74 T
2 F
(:) 340.51 536.74 T
(Shift right logical v) 390 536.74 T
(ariable.) 460.03 536.74 T
(Opcode:) 330.02 525.74 T
(0x58) 390 525.74 T
(F) 330.02 515.74 T
(ormat:) 334.89 515.74 T
(SRL) 390 515.74 T
(V rd,rt,rs) 405.61 515.74 T
(Semantics:) 330.02 505.74 T
2 8 Q
(SET_GPR\050RD, GPR\050R) 390 505.74 T
(T\051 << \050GPR\050RS\051 & 0x1f\051\051) 464.64 505.74 T
0 9 Q
(SRA) 318 484.74 T
2 F
(:) 336 484.74 T
(Shift right arithmetic.) 390 484.74 T
(Opcode:) 330.02 473.74 T
(0x59) 390 473.74 T
(F) 330.02 463.74 T
(ormat:) 334.89 463.74 T
(SRA rd,rt,shamt) 390 463.74 T
(Semantics:) 330.02 453.74 T
2 8 Q
(SET_GPR\050RD, SEX\050GPR\050R) 390 453.74 T
(T\051 >> SHAMT) 482.42 453.74 T
(, 31 -) 530.4 453.74 T
(SHAMT\051\051) 390 443.74 T
0 9 Q
(SRA) 318 422.74 T
(V) 334.7 422.74 T
2 F
(:) 340.53 422.74 T
(Shift right arithmetic v) 390 422.74 T
(ariable.) 472.03 422.74 T
(Opcode:) 330.02 411.74 T
(0x59) 390 411.74 T
(F) 330.02 401.74 T
(ormat:) 334.89 401.74 T
(SRA) 390 401.74 T
(V rd,rt,rs) 406.29 401.74 T
(Semantics:) 330.02 391.74 T
2 8 Q
(SET_GPR\050RD, SEX\050GPR\050R) 390 391.74 T
(T\051 >> SHAMT) 482.42 391.74 T
(, 31 -) 530.4 391.74 T
(\050GPR\050RD\051 & 0x1f\051\051\051) 390 381.74 T
0 9 Q
(SL) 318 360.74 T
(T) 328.18 360.74 T
2 F
(:) 333.73 360.74 T
(Set re) 390 360.74 T
(gister if less than.) 410.61 360.74 T
(Opcode:) 330.02 349.74 T
(0x5b) 390 349.74 T
(F) 330.02 339.74 T
(ormat:) 334.89 339.74 T
(SL) 390 339.74 T
(T rd,rs,rt) 399.67 339.74 T
(Semantics:) 330.02 329.74 T
2 8 Q
(SET_GPR\050RD, \050GPR\050RS\051 < GPR\050R) 390 329.74 T
(T\051\051 ? 1 : 0\051) 506.49 329.74 T
0 9 Q
(SL) 318 308.74 T
(TI) 328.18 308.74 T
2 F
(:) 337.68 308.74 T
(Set re) 390 308.74 T
(gister if less than immediate.) 410.61 308.74 T
(Opcode:) 330.02 297.74 T
(0x5c) 390 297.74 T
(F) 330.02 287.74 T
(ormat:) 334.89 287.74 T
(SL) 390 287.74 T
(TI rd,rs,imm) 399.67 287.74 T
(Semantics:) 330.02 277.74 T
2 8 Q
(SET_GPR\050RD, \050GPR\050RS\051 < IMM\051 ? 1 : 0\051) 390 277.74 T
0 9 Q
(SL) 318 256.74 T
(TU) 328.18 256.74 T
2 F
(:) 340.68 256.74 T
(Set re) 390 256.74 T
(gister if less than unsigned.) 410.61 256.74 T
(Opcode:) 330.02 245.74 T
(0x5d) 390 245.74 T
(F) 330.02 235.74 T
(ormat:) 334.89 235.74 T
(SL) 390 235.74 T
(TU rd,rs,rt) 399.67 235.74 T
(Semantics:) 330.02 225.74 T
2 8 Q
(SET_GPR\050RD,) 390 225.74 T
-0.5 (\050\050unsigned\051GPR\050RS\051<\050unsigned\051GPR\050R) 390 215.74 P
-0.5 (T\051\051 ? 1 : 0\051) 519.36 215.74 P
0 9 Q
(SL) 318 194.74 T
(TIU) 328.18 194.74 T
2 F
(:) 344.18 194.74 T
(Set re) 390 194.74 T
(gister if less than unsigned immediate.) 410.61 194.74 T
(Opcode:) 330.02 183.74 T
(0x5d) 390 183.74 T
(F) 330.02 173.74 T
(ormat:) 334.89 173.74 T
(SL) 390 173.74 T
(TIU rd,rs,imm) 399.67 173.74 T
(Semantics:) 330.02 163.74 T
2 8 Q
(SET_GPR\050RD,) 390 163.74 T
-0.5 (\050\050unsigned\051GPR\050RS\051<\050unsigned\051GPR\050R) 390 153.74 P
-0.5 (T\051\051 ? 1 : 0\051) 519.36 153.74 P
0 11 Q
(A.4 Floating-point instructions) 318 131.41 T
0 9 Q
(ADD) 318 114.74 T
(.S) 337.31 114.74 T
2 F
(:) 344.57 114.74 T
(Add \337oating point, single precision.) 390 114.74 T
(Opcode:) 330.02 103.74 T
(0x70) 390 103.74 T
(F) 330.02 93.74 T
(ormat:) 334.89 93.74 T
(ADD.S fd,fs,ft) 390 93.74 T
(Semantics:) 330.02 83.74 T
2 8 Q
(FP) 390 83.74 T
(ALIGN\050FD\051) 398.16 83.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(18) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 8 Q
(FP) 131.98 714.41 T
(ALIGN\050FS\051) 140.14 714.41 T
(FP) 131.98 705.41 T
(ALIGN\050FT\051) 140.14 705.41 T
(SET_FPR_F\050FD, FPR_F\050FS\051 + FPR_F\050FT\051\051\051) 131.98 696.41 T
0 9 Q
(ADD) 59.98 675.74 T
(.D) 79.29 675.74 T
2 F
(:) 88.04 675.74 T
(Add \337oating point, double-precision.) 131.98 675.74 T
(Opcode:) 72 664.74 T
(0x71) 131.98 664.74 T
(F) 72 654.74 T
(ormat:) 76.87 654.74 T
(ADD.D fd,fs,ft) 131.98 654.74 T
(Semantics:) 72 644.74 T
2 8 Q
(FP) 131.98 644.74 T
(ALIGN\050FD\051) 140.14 644.74 T
(FP) 131.98 635.41 T
(ALIGN\050FS\051) 140.14 635.41 T
(FP) 131.98 626.41 T
(ALIGN\050FT\051) 140.14 626.41 T
(SET_FPR_D\050FD, FPR_D\050FS\051 + FPR_D\050FT\051\051\051) 131.98 617.41 T
0 9 Q
(SUB.S) 59.98 596.74 T
2 F
(:) 84.74 596.74 T
(Subtract \337oating point, single precision.) 131.98 596.74 T
(Opcode:) 72 585.74 T
(0x72) 131.98 585.74 T
(F) 72 575.74 T
(ormat:) 76.87 575.74 T
(SUB.S fd,fs,ft) 131.98 575.74 T
(Semantics:) 72 565.74 T
2 8 Q
(FP) 131.98 565.74 T
(ALIGN\050FD\051) 140.14 565.74 T
(FP) 131.98 556.41 T
(ALIGN\050FS\051) 140.14 556.41 T
(FP) 131.98 547.41 T
(ALIGN\050FT\051) 140.14 547.41 T
(SET_FPR_F\050FD, FPR_F\050FS\051 - FPR_F\050FT\051\051\051) 131.98 538.41 T
0 9 Q
(SUB.D) 59.98 517.74 T
2 F
(:) 86.23 517.74 T
(Subtract \337oating point, double precision.) 131.98 517.74 T
(Opcode:) 72 506.74 T
(0x73) 131.98 506.74 T
(F) 72 496.74 T
(ormat:) 76.87 496.74 T
(SUB.D fd,fs,ft) 131.98 496.74 T
(Semantics:) 72 486.74 T
2 8 Q
(FP) 131.98 486.74 T
(ALIGN\050FD\051) 140.14 486.74 T
(FP) 131.98 477.4 T
(ALIGN\050FS\051) 140.14 477.4 T
(FP) 131.98 468.4 T
(ALIGN\050FT\051) 140.14 468.4 T
(SET_FPR_D\050FD, FPR_D\050FS\051 - FPR_D\050FT\051\051\051) 131.98 459.4 T
0 9 Q
(MUL.S) 59.98 438.74 T
2 F
(:) 88.23 438.74 T
(Multiply \337oating point, single precision.) 131.98 438.74 T
(Opcode:) 72 427.74 T
(0x74) 131.98 427.74 T
(F) 72 417.74 T
(ormat:) 76.87 417.74 T
(MUL.S fd,fs,ft) 131.98 417.74 T
(Semantics:) 72 407.74 T
2 8 Q
(FP) 131.98 407.74 T
(ALIGN\050FD\051) 140.14 407.74 T
(FP) 131.98 398.4 T
(ALIGN\050FS\051) 140.14 398.4 T
(FP) 131.98 389.4 T
(ALIGN\050FT\051) 140.14 389.4 T
(SET_FPR_F\050FD,FPR_F\050FS\051*FPR_F\050FT\051\051\051) 131.98 380.4 T
0 9 Q
(MUL.D) 59.98 359.74 T
2 F
(:) 89.72 359.74 T
(Multiply \337oating point, double precision.) 131.98 359.74 T
(Opcode:) 72 348.74 T
(0x75) 131.98 348.74 T
(F) 72 338.74 T
(ormat:) 76.87 338.74 T
(MUL.D fd,fs,ft) 131.98 338.74 T
(Semantics:) 72 328.74 T
2 8 Q
(FP) 131.98 328.74 T
(ALIGN\050FD\051) 140.14 328.74 T
(FP) 131.98 319.4 T
(ALIGN\050FS\051) 140.14 319.4 T
(FP) 131.98 310.4 T
(ALIGN\050FT\051) 140.14 310.4 T
(SET_FPR_D\050FD, FPR_D\050FS\051 * FPR_D\050FT\051\051\051) 131.98 301.41 T
0 9 Q
(DIV) 59.98 280.74 T
(.S) 75.17 280.74 T
2 F
(:) 82.42 280.74 T
(Di) 131.98 280.74 T
(vide \337oating point, single precision.) 140.75 280.74 T
(Opcode:) 72 269.74 T
(0x76) 131.98 269.74 T
(F) 72 259.74 T
(ormat:) 76.87 259.74 T
(DIV) 131.98 259.74 T
(.S fd,fs,ft) 146.81 259.74 T
(Semantics:) 72 249.74 T
2 8 Q
(FP) 131.98 249.74 T
(ALIGN\050FD\051) 140.14 249.74 T
(FP) 131.98 240.41 T
(ALIGN\050FS\051) 140.14 240.41 T
(FP) 131.98 231.41 T
(ALIGN\050FT\051) 140.14 231.41 T
(DIV0\050FPR_F\050FT\051\051) 131.98 222.41 T
(SET_FPR_F\050FD, FPR_F\050FS\051 / FPR_F\050FT\051\051\051) 131.98 213.41 T
0 9 Q
(DIV) 59.98 192.74 T
(.D) 75.17 192.74 T
2 F
(:) 83.92 192.74 T
(Di) 131.98 192.74 T
(vide \337oating point, double precision.) 140.75 192.74 T
(Opcode:) 72 181.74 T
(0x77) 131.98 181.74 T
(F) 72 171.74 T
(ormat:) 76.87 171.74 T
(DIV) 131.98 171.74 T
(.D fd,fs,ft) 146.81 171.74 T
(Semantics:) 72 161.74 T
2 8 Q
(FP) 131.98 161.74 T
(ALIGN\050FD\051) 140.14 161.74 T
(FP) 131.98 152.41 T
(ALIGN\050FS\051) 140.14 152.41 T
(FP) 131.98 143.41 T
(ALIGN\050FT\051) 140.14 143.41 T
(DIV0\050FPR_D\050FT\051\051) 131.98 134.41 T
(SET_FPR_D\050FD, FPR_D\050FS\051 / FPR_D\050FT\051\051\051) 131.98 125.41 T
0 9 Q
(ABS.S) 59.98 104.74 T
2 F
(:) 84.74 104.74 T
(Absolute v) 131.98 104.74 T
(alue, single precision.) 171 104.74 T
(Opcode:) 72 93.74 T
(0x78) 131.98 93.74 T
(F) 72 83.74 T
(ormat:) 76.87 83.74 T
(ABS.S fd,fs) 131.98 83.74 T
(Semantics:) 330.02 713.74 T
2 8 Q
(FP) 390 713.74 T
(ALIGN\050FD\051) 398.16 713.74 T
(FP) 390 704.41 T
(ALIGN\050FS\051) 398.16 704.41 T
(SET_FPR_F\050FD, f) 390 695.41 T
(abs\050\050double\051FPR_F\050FS\051\051\051\051) 450.38 695.41 T
0 9 Q
(ABS.D) 318 674.74 T
2 F
(:) 344.25 674.74 T
(Absolute v) 390 674.74 T
(alue, double precision.) 429.02 674.74 T
(Opcode:) 330.02 663.74 T
(0x79) 390 663.74 T
(F) 330.02 653.74 T
(ormat:) 334.89 653.74 T
(ABS.D fd,fs) 390 653.74 T
(Semantics:) 330.02 643.74 T
2 8 Q
(FP) 390 643.74 T
(ALIGN\050FD\051) 398.16 643.74 T
(FP) 390 634.41 T
(ALIGN\050FS\051) 398.16 634.41 T
(SET_FPR_D\050FD, f) 390 625.41 T
(abs\050FPR_D\050FS\051\051\051\051) 451.7 625.41 T
0 9 Q
(MO) 318 604.74 T
(V) 333.05 604.74 T
(.S) 338.24 604.74 T
2 F
(:) 345.49 604.74 T
(Mo) 390 604.74 T
(v) 402.37 604.74 T
(e \337oating point v) 406.73 604.74 T
(alue, single precision.) 467.76 604.74 T
(Opcode:) 330.02 593.74 T
(0x7a) 390 593.74 T
(F) 330.02 583.74 T
(ormat:) 334.89 583.74 T
(MO) 390 583.74 T
(V) 404.05 583.74 T
(.S fd,fs) 409.39 583.74 T
(Semantics:) 330.02 573.74 T
2 8 Q
(FP) 390 573.74 T
(ALIGN\050FD\051) 398.16 573.74 T
(FP) 390 564.41 T
(ALIGN\050FS\051) 398.16 564.41 T
(SET_FPR_F\050FD, FPR_F\050FS\051\051) 390 555.41 T
0 9 Q
(MO) 318 534.74 T
(V) 333.05 534.74 T
(.D) 338.24 534.74 T
2 F
(:) 346.99 534.74 T
(Mo) 390 534.74 T
(v) 402.37 534.74 T
(e \337oating point v) 406.73 534.74 T
(alue, double precision.) 467.76 534.74 T
(Opcode:) 330.02 523.74 T
(0x7b) 390 523.74 T
(F) 330.02 513.74 T
(ormat:) 334.89 513.74 T
(MO) 390 513.74 T
(V) 404.05 513.74 T
(.D fd,fs) 409.39 513.74 T
(Semantics:) 330.02 503.74 T
2 8 Q
(FP) 390 503.74 T
(ALIGN\050FD\051) 398.16 503.74 T
(FP) 390 494.4 T
(ALIGN\050FS\051) 398.16 494.4 T
(SET_FPR_D\050FD, FPR_D\050FS\051\051) 390 485.4 T
0 9 Q
(NEG.S) 318 464.74 T
2 F
(:) 344.76 464.74 T
(Ne) 390 464.74 T
(g) 400.36 464.74 T
(ate \337oating point v) 404.81 464.74 T
(alue, single precision.) 472.34 464.74 T
(Opcode:) 330.02 453.74 T
(0x7c) 390 453.74 T
(F) 330.02 443.74 T
(ormat:) 334.89 443.74 T
(NEG.S fd,fs) 390 443.74 T
(Semantics:) 330.02 433.74 T
2 8 Q
(FP) 390 433.74 T
(ALIGN\050FD\051) 398.16 433.74 T
(FP) 390 424.4 T
(ALIGN\050FS\051) 398.16 424.4 T
(SET_FPR_F\050FD, -FPR_F\050FS\051\051) 390 415.4 T
0 9 Q
(NEG.D) 318 394.74 T
2 F
(:) 346.25 394.74 T
2.49 (Ne) 390 394.74 P
2.49 (g) 400.36 394.74 P
2.49 (ate \337oating point v) 404.81 394.74 P
2.49 (alue, double preci-) 479.8 394.74 P
(sion.) 318 383.74 T
(Opcode:) 330.02 372.74 T
(0x7d) 390 372.74 T
(F) 330.02 362.74 T
(ormat:) 334.89 362.74 T
(NEG.D fd,fs) 390 362.74 T
(Semantics:) 330.02 352.74 T
2 8 Q
(FP) 390 352.74 T
(ALIGN\050FD\051) 398.16 352.74 T
(FP) 390 343.4 T
(ALIGN\050FS\051) 398.16 343.4 T
(SET_FPR_D\050FD, -FPR_D\050FS\051\051) 390 334.4 T
0 9 Q
(CVT) 318 313.74 T
(.S.D) 336.19 313.74 T
2 F
(:) 352.19 313.74 T
(Con) 390 313.74 T
(v) 404.64 313.74 T
(ert double precision to single precision.) 409.01 313.74 T
(Opcode:) 330.02 302.74 T
(0x80) 390 302.74 T
(F) 330.02 292.74 T
(ormat:) 334.89 292.74 T
(CVT) 390 292.74 T
(.S.D fd,fs) 407.33 292.74 T
(Semantics:) 330.02 282.74 T
2 8 Q
(FP) 390 282.74 T
(ALIGN\050FD\051) 398.16 282.74 T
(FP) 390 273.41 T
(ALIGN\050FS\051) 398.16 273.41 T
(SET_FPR_D\050FD, -FPR_D\050FS\051\051) 390 264.41 T
0 9 Q
(CVT) 318 243.74 T
(.S.W) 336.19 243.74 T
2 F
(:) 354.36 243.74 T
(Con) 390 243.74 T
(v) 404.64 243.74 T
(ert inte) 409.01 243.74 T
(ger to single precision.) 434.12 243.74 T
(Opcode:) 330.02 232.74 T
(0x81) 390 232.74 T
(F) 330.02 222.74 T
(ormat:) 334.89 222.74 T
(CVT) 390 222.74 T
(.S.W fd,fs) 407.33 222.74 T
(Semantics:) 330.02 212.74 T
2 8 Q
(FP) 390 212.74 T
(ALIGN\050FD\051) 398.16 212.74 T
(FP) 390 203.41 T
(ALIGN\050FS\051) 398.16 203.41 T
(SET_FPR_F\050FD, \050\337oat\051FPR_L\050FS\051\051) 390 194.41 T
0 9 Q
(CVT) 318 173.74 T
(.D) 336.19 173.74 T
(.S) 344.76 173.74 T
2 F
(:) 352.01 173.74 T
(Con) 390 173.74 T
(v) 404.64 173.74 T
(ert single precision to double precision.) 409.01 173.74 T
(Opcode:) 330.02 162.74 T
(0x82) 390 162.74 T
(F) 330.02 152.74 T
(ormat:) 334.89 152.74 T
(CVT) 390 152.74 T
(.D.S fd,fs) 407.33 152.74 T
(Semantics:) 330.02 142.74 T
2 8 Q
(FP) 390 142.74 T
(ALIGN\050FD\051) 398.16 142.74 T
(FP) 390 133.41 T
(ALIGN\050FS\051) 398.16 133.41 T
(SET_FPR_D\050FD,\050double\051FPR_F\050FS\051\051) 390 124.41 T
0 9 Q
(CVT) 318 103.74 T
(.D) 336.19 103.74 T
(.W) 344.76 103.74 T
2 F
(:) 355.67 103.74 T
(Con) 390 103.74 T
(v) 404.64 103.74 T
(ert inte) 409.01 103.74 T
(ger to double precision.) 434.12 103.74 T
(Opcode:) 330.02 92.74 T
(0x83) 390 92.74 T
(F) 330.02 82.74 T
(ormat:) 334.89 82.74 T
(CVT) 390 82.74 T
(.D.W fd,fs) 407.33 82.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(19) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Semantics:) 72 713.74 T
2 8 Q
(FP) 131.98 713.74 T
(ALIGN\050FD\051) 140.14 713.74 T
(FP) 131.98 704.41 T
(ALIGN\050FS\051) 140.14 704.41 T
(SET_FPR_D\050FD,\050double\051FPR_L\050FS\051\051) 131.98 695.41 T
0 9 Q
(CVT) 59.98 674.74 T
(.W) 78.17 674.74 T
(.S) 88.59 674.74 T
2 F
(:) 95.84 674.74 T
(Con) 131.98 674.74 T
(v) 146.62 674.74 T
(ert single precision to inte) 150.98 674.74 T
(ger) 244.34 674.74 T
(.) 255.34 674.74 T
(Opcode:) 72 663.74 T
(0x84) 131.98 663.74 T
(F) 72 653.74 T
(ormat:) 76.87 653.74 T
(CVT) 131.98 653.74 T
(.W) 149.31 653.74 T
(.S fd,fs) 159.23 653.74 T
(Semantics:) 72 643.74 T
2 8 Q
(FP) 131.98 643.74 T
(ALIGN\050FD\051) 140.14 643.74 T
(FP) 131.98 634.41 T
(ALIGN\050FS\051) 140.14 634.41 T
(SET_FPR_L\050FD, \050long\051FPR_F\050FS\051\051) 131.98 625.41 T
0 9 Q
(CVT) 59.98 604.74 T
(.W) 78.17 604.74 T
(.D) 88.59 604.74 T
2 F
(:) 97.33 604.74 T
(Con) 131.98 604.74 T
(v) 146.62 604.74 T
(ert double precision to inte) 150.98 604.74 T
(ger) 247.34 604.74 T
(.) 258.34 604.74 T
(Opcode:) 72 593.74 T
(0x85) 131.98 593.74 T
(F) 72 583.74 T
(ormat:) 76.87 583.74 T
(CVT) 131.98 583.74 T
(.W) 149.31 583.74 T
(.D fd,fs) 159.23 583.74 T
(Semantics:) 72 573.74 T
2 8 Q
(FP) 131.98 573.74 T
(ALIGN\050FD\051) 140.14 573.74 T
(FP) 131.98 564.41 T
(ALIGN\050FS\051) 140.14 564.41 T
(SET_FPR_L\050FD, \050long\051FPR_D\050FS\051\051) 131.98 555.41 T
0 9 Q
(C.EQ) 59.98 534.74 T
(.S) 81.55 534.74 T
2 F
(:) 88.8 534.74 T
(T) 131.98 534.74 T
(est if equal, single precision.) 136.85 534.74 T
(Opcode:) 72 523.74 T
(0x90) 131.98 523.74 T
(F) 72 513.74 T
(ormat:) 76.87 513.74 T
(C.EQ.S fs,ft) 131.98 513.74 T
(Semantics:) 72 503.74 T
2 8 Q
(FP) 131.98 503.74 T
(ALIGN\050FS\051) 140.14 503.74 T
(FP) 131.98 494.4 T
(ALIGN\050FT\051) 140.14 494.4 T
(SET_FCC\050FPR_F\050FS\051 == FPR_F\050FT\051\051) 131.98 485.4 T
0 9 Q
(C.EQ) 59.98 464.74 T
(.D) 81.55 464.74 T
2 F
(:) 90.3 464.74 T
(T) 131.98 464.74 T
(est if equal, double precision.) 136.85 464.74 T
(Opcode:) 72 453.74 T
(0x91) 131.98 453.74 T
(F) 72 443.74 T
(ormat:) 76.87 443.74 T
(C.EQ.D fs,ft) 131.98 443.74 T
(Semantics:) 72 433.74 T
2 8 Q
(FP) 131.98 433.74 T
(ALIGN\050FS\051) 140.14 433.74 T
(FP) 131.98 423.74 T
(ALIGN\050FT\051) 140.14 423.74 T
(SET_FCC\050FPR_D\050FS\051 == FPR_D\050FT\051\051) 131.98 413.74 T
0 9 Q
(C.L) 59.98 392.74 T
(T) 73.9 392.74 T
(.S) 79.09 392.74 T
2 F
(:) 86.35 392.74 T
(T) 131.98 392.74 T
(est if less than, single precision.) 136.85 392.74 T
(Opcode:) 72 381.74 T
(0x92) 131.98 381.74 T
(F) 72 371.74 T
(ormat:) 76.87 371.74 T
(C.L) 131.98 371.74 T
(T) 144.9 371.74 T
(.S fs,ft) 149.73 371.74 T
(Semantics:) 72 361.74 T
2 8 Q
(FP) 131.98 361.74 T
(ALIGN\050FS\051) 140.14 361.74 T
(FP) 131.98 351.74 T
(ALIGN\050FT\051) 140.14 351.74 T
(SET_FCC\050FPR_F\050FS\051 < FPR_F\050FT\051\051) 131.98 341.74 T
0 9 Q
(C.L) 59.98 320.74 T
(T) 73.9 320.74 T
(.D) 79.09 320.74 T
2 F
(:) 87.84 320.74 T
(T) 131.98 320.74 T
(est if less than, double precision.) 136.85 320.74 T
(Opcode:) 72 309.74 T
(0x93) 131.98 309.74 T
(F) 72 299.74 T
(ormat:) 76.87 299.74 T
(C.L) 131.98 299.74 T
(T) 144.9 299.74 T
(.D fs,ft) 149.73 299.74 T
(Semantics:) 72 289.74 T
2 8 Q
(FP) 131.98 289.74 T
(ALIGN\050FS\051) 140.14 289.74 T
(FP) 131.98 280.4 T
(ALIGN\050FT\051) 140.14 280.4 T
(SET_FCC\050FPR_D\050FS\051 < FPR_D\050FT\051\051) 131.98 271.41 T
0 9 Q
(C.LE.) 59.98 250.74 T
2 F
(S:) 82.98 250.74 T
(T) 131.98 250.74 T
(est if less than or equal, single precision.) 136.85 250.74 T
(Opcode:) 72 239.74 T
(0x94) 131.98 239.74 T
(F) 72 229.74 T
(ormat:) 76.87 229.74 T
(C.LE.S fs,ft) 131.98 229.74 T
(Semantics:) 72 219.74 T
2 8 Q
(FP) 131.98 219.74 T
(ALIGN\050FS\051) 140.14 219.74 T
(FP) 131.98 210.41 T
(ALIGN\050FT\051) 140.14 210.41 T
(SET_FCC\050FPR_F\050FS\051 <= FPR_F\050FT\051\051) 131.98 201.41 T
0 9 Q
(C.LE.D) 59.98 180.74 T
2 F
(:) 89.48 180.74 T
(T) 131.98 180.74 T
(est if less than or equal, double precision.) 136.85 180.74 T
(Opcode:) 72 169.74 T
(0x95) 131.98 169.74 T
(F) 72 159.74 T
(ormat:) 76.87 159.74 T
(C.LE.D fs,ft) 131.98 159.74 T
(Semantics:) 72 149.74 T
2 8 Q
(FP) 131.98 149.74 T
(ALIGN\050FS\051) 140.14 149.74 T
(FP) 131.98 140.41 T
(ALIGN\050FT\051) 140.14 140.41 T
(SET_FCC\050FPR_D\050FS\051 <= FPR_D\050FT\051\051) 131.98 131.41 T
0 9 Q
(SQR) 59.98 110.74 T
(T) 78.12 110.74 T
(.S) 83.31 110.74 T
2 F
(:) 90.57 110.74 T
(Square root, single precision.) 131.98 110.74 T
(Opcode:) 72 99.74 T
(0x96) 131.98 99.74 T
(F) 72 89.74 T
(ormat:) 76.87 89.74 T
(SQR) 131.98 89.74 T
(T) 148.94 89.74 T
(.S fd,fs) 153.77 89.74 T
(Semantics:) 72 79.74 T
2 8 Q
(FP) 131.98 79.74 T
(ALIGN\050FD\051) 140.14 79.74 T
(FP) 390 714.41 T
(ALIGN\050FS\051) 398.16 714.41 T
(SET_FPR_F\050FD,sqrt\050\050double\051FPR_F\050FS\051\051\051) 390 705.41 T
0 9 Q
(SQR) 318 684.74 T
(T) 336.14 684.74 T
(.D) 341.34 684.74 T
2 F
(:) 350.08 684.74 T
(Square root, double precision.) 390 684.74 T
(Opcode:) 330.02 673.74 T
(0x97) 390 673.74 T
(F) 330.02 663.74 T
(ormat:) 334.89 663.74 T
(SQR) 390 663.74 T
(T) 406.96 663.74 T
(.D fd,fs) 411.8 663.74 T
(Semantics:) 330.02 653.74 T
2 8 Q
(FP) 390 653.74 T
(ALIGN\050FD\051) 398.16 653.74 T
(FP) 390 644.41 T
(ALIGN\050FS\051) 398.16 644.41 T
(SET_FPR_D\050FD, sqrt\050FPR_D\050FS\051\051\051) 390 635.41 T
0 11 Q
(A.5 Miscellaneous instructions) 318 613.41 T
0 9 Q
(NOP) 318 596.74 T
2 F
(:) 337 596.74 T
(No operation.) 390 596.74 T
(Opcode:) 330.02 585.74 T
(0x00) 390 585.74 T
(F) 330.02 575.74 T
(ormat:) 334.89 575.74 T
(NOP) 390 575.74 T
(Semantics:) 330.02 565.74 T
(None) 390 565.74 T
0 F
(SYSCALL) 318 544.74 T
2 F
(:) 359.51 544.74 T
(System call.) 390 544.74 T
(Opcode:) 330.02 533.74 T
(0xa0) 390 533.74 T
(F) 330.02 523.74 T
(ormat:) 334.89 523.74 T
(SYSCALL) 390 523.74 T
(Semantics:) 330.02 513.74 T
(See Appendix) 390 513.74 T
(B for details) 442.99 513.74 T
0 F
(BREAK) 318 492.74 T
2 F
(:) 350 492.74 T
(Declare a program error) 390 492.74 T
(.) 476.21 492.74 T
(Opcode:) 330.02 481.74 T
(0xa1) 390 481.74 T
(F) 330.02 471.74 T
(ormat:) 334.89 471.74 T
(BREAK uimm) 390 471.74 T
(Semantics:) 330.02 461.74 T
(Actions are simulator) 390 461.74 T
(-dependent.  T) 467.31 461.74 T
(ypically) 518.83 461.74 T
(,) 547.24 461.74 T
-0.1 (an error message is printed and) 390 451.74 P
1 F
-0.23 (abort\050\051) 503.89 451.74 P
2 F
-0.1 ( is) 541.69 451.74 P
(called.) 390 441.74 T
0 F
(LUI) 318 420.74 T
2 F
(:) 334 420.74 T
(Load upper immediate.) 390 420.74 T
(Opcode:) 330.02 409.74 T
(0xa2) 390 409.74 T
(F) 330.02 399.74 T
(ormat:) 334.89 399.74 T
(LUI uimm) 390 399.74 T
(Semantics:) 330.02 389.74 T
2 8 Q
(SET_GPR\050R) 390 389.74 T
(T) 431.3 389.74 T
(, UIMM << 16\051) 435.6 389.74 T
0 9 Q
(MFC1) 318 368.74 T
2 F
(:) 342.99 368.74 T
0.93 (Mo) 390 368.74 P
0.93 (v) 402.37 368.74 P
0.93 (e from \337oating point to inte) 406.73 368.74 P
0.93 (ger re) 510.48 368.74 P
0.93 (gister) 532 368.74 P
(\336le.) 390 357.74 T
(Opcode:) 330.02 346.74 T
(0xa3) 390 346.74 T
(F) 330.02 336.74 T
(ormat:) 334.89 336.74 T
(MFC1 rt,fs) 390 336.74 T
(Semantics:) 330.02 326.74 T
2 8 Q
(SET_GPR\050R) 390 326.74 T
(T) 431.3 326.74 T
(, FPR_L\050FS\051\051) 435.6 326.74 T
0 9 Q
(MTC1) 318 305.74 T
2 F
(:) 343.5 305.74 T
0.93 (Mo) 390 305.74 P
0.93 (v) 402.37 305.74 P
0.93 (e from inte) 406.73 305.74 P
0.93 (ger to \337oating point re) 447.94 305.74 P
0.93 (gister) 532 305.74 P
(\336le.) 390 294.74 T
(Opcode:) 330.02 283.74 T
(0xa5) 390 283.74 T
(F) 330.02 273.74 T
(ormat:) 334.89 273.74 T
(MTC1 rt,fs) 390 273.74 T
(Semantics:) 330.02 263.74 T
2 8 Q
(SET_FPR_L\050FS, GPR\050R) 390 263.74 T
(T\051\051) 469.98 263.74 T
0 12 Q
(B System call de\336nitions) 318 239.74 T
2 9 Q
0.58 (This appendix lists all system calls supported by the simula-) 330.02 222.74 P
-0.11 (tors with their system call code \050syscode\051, interf) 318 211.74 P
-0.11 (ace speci\336cation,) 490.12 211.74 P
0.91 (and appropriate POSIX Unix reference. Systems calls are initi-) 318 200.74 P
2.2 (ated with the SYSCALL instruction. Prior to e) 318 189.74 P
2.2 (x) 500.75 189.74 P
2.2 (ecution of a) 505.11 189.74 P
1.49 (SYSCALL instruction, re) 318 178.74 P
1.49 (gister $) 413.09 178.74 P
3 F
1.49 (v) 441.33 178.74 P
2 F
1.49 (0 should be loaded with the) 445.32 178.74 P
0 (system call code. The ar) 318 167.74 P
0 (guments of the system call interf) 405.09 167.74 P
0 (ace pro-) 522.76 167.74 P
-0.19 (totype should be loaded into re) 318 156.74 P
-0.19 (gisters $) 428.13 156.74 P
3 F
-0.19 (a) 458.19 156.74 P
2 F
-0.19 (0 - $) 462.69 156.74 P
3 F
-0.19 (a) 478.8 156.74 P
2 F
-0.19 (3 in the order spec-) 483.3 156.74 P
(i\336ed by the system call interf) 318 145.74 T
(ace prototype,) 422.65 145.74 T
3 F
(e) 475.89 145.74 T
(.g) 479.75 145.74 T
(.) 486.36 145.74 T
2 F
(, for:) 488.61 145.74 T
4 8 Q
(read\050int fd, char *buf, int nbyte\051,) 330.02 131.41 T
2 9 Q
0.6 (0x03 is loaded into $) 318 116.74 P
3 F
0.6 (v) 395.91 116.74 P
2 F
0.6 (0,) 399.91 116.74 P
2 8 Q
0.54 (fd) 409.51 116.74 P
2 9 Q
0.6 ( is loaded into $) 416.17 116.74 P
3 F
0.6 (a) 476.09 116.74 P
2 F
0.6 (0,) 480.59 116.74 P
2 8 Q
0.54 (b) 490.19 116.74 P
0.54 (uf) 494.03 116.74 P
2 9 Q
0.6 ( into $) 500.69 116.74 P
3 F
0.6 (a) 524.9 116.74 P
2 F
0.6 (1, and) 529.4 116.74 P
2 8 Q
(nbyte) 318 105.74 T
2 9 Q
( into $) 335.78 105.74 T
3 F
(a) 358.78 105.74 T
2 F
(2.) 363.28 105.74 T
0 F
(EXIT) 318 83.74 T
2 F
(:) 339.55 83.74 T
(Exit process.) 390 83.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(20) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Syscode:) 71.98 713.74 T
(0x01) 131.98 713.74 T
(Interf) 71.98 703.74 T
(ace:) 91.88 703.74 T
(v) 131.98 703.74 T
(oid e) 136.3 703.74 T
(xit\050int status\051;) 153.91 703.74 T
(Semantics:) 71.98 693.74 T
(See) 131.98 693.74 T
1 F
(exit\0502\051) 147.22 693.74 T
2 F
(.) 185.02 693.74 T
0 F
(READ) 59.98 672.74 T
2 F
(:) 85.47 672.74 T
(Read from \336le to b) 131.98 672.74 T
(uf) 199.79 672.74 T
(fer) 207.06 672.74 T
(.) 216.56 672.74 T
(Syscode:) 71.98 661.74 T
(0x03) 131.98 661.74 T
(Interf) 71.98 651.74 T
(ace:) 91.88 651.74 T
(int read\050int fd, char *b) 131.98 651.74 T
(uf, int nbyte\051;) 212.53 651.74 T
(Semantics:) 71.98 641.74 T
(See) 131.98 641.74 T
1 F
(read\0502\051) 147.22 641.74 T
2 F
(.) 185.02 641.74 T
0 F
(WRITE) 59.98 620.74 T
2 F
(:) 90.98 620.74 T
(Write from a b) 131.98 620.74 T
(uf) 185.03 620.74 T
(fer to a \336le.) 192.3 620.74 T
(Syscode:) 71.98 609.74 T
(0x04) 131.98 609.74 T
(Interf) 71.98 599.74 T
(ace:) 91.88 599.74 T
(int write\050int fd, char *b) 131.98 599.74 T
(uf, int nbyte\051;) 215.53 599.74 T
(Semantics:) 71.98 589.74 T
(See) 131.98 589.74 T
1 F
(write\0502\051) 147.22 589.74 T
2 F
(.) 190.42 589.74 T
0 F
(OPEN) 59.98 568.74 T
2 F
(:) 84.98 568.74 T
(Open a \336le.) 131.98 568.74 T
(Syscode:) 71.98 557.74 T
(0x05) 131.98 557.74 T
(Interf) 71.98 547.74 T
(ace:) 91.88 547.74 T
(int open\050char *fname, int \337ags, int mode\051;) 131.98 547.74 T
(Semantics:) 71.98 537.74 T
(See) 131.98 537.74 T
1 F
(open\0502\051) 147.22 537.74 T
2 F
(.) 185.02 537.74 T
0 F
(CLOSE) 59.98 516.74 T
2 F
(:) 90.49 516.74 T
(Close a \336le.) 131.98 516.74 T
(Syscode:) 71.98 505.74 T
(0x06) 131.98 505.74 T
(Interf) 71.98 495.74 T
(ace:) 91.88 495.74 T
(int close\050int fd\051;) 131.98 495.74 T
(Semantics:) 71.98 485.74 T
(See) 131.98 485.74 T
1 F
(close\0502\051) 147.22 485.74 T
2 F
(.) 190.42 485.74 T
0 F
(CREA) 59.98 464.74 T
(T) 84.62 464.74 T
2 F
(:) 90.17 464.74 T
(Create a \336le.) 131.98 464.74 T
(Syscode:) 71.98 453.74 T
(0x08) 131.98 453.74 T
(Interf) 71.98 443.74 T
(ace:) 91.88 443.74 T
(int creat\050char *fname, int mode\051;) 131.98 443.74 T
(Semantics:) 71.98 433.74 T
(See) 131.98 433.74 T
1 F
(creat\0502\051) 147.22 433.74 T
2 F
(.) 190.42 433.74 T
0 F
(UNLINK) 59.98 412.74 T
2 F
(:) 95.98 412.74 T
(Delete a \336le.) 131.98 412.74 T
(Syscode:) 71.98 401.74 T
(0x0a) 131.98 401.74 T
(Interf) 71.98 391.74 T
(ace:) 91.88 391.74 T
(int unlink\050char *fname\051;) 131.98 391.74 T
(Semantics:) 71.98 381.74 T
(See) 131.98 381.74 T
1 F
(unlink\0502\051) 147.22 381.74 T
2 F
(.) 195.82 381.74 T
0 F
(CHDIR) 59.98 360.74 T
2 F
(:) 89.97 360.74 T
(Change process directory) 131.98 360.74 T
(.) 222.87 360.74 T
(Syscode:) 71.98 349.74 T
(0x0c) 131.98 349.74 T
(Interf) 71.98 339.74 T
(ace:) 91.88 339.74 T
(int chdir\050char *path\051;) 131.98 339.74 T
(Semantics:) 71.98 329.74 T
(See) 131.98 329.74 T
1 F
(chdir\0502\051) 147.22 329.74 T
2 F
(.) 190.42 329.74 T
0 F
(CHMOD) 59.98 308.74 T
2 F
(:) 95.47 308.74 T
(Change \336le permissions.) 131.98 308.74 T
(Syscode:) 71.98 297.74 T
(0x0f) 131.98 297.74 T
(Interf) 71.98 287.74 T
(ace:) 91.88 287.74 T
(int chmod\050int *fname, int mode\051;) 131.98 287.74 T
(Semantics:) 71.98 277.74 T
(See) 131.98 277.74 T
1 F
(chmod\0502\051) 147.22 277.74 T
2 F
(.) 190.42 277.74 T
0 F
(CHO) 59.98 256.74 T
(WN) 80.03 256.74 T
2 F
(:) 95.53 256.74 T
(Change \336le o) 131.98 256.74 T
(wner and group.) 179.75 256.74 T
(Syscode:) 71.98 245.74 T
(0x10) 131.98 245.74 T
(Interf) 71.98 235.74 T
(ace:) 91.88 235.74 T
-0.36 (int cho) 131.98 235.74 P
-0.36 (wn\050char *fname, int o) 156.14 235.74 P
-0.36 (wner) 234.32 235.74 P
-0.36 (, int group\051;) 251.95 235.74 P
(Semantics:) 71.98 225.74 T
(See) 131.98 225.74 T
1 F
(chown\0502\051) 147.22 225.74 T
2 F
(.) 190.42 225.74 T
0 F
(BRK) 59.98 204.74 T
2 F
(:) 79.48 204.74 T
(Change process break address.) 131.98 204.74 T
(Syscode:) 71.98 193.74 T
(0x11) 131.98 193.74 T
(Interf) 71.98 183.74 T
(ace:) 91.88 183.74 T
(int brk\050long addr\051;) 131.98 183.74 T
(Semantics:) 71.98 173.74 T
(See) 131.98 173.74 T
1 F
(brk\0502\051) 147.22 173.74 T
2 F
(.) 179.62 173.74 T
0 F
(LSEEK) 59.98 152.74 T
2 F
(:) 89.99 152.74 T
(Mo) 131.98 152.74 T
(v) 144.34 152.74 T
(e \336le pointer) 148.71 152.74 T
(.) 193.71 152.74 T
(Syscode:) 71.98 141.74 T
(0x13) 131.98 141.74 T
(Interf) 71.98 131.74 T
(ace:) 91.88 131.74 T
(long lseek\050int fd, long of) 131.98 131.74 T
(fset, int whence\051;) 220.99 131.74 T
(Semantics:) 71.98 121.74 T
(See) 131.98 121.74 T
1 F
(lseek\0502\051) 147.22 121.74 T
2 F
(.) 190.42 121.74 T
0 F
(GETPID) 59.98 100.74 T
2 F
(:) 94.48 100.74 T
(Get process identi\336er) 131.98 100.74 T
(.) 208.47 100.74 T
(Syscode:) 71.98 89.74 T
(0x14) 131.98 89.74 T
(Interf) 71.98 79.74 T
(ace:) 91.88 79.74 T
(int getpid\050v) 131.98 79.74 T
(oid\051;) 173.55 79.74 T
(Semantics:) 330 713.74 T
(See) 390 713.74 T
1 F
(getpid\0502\051) 405.25 713.74 T
2 F
(.) 453.85 713.74 T
0 F
(GETUID) 318 692.74 T
2 F
(:) 353.51 692.74 T
(Get user identi\336er) 390 692.74 T
(.) 454.49 692.74 T
(Syscode:) 330 681.74 T
(0x18) 390 681.74 T
(Interf) 330 671.74 T
(ace:) 349.9 671.74 T
(int getuid\050v) 390 671.74 T
(oid\051;) 431.57 671.74 T
(Semantics:) 330 661.74 T
(See) 390 661.74 T
1 F
(getuid\0502\051) 405.25 661.74 T
2 F
(.) 453.85 661.74 T
0 F
(A) 318 640.74 T
(CCESS) 324 640.74 T
2 F
(:) 353.01 640.74 T
(Determine accessibility of a \336le.) 390 640.74 T
(Syscode:) 330 629.74 T
(0x21) 390 629.74 T
(Interf) 330 619.74 T
(ace:) 349.9 619.74 T
(int access\050char *fname, int mode\051;) 390 619.74 T
(Semantics:) 330 609.74 T
(See) 390 609.74 T
1 F
(access\0502\051) 405.25 609.74 T
2 F
(.) 453.85 609.74 T
0 F
(ST) 318 588.74 T
(A) 328.2 588.74 T
(T) 333.84 588.74 T
2 F
(:) 339.39 588.74 T
(Get \336le status.) 390 588.74 T
(Syscode:) 330 577.74 T
(0x26) 390 577.74 T
(Interf) 330 567.74 T
(ace:) 349.9 567.74 T
(struct stat) 390 567.74 T
({) 390 557.74 T
(short) 397.2 547.74 T
(st_de) 462.57 547.74 T
(v;) 481.35 547.74 T
(long) 397.2 537.74 T
(st_ino;) 462.57 537.74 T
(unsigned short) 397.2 527.74 T
(st_mode;) 462.57 527.74 T
(short) 397.2 517.74 T
(st_nlink;) 462.57 517.74 T
(short) 397.2 507.74 T
(st_uid;) 462.57 507.74 T
(short) 397.2 497.74 T
(st_gid;) 462.57 497.74 T
(short) 397.2 487.74 T
(st_rde) 462.57 487.74 T
(v;) 484.34 487.74 T
(int) 397.2 477.74 T
(st_size;) 462.57 477.74 T
(int) 397.2 467.74 T
(st_atime;) 462.57 467.74 T
(int) 397.2 457.74 T
(st_spare1;) 462.57 457.74 T
(int) 397.2 447.74 T
(st_mtime;) 462.57 447.74 T
(int) 397.2 437.74 T
(st_spare2;) 462.57 437.74 T
(int) 397.2 427.74 T
(st_ctime;) 462.57 427.74 T
(int) 397.2 417.74 T
(st_spare3;) 462.57 417.74 T
(long) 397.2 407.74 T
(st_blksize;) 462.57 407.74 T
(long) 397.2 397.74 T
(st_blocks;) 462.57 397.74 T
(long) 397.2 387.74 T
(st_gennum;) 462.57 387.74 T
(long) 397.2 377.74 T
(st_spare4;) 462.57 377.74 T
(};) 390 367.74 T
(int stat\050char *fname, struct stat *b) 390 357.74 T
(uf\051;) 512.3 357.74 T
(Semantics:) 330 347.74 T
(See) 390 347.74 T
1 F
(stat\0502\051) 405.25 347.74 T
2 F
(.) 443.05 347.74 T
0 F
(LST) 318 326.74 T
(A) 334.2 326.74 T
(T) 339.84 326.74 T
2 F
(:) 345.4 326.74 T
(Get \336le status \050and don\325) 390 326.74 T
(t dereference links\051.) 476.33 326.74 T
(Syscode:) 330 315.74 T
(0x28) 390 315.74 T
(Interf) 330 305.74 T
(ace:) 349.9 305.74 T
(int lstat\050char *fname, struct stat *b) 390 305.74 T
(uf\051;) 514.8 305.74 T
(Semantics:) 330 295.74 T
(See) 390 295.74 T
1 F
(lstat\0502\051) 405.25 295.74 T
2 F
(.) 448.45 295.74 T
0 F
(DUP) 318 274.74 T
2 F
(:) 336.49 274.74 T
(Duplicate a \336le descriptor) 390 274.74 T
(.) 482.74 274.74 T
(Syscode:) 330 263.74 T
(0x29) 390 263.74 T
(Interf) 330 253.74 T
(ace:) 349.9 253.74 T
(int dup\050int fd\051;) 390 253.74 T
(Semantics:) 330 243.74 T
(See) 390 243.74 T
1 F
(dup\0502\051) 405.25 243.74 T
2 F
(.) 437.65 243.74 T
0 F
(PIPE) 318 222.74 T
2 F
(:) 338.5 222.74 T
(Create an interprocess comm. channel.) 390 222.74 T
(Syscode:) 330 211.74 T
(0x2a) 390 211.74 T
(Interf) 330 201.74 T
(ace:) 349.9 201.74 T
(int pipe\050int fd[2]\051;) 390 201.74 T
(Semantics:) 330 191.74 T
(See) 390 191.74 T
1 F
(pipe\0502\051) 405.25 191.74 T
2 F
(.) 443.05 191.74 T
0 F
(GETGID) 318 170.74 T
2 F
(:) 354.01 170.74 T
(Get group identi\336er) 390 170.74 T
(.) 460.5 170.74 T
(Syscode:) 330 159.74 T
(0x2f) 390 159.74 T
(Interf) 330 149.74 T
(ace:) 349.9 149.74 T
(int getgid\050v) 390 149.74 T
(oid\051;) 431.57 149.74 T
(Semantics:) 330 139.74 T
(See) 390 139.74 T
1 F
(getgid\0502\051) 405.25 139.74 T
2 F
(.) 453.85 139.74 T
0 F
(IOCTL) 318 118.74 T
2 F
(:) 347.01 118.74 T
(De) 390 118.74 T
(vice control interf) 400.27 118.74 T
(ace.) 464.66 118.74 T
(Syscode:) 330 107.74 T
(0x36) 390 107.74 T
(Interf) 330 97.74 T
(ace:) 349.9 97.74 T
(int ioctl\050int fd, int request, char *ar) 390 97.74 T
(g\051;) 515.82 97.74 T
(Semantics:) 330 87.74 T
(See) 390 87.74 T
1 F
(ioctl\0502\051) 405.25 87.74 T
2 F
(.) 448.45 87.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
2 10 Q
0 X
0 0 0 1 0 0 0 K
(21) 300.98 37.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(FST) 59.98 713.74 T
(A) 75.67 713.74 T
(T) 81.32 713.74 T
2 F
(:) 86.87 713.74 T
(Get \336le descriptor status.) 131.98 713.74 T
(Syscode:) 71.98 702.74 T
(0x3e) 131.98 702.74 T
(Interf) 71.98 692.74 T
(ace:) 91.88 692.74 T
(int fstat\050int fd, struct stat *b) 131.98 692.74 T
(uf\051;) 231.79 692.74 T
(Semantics:) 71.98 682.74 T
(See) 131.98 682.74 T
1 F
(fstat\0502\051) 147.22 682.74 T
2 F
(.) 190.42 682.74 T
0 F
(GETP) 59.98 661.74 T
(A) 83.82 661.74 T
(GESIZE) 89.82 661.74 T
2 F
(:) 123.34 661.74 T
(Get page size.) 131.98 661.74 T
(Syscode:) 71.98 650.74 T
(0x40) 131.98 650.74 T
(Interf) 71.98 640.74 T
(ace:) 91.88 640.74 T
(int getpagesize\050v) 131.98 640.74 T
(oid\051;) 193.03 640.74 T
(Semantics:) 71.98 630.74 T
(See) 131.98 630.74 T
1 F
(getpagesize\0502\051) 147.22 630.74 T
2 F
(.) 222.82 630.74 T
0 F
(GETDT) 59.98 609.74 T
(ABLESIZE) 90.68 609.74 T
2 F
(: Get \336le descriptor table size.) 135.69 609.74 T
(Syscode:) 71.98 598.74 T
(0x59) 131.98 598.74 T
(Interf) 71.98 588.74 T
(ace:) 91.88 588.74 T
(int getdtablesize\050v) 131.98 588.74 T
(oid\051;) 198.04 588.74 T
(Semantics:) 71.98 578.74 T
(See) 131.98 578.74 T
1 F
(getdtablesize\0502\051) 147.22 578.74 T
2 F
(.) 233.62 578.74 T
0 F
(DUP2) 59.98 557.74 T
2 F
(:) 82.97 557.74 T
(Duplicate a \336le descriptor) 131.98 557.74 T
(.) 224.71 557.74 T
(Syscode:) 71.98 546.74 T
(0x5a) 131.98 546.74 T
(Interf) 71.98 536.74 T
(ace:) 91.88 536.74 T
(int dup2\050int fd1, int fd2\051;) 131.98 536.74 T
(Semantics:) 71.98 526.74 T
(See) 131.98 526.74 T
1 F
(dup2\0502\051) 147.22 526.74 T
2 F
(.) 185.02 526.74 T
0 F
(FCNTL) 59.98 505.74 T
2 F
(:) 90.48 505.74 T
(File control.) 131.98 505.74 T
(Syscode:) 71.98 494.74 T
(0x5c) 131.98 494.74 T
(Interf) 71.98 484.74 T
(ace:) 91.88 484.74 T
(int fcntl\050int fd, int cmd, int ar) 131.98 484.74 T
(g\051;) 237.31 484.74 T
(Semantics:) 71.98 474.74 T
(See) 131.98 474.74 T
1 F
(fcntl\0502\051) 147.22 474.74 T
2 F
(.) 190.42 474.74 T
0 F
(SELECT) 59.98 453.74 T
2 F
(:) 95.04 453.74 T
(Synchronous I/O multiple) 131.98 453.74 T
(xing.) 225.34 453.74 T
(Syscode:) 71.98 442.74 T
(0x5d) 131.98 442.74 T
(Interf) 71.98 432.74 T
(ace:) 91.88 432.74 T
(int select \050int width, fd_set *readfds, fd_set) 131.98 432.74 T
(*writefds, fd_set *e) 131.98 422.74 T
(xceptfds, struct time) 203.08 422.74 T
(v) 276.09 422.74 T
(al) 280.37 422.74 T
(*timeout\051;) 131.98 412.74 T
(Semantics:) 71.98 402.74 T
(See) 131.98 402.74 T
1 F
(select\0502\051) 147.22 402.74 T
2 F
(.) 195.82 402.74 T
0 F
(GETTIMEOFD) 59.98 381.74 T
(A) 121.67 381.74 T
(Y) 127.27 381.74 T
2 F
(: Get the date and time.) 132.94 381.74 T
(Syscode:) 71.98 370.74 T
(0x74) 131.98 370.74 T
(Interf) 71.98 360.74 T
(ace:) 91.88 360.74 T
(struct time) 131.98 360.74 T
(v) 170 360.74 T
(al {) 174.28 360.74 T
(long tv_sec;) 139.18 350.74 T
(long tv_usec;) 139.18 340.74 T
(};) 131.98 330.74 T
(struct int {) 131.98 320.74 T
(timezone tz_minuteswest;) 139.18 310.74 T
(int tz_dsttime;) 139.18 300.74 T
(};) 131.98 290.74 T
(int gettimeofday\050struct time) 131.98 280.74 T
(v) 232.24 280.74 T
(al *tp,) 236.52 280.74 T
(struct timezone *tzp\051;) 139.18 270.74 T
(Semantics:) 71.98 260.74 T
(See) 131.98 260.74 T
1 F
(gettimeofday\0502\051) 147.22 260.74 T
2 F
(.) 228.22 260.74 T
0 F
(WRITEV) 59.98 239.74 T
2 F
(:) 96.81 239.74 T
(Write output, v) 131.98 239.74 T
(ectored.) 186.59 239.74 T
(Syscode:) 71.98 228.74 T
(0x79) 131.98 228.74 T
(Interf) 71.98 218.74 T
(ace:) 91.88 218.74 T
(int write) 131.98 218.74 T
(v\050int fd, struct io) 162 218.74 T
(v) 222.36 218.74 T
(ec *io) 226.73 218.74 T
(v) 248.34 218.74 T
(, int cnt\051;) 252.25 218.74 T
(Semantics:) 71.98 208.74 T
(See) 131.98 208.74 T
1 F
(writev\0502\051) 147.22 208.74 T
2 F
(.) 195.82 208.74 T
0 F
(UTIMES) 59.98 187.74 T
2 F
(:) 95.48 187.74 T
(Set \336le times.) 131.98 187.74 T
(Syscode:) 71.98 176.74 T
(0x8a) 131.98 176.74 T
(Interf) 71.98 166.74 T
(ace:) 91.88 166.74 T
(int utimes\050char *\336le, struct time) 131.98 166.74 T
(v) 247 166.74 T
(al *tvp\051;) 251.27 166.74 T
(Semantics:) 71.98 156.74 T
(See) 131.98 156.74 T
1 F
(utimes\0502\051) 147.22 156.74 T
2 F
(.) 195.82 156.74 T
0 F
(GETRLIMIT) 59.98 135.74 T
2 F
(:) 112.54 135.74 T
(Get maximum resource consumption.) 131.98 135.74 T
(Syscode:) 71.98 124.74 T
(0x90) 131.98 124.74 T
(Interf) 71.98 114.74 T
(ace:) 91.88 114.74 T
(int getrlimit\050int res, struct rlimit *rlp\051;) 131.98 114.74 T
(Semantics:) 71.98 104.74 T
(See) 131.98 104.74 T
1 F
(getrlimit\0502\051) 147.22 104.74 T
2 F
(.) 212.02 104.74 T
0 F
(SETRLIMIT) 59.98 83.74 T
2 F
(:) 110.54 83.74 T
(Set maximum resource consumption.) 131.98 83.74 T
(Syscode:) 330 713.74 T
(0x91) 390 713.74 T
(Interf) 330 703.74 T
(ace:) 349.9 703.74 T
(int setrlimit\050int res, struct rlimit *rlp\051;) 390 703.74 T
(Semantics:) 330 693.74 T
(See) 390 693.74 T
1 F
(setrlimit\0502) 405.25 693.74 T
2 F
(\051.) 464.65 693.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 21
%%DocumentFonts: Times-Bold
%%+ Courier
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Bold
%%+ Times-BoldItalic
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Symbol
%%EOF
