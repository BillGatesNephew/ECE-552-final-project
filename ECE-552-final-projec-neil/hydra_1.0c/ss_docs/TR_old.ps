%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 25 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Times-BoldItalic FMFONTDEFINE
6 0 /Helvetica-Bold FMFONTDEFINE
7 0 /Helvetica FMFONTDEFINE
8 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
54 567.29 558 738 R
7 X
0 0 0 1 0 0 0 K
V
0 16 Q
0 X
(Ev) 92.59 727.33 T
(aluating Futur) 111.1 727.33 T
(e Micr) 210.83 727.33 T
(opr) 255.41 727.33 T
(ocessors: the SimpleScalar T) 279.12 727.33 T
(ool Set) 473.63 727.33 T
1 12 Q
(Doug Bur) 154.54 694 T
(ger*) 201.99 694 T
(Computer Sciences Department) 112.61 666 T
(Uni) 107.75 651 T
(v) 125.45 651 T
(ersity of W) 131.27 651 T
(isconsin-Madison) 184.78 651 T
(1210 W) 128.92 636 T
(est Dayton Street) 166.29 636 T
(Madison, W) 109.84 621 T
(isconsin 53706 USA) 168.68 621 T
(T) 336.06 693.86 T
(odd M. Austin) 342.43 693.86 T
1 8 Q
(\240) 412.1 697.86 T
1 12 Q
( and Ste) 416.1 693.86 T
(v) 454.47 693.86 T
(e Bennett) 460.29 693.86 T
1 8 Q
(\340) 505.95 697.86 T
(\240) 323.02 669.86 T
1 12 Q
(MicroComputer Research Labs, JF3-359) 327.02 665.86 T
1 8 Q
(\340) 314.35 654.86 T
1 12 Q
(Measurement Architecture Planning, JF1-91) 318.35 650.86 T
(Intel Corporation, 2111 NE 25th A) 325.21 635.86 T
(v) 492.31 635.86 T
(enue) 498.13 635.86 T
(Hillsboro, OR 97124 USA) 359 620.86 T
2 10 Q
(*Contact: dburger@cs.wisc.edu) 219.07 596.05 T
(http://www.cs.wisc.edu/~mscalar/simplescalar.html) 159.07 583.05 T
1 F
(1) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 11 Q
(Abstract) 146.76 554.52 T
0 8.8 Q
(1) 187.69 558.92 T
3 9 Q
0.27 (This document describes the SimpleScalar tool set, a collec-) 66 539.86 P
0.13 (tion of publicly-available simulation tools that use detailed e) 54 528.86 P
0.13 (xe-) 273.87 528.86 P
2.06 (cution-driven to simulate modern pr) 54 517.86 P
2.06 (ocessor ar) 192.31 517.86 P
2.06 (c) 231.78 517.86 P
2.06 (hitectur) 235.64 517.86 P
2.06 (es. In) 263.3 517.86 P
1.28 (this r) 54 506.86 P
1.28 (eport, we give an o) 73.71 506.86 P
1.28 (vervie) 147.5 506.86 P
1.28 (w of the tool set, show how to) 169.35 506.86 P
-0.19 (obtain, install and use it. W) 54 495.86 P
-0.19 (e also discuss details about the tools\325) 151.49 495.86 P
(internals, and document the SimpleScalar ar) 54 484.86 T
(c) 214.66 484.86 T
(hitectur) 218.52 484.86 T
(e) 246.19 484.86 T
(.) 250.05 484.86 T
0 12 Q
(1  Ov) 54 459.86 T
(er) 81.22 459.86 T
(view) 91.75 459.86 T
1 9 Q
1.49 (Modern processors are e) 66 442.86 P
1.49 (xtremely comple) 158.55 442.86 P
1.49 (x pieces of engi-) 220.65 442.86 P
1.7 (neering. Researching aspects of processor and system design) 54 432.86 P
2.92 (with these complicated beasts requires e) 54 422.86 P
2.92 (xcellent simulation) 213.18 422.86 P
-0.16 (tools. Prototyping processors in hardw) 54 412.86 P
-0.16 (are is e) 192.01 412.86 P
-0.16 (xpensi) 217.04 412.86 P
-0.16 (v) 240.32 412.86 P
-0.16 (e and time-) 244.68 412.86 P
1.08 (consuming, particularly during the initial phases of a research) 54 402.86 P
1.69 (project. Mathematical performance models of current-genera-) 54 392.86 P
1.18 (tion processors can be inaccurate, gi) 54 382.86 P
1.18 (v) 190.15 382.86 P
1.18 (en the aggressi) 194.51 382.86 P
1.18 (v) 250.14 382.86 P
1.18 (e use of) 254.5 382.86 P
0.28 (caches, out-of-order e) 54 372.86 P
0.28 (x) 133.13 372.86 P
0.28 (ecution, and speculation in these proces-) 137.5 372.86 P
(sors.) 54 362.86 T
0.24 (Ho) 66 352.86 P
0.24 (we) 76.77 352.86 P
0.24 (v) 87.04 352.86 P
0.24 (er) 91.41 352.86 P
0.24 (, the researcher does not al) 98.04 352.86 P
0.24 (w) 195.1 352.86 P
0.24 (ays w) 201.51 352.86 P
0.24 (ant to simulate at) 222.4 352.86 P
0.32 (the same le) 54 342.86 P
0.32 (v) 94.9 342.86 P
0.32 (el of detail. Initial studies, or isolation of one com-) 99.26 342.86 P
-0.2 (ponent of the system, require a f) 54 332.86 P
-0.2 (ast simulator that abstracts a) 168.91 332.86 P
-0.2 (w) 269.95 332.86 P
-0.2 (ay) 276.36 332.86 P
0.57 (unnecessary detail. Measuring the ef) 54 322.86 P
0.57 (fect of a design change on) 187.78 322.86 P
2.35 (o) 54 312.86 P
2.35 (v) 58.37 312.86 P
2.35 (erall processor or system performance requires a detailed) 62.73 312.86 P
0.76 (simulator that captures the interactions of all the dif) 54 302.86 P
0.76 (ferent pro-) 245.86 302.86 P
5.4 (cessor components. Furthermore, the pace of processor) 54 292.86 P
0.32 (impro) 54 282.86 P
0.32 (v) 75.37 282.86 P
0.32 (ements mandates a simulation en) 79.73 282.86 P
0.32 (vironment that is easily) 199.64 282.86 P
0.2 (e) 54 272.86 P
0.2 (xtensible and \337e) 57.86 272.86 P
0.2 (xible\321lest the intrepid graduate student \336nish) 117.12 272.86 P
(coding a simulator only to \336nd it out of date.) 54 262.86 T
3.87 (The SimpleScalar tool set, documented in this report,) 66 252.86 P
1.7 (addresses the abo) 54 242.86 P
1.7 (v) 120.25 242.86 P
1.7 (e concerns. The tool set pro) 124.61 242.86 P
1.7 (vides a GCC-) 232.46 242.86 P
0.24 (based compiler and associated utilities that produce object code) 54 232.86 P
0.7 (tar) 54 222.86 P
0.7 (geted to) 63.33 222.86 P
0.7 (w) 92.56 222.86 P
0.7 (ard the SimpleScalar architecture, which is itself a) 98.97 222.86 P
(deri) 54 212.86 T
(v) 67.77 212.86 T
(ation of the MIPS architecture [1].) 72.04 212.86 T
-0.05 (The adv) 66 202.86 P
-0.05 (antages of the SimpleScalar tools are high \337e) 94.96 202.86 P
-0.05 (xibility) 257.18 202.86 P
-0.05 (,) 282.61 202.86 P
1.84 (portability) 54 192.86 P
1.84 (, e) 90.92 192.86 P
1.84 (xtensibility) 101.12 192.86 P
1.84 (, and performance. Their \337e) 141.05 192.86 P
1.84 (xibility is) 248.75 192.86 P
-0.17 (demonstrated by the inclusion of \336v) 54 182.86 P
-0.17 (e processor simulators in the) 182.77 182.86 P
-0.08 (release. These \336v) 54 172.86 P
-0.08 (e are e) 116.43 172.86 P
-0.08 (x) 139.6 172.86 P
-0.08 (ecution-dri) 143.97 172.86 P
-0.08 (v) 183.24 172.86 P
-0.08 (en processor simulators for) 187.6 172.86 P
1.08 (the SimpleScalar architecture, which range from an e) 54 162.86 P
1.08 (xtremely) 252.86 162.86 P
0.19 (f) 54 152.86 P
0.19 (ast functional simulator to a detailed out-of-order issue proces-) 56.91 152.86 P
0.14 (sor simulator that supports non-blocking caches and speculati) 54 142.86 P
0.14 (v) 276.49 142.86 P
0.14 (e) 280.86 142.86 P
(e) 54 132.86 T
(x) 57.86 132.86 T
(ecution.) 62.23 132.86 T
54 112 284.85 127 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 125 207 125 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
0.44 (1. This research has been supported by NSF Grants CCR-9303030 and) 54 106.67 P
1.33 (MIP-9505853, ONR Grant N00014-93-1-0465, a donation from Intel) 54 96.67 P
0.44 (Corp., and by U.S. Army Intelligence Center and F) 54 86.67 P
0.44 (ort Huachuca under) 220.9 86.67 P
(Contract D) 54 76.67 T
(ABT63-95-C-0127 and ARP) 89.01 76.67 T
(A order no. D346) 180.71 76.67 T
1 9 Q
1.01 (The tool set is portable, requiring only that the GNU tools) 321.33 555.86 P
-0.07 (may be installed on the host system. The tool set has been tested) 309.33 545.86 P
1.58 (e) 309.33 535.86 P
1.58 (xtensi) 313.2 535.86 P
1.58 (v) 334.47 535.86 P
1.58 (ely on both Sparc SunOS and Solaris platforms. The) 338.84 535.86 P
-0.01 (tool set is easily e) 309.33 525.86 P
-0.01 (xtensible\321due mostly to the w) 373.14 525.86 P
-0.01 (ay in which we) 485.49 525.86 P
-0.12 (de\336ne the instruction set. W) 309.33 515.86 P
-0.12 (e designed the instruction set to sup-) 409.39 515.86 P
1.08 (port easy annotation of instructions, without requiring a retar-) 309.33 505.86 P
4.86 (geted compiler for incremental changes. The instruction) 309.33 495.86 P
-0.01 (de\336nition method, along with the ported GNU tools, mak) 309.33 485.86 P
-0.01 (es ne) 515.68 485.86 P
-0.01 (w) 533.69 485.86 P
0.19 (simulators easy to write, and the old ones e) 309.33 475.86 P
0.19 (v) 465.9 475.86 P
0.19 (en easier to e) 470.26 475.86 P
0.19 (xtend.) 517.94 475.86 P
0.43 (Finally) 309.33 465.86 P
0.43 (, the simulators ha) 334.26 465.86 P
0.43 (v) 401.35 465.86 P
0.43 (e been aggressi) 405.71 465.86 P
0.43 (v) 461.32 465.86 P
0.43 (ely tuned for perfor-) 465.69 465.86 P
0.6 (mance, and can run codes approaching \322real\323 sizes in tractable) 309.33 455.86 P
(amounts of time.) 309.33 445.86 T
0.68 (In addition to the tools based on the SimpleScalar architec-) 321.33 435.86 P
1.03 (ture, we also pro) 309.33 425.86 P
1.03 (vide a tool that uses the SimpleScalar design) 372.26 425.86 P
0.13 (philosoph) 309.33 415.86 P
0.13 (y to simulate binaries compiled for a tar) 344.8 415.86 P
0.13 (get Linux/x86) 489.3 415.86 P
0.51 (system. This tool, called SimpleScalar x86, currently runs only) 309.33 405.86 P
0.46 (on a Sparc SunOS host, b) 309.33 395.86 P
0.46 (ut is not prohibiti) 403.47 395.86 P
0.46 (v) 466.9 395.86 P
0.46 (ely dif) 471.27 395.86 P
0.46 (\336cult to port) 494.76 395.86 P
2 (to other platforms \050in particular) 309.33 385.86 P
2 (, a port to a Linux/x86 host) 430.45 385.86 P
(w) 309.33 375.86 T
(ould be tri) 315.74 375.86 T
(vial\051.) 352.52 375.86 T
-0.02 (The rest of this document contains information about obtain-) 321.33 365.86 P
0.32 (ing, installing, running, using, and modifying the simulators. In) 309.33 355.86 P
0.56 (Section) 309.33 345.86 P
0.56 (2 we pro) 338.58 345.86 P
0.56 (vide a detailed procedure for do) 371.07 345.86 P
0.56 (wnloading the) 488.38 345.86 P
0.6 (release, installing it, and getting it up and running. W) 309.33 335.86 P
0.6 (e pro) 505.98 335.86 P
0.6 (vide) 524.69 335.86 P
1.61 (such instructions for both the main SimpleScalar release and) 309.33 325.86 P
1.77 (SimpleScalar x86. In Section) 309.33 315.86 P
1.77 (3, we discuss the SimpleScalar) 421.88 315.86 P
0.27 (architecture itself in detail. In Section) 309.33 305.86 P
0.27 (4, we discuss the internal) 448.39 305.86 P
1.05 (details of the SimpleScalar processor simulators. In Section) 309.33 295.86 P
1.05 (5,) 533.44 295.86 P
-0.18 (we discuss some details about the SimpleScalar x86 internals. In) 309.33 285.86 P
0.29 (Section) 309.33 275.86 P
0.29 (6, we pro) 338.58 275.86 P
0.29 (vide the history of the tools\325 de) 372.77 275.86 P
0.29 (v) 486.79 275.86 P
0.29 (elopment and) 491.15 275.86 P
0.64 (conclude. Appendices A and B contain complete de\336nitions of) 309.33 265.86 P
(the SimpleScalar instruction set and system calls, respecti) 309.33 255.86 T
(v) 517.09 255.86 T
(ely) 521.46 255.86 T
(.) 531.87 255.86 T
0 12 Q
(2  Installation and Use) 309.33 231.86 T
1 9 Q
1.2 (The only restrictions on using and distrib) 321.33 214.86 P
1.2 (uting the tool set) 476.34 214.86 P
0.27 (are that \0501\051 the cop) 309.33 204.86 P
0.27 (yright notice must accompan) 378.28 204.86 P
0.27 (y all re-releases) 483.18 204.86 P
0.74 (of the tool set, and \0502\051 third parties \050i.e., you\051 are forbidden to) 309.33 194.86 P
-0.15 (place an) 309.33 184.86 P
-0.15 (y additional distrib) 338.79 184.86 P
-0.15 (ution restrictions on e) 406.32 184.86 P
-0.15 (xtensions to the) 483.98 184.86 P
0.77 (tool set that you release. The cop) 309.33 174.86 P
0.77 (yright notice can be found in) 432.6 174.86 P
0.53 (the distrib) 309.33 164.86 P
0.53 (ution directory as well as at the head of all simulator) 345.93 164.86 P
(source \336les. W) 309.33 154.86 T
(e ha) 362.35 154.86 T
(v) 376.92 154.86 T
(e included the cop) 381.28 154.86 T
(yright here as well:) 446.93 154.86 T
3 F
(Copyright \050C\051 1994, 1995, 1996 by T) 309.33 141.86 T
(odd M. A) 442.51 141.86 T
(ustin) 475.57 141.86 T
-0.04 (This tool set is distrib) 309.33 128.86 P
-0.04 (uted \322as is\323 in the hope that it will be use-) 387.03 128.86 P
0.41 (ful. The tool set comes with no warr) 309.33 118.86 P
0.41 (anty) 441.61 118.86 P
0.41 (, and no author or dis-) 456.61 118.86 P
1.24 (trib) 309.33 108.86 P
1.24 (utor accepts any r) 322.16 108.86 P
1.24 (esponsibility for the consequences of its) 390.77 108.86 P
(use) 309.33 98.86 T
(.) 321.2 98.86 T
0.03 (Everyone is gr) 309.33 85.86 P
0.03 (anted permission to copy) 361.75 85.86 P
0.03 (, modify and r) 451.6 85.86 P
0.03 (edistrib) 501.87 85.86 P
0.03 (ute) 529.19 85.86 P
(this tool set under the following conditions:) 309.33 75.86 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(2) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
(\245) 54 732 T
2.63 (This tool set is distrib) 72 732 P
2.63 (uted for non-commer) 160.35 732 P
2.63 (cial use only) 241.26 732 P
2.63 (.) 291.51 732 P
2.19 (Please contact the maintainer for r) 72 721 P
2.19 (estrictions applying to) 208.87 721 P
(commer) 72 710 T
(cial use of these tools.) 100.66 710 T
(\245) 54 697 T
0.41 (P) 72 697 P
0.41 (ermission is gr) 76.78 697 P
0.41 (anted to anyone to mak) 130.96 697 P
0.41 (e or distrib) 216.48 697 P
0.41 (ute copies) 257.11 697 P
-0.04 (of this tool set, either as r) 72 686 P
-0.04 (eceived or modi\336ed, in any medium,) 163.71 686 P
0.75 (pr) 72 675 P
0.75 (o) 79.6 675 P
0.75 (vided that all copyright notices, permission and nonwar-) 84.01 675 P
1.33 (r) 72 664 P
1.33 (anty notices ar) 75.37 664 P
1.33 (e pr) 131.19 664 P
1.33 (eserved, and that the distrib) 146.43 664 P
1.33 (utor gr) 252.31 664 P
1.33 (ants) 278.76 664 P
0.69 (the r) 72 653 P
0.69 (ecipient permission for further r) 89.11 653 P
0.69 (edistrib) 207.55 653 P
0.69 (ution as permit-) 234.87 653 P
(ted by this document.) 72 642 T
(\245) 54 629 T
0.28 (P) 72 629 P
0.28 (ermission is gr) 76.78 629 P
0.28 (anted to distrib) 130.71 629 P
0.28 (ute these tools in compiled or) 186.1 629 P
2 (e) 72 618 P
2 (xecutable form under the same conditions that apply for) 75.82 618 P
-0.2 (sour) 72 607 P
-0.2 (ce code) 87.67 607 P
-0.2 (, pr) 114.61 607 P
-0.2 (o) 126.5 607 P
-0.2 (vided that either: \0501\051 it is accompanied by the) 130.91 607 P
2.36 (corr) 72 596 P
2.36 (esponding mac) 87.17 596 P
2.36 (hine-r) 143.63 596 P
2.36 (eadable sour) 165.29 596 P
2.36 (ce code) 214.07 596 P
2.36 (, or \0502\051 it is) 243.57 596 P
1.39 (accompanied by a written of) 72 585 P
1.39 (fer) 179.9 585 P
1.39 (, with no time limit, to give) 188.9 585 P
4.27 (anyone a mac) 72 574 P
4.27 (hine-r) 130.38 574 P
4.27 (eadable copy of the corr) 152.05 574 P
4.27 (esponding) 256.76 574 P
0.4 (sour) 72 563 P
0.4 (ce code in r) 87.67 563 P
0.4 (eturn for r) 130.79 563 P
0.4 (eimb) 168.76 563 P
0.4 (ur) 186.08 563 P
0.4 (sement of the cost of distri-) 193.99 563 P
-0.14 (b) 72 552 P
-0.14 (ution. This written of) 76.32 552 P
-0.14 (fer must permit verbatim duplication by) 151.24 552 P
0.21 (anyone) 72 541 P
0.21 (, or \0503\051 it is distrib) 97.9 541 P
0.21 (uted by someone who r) 165.3 541 P
0.21 (eceived only) 248.82 541 P
1.52 (the e) 72 530 P
1.52 (xecutable form, and is accompanied by a copy of the) 90.59 530 P
(written of) 72 519 T
(fer of sour) 106.6 519 T
(ce code that the) 143.77 519 T
(y r) 200.23 519 T
(eceived concurr) 209.65 519 T
(ently) 267.04 519 T
(.) 284.04 519 T
0.6 (In other wor) 54 506 P
0.6 (ds, you ar) 99.87 506 P
0.6 (e welcome to use) 136.49 506 P
0.6 (, shar) 199.44 506 P
0.6 (e and impr) 220.21 506 P
0.6 (o) 260.01 506 P
0.6 (ve these) 264.42 506 P
1.1 (tools. Y) 54 496 P
1.1 (ou ar) 81.28 496 P
1.1 (e forbidden to forbid anyone else to use) 101.3 496 P
1.1 (, shar) 251.65 496 P
1.1 (e and) 272.91 496 P
(impr) 54 486 T
(o) 70.6 486 T
(ve what you give them.) 75.01 486 T
0 11 Q
(2.1  Obtaining the tools) 54 463.67 T
1 9 Q
0.23 (The tools can either be obtained through the W) 66 449 P
0.23 (orld W) 236.63 449 P
0.23 (ide W) 261.75 449 P
0.23 (eb,) 283.01 449 P
0.21 (or by con) 54 439 P
0.21 (v) 88.05 439 P
0.21 (entional ftp. F) 92.41 439 P
0.21 (or e) 143.44 439 P
0.21 (xample, to get the \336le \322release.tar) 157.26 439 P
0.21 (.gz\323) 279.02 439 P
(via the WWW) 54 429 T
(, enter the URL:) 105.16 429 T
4 8 Q
(ftp://ftp.cs.wisc.edu/sohi/Code/simplescalar/) 66.02 416.67 T
(release.tar) 82.8 406.67 T
1 9 Q
(and to obtain the same \336le with traditional ftp:) 54 393 T
4 8 Q
(ftp ftp.cs.wisc.edu) 66 379.67 T
(user: anonymous) 66.02 369.67 T
(password: enter your e-mail address here) 66.02 359.67 T
(cd sohi/Code/simplescalar) 66.02 349.67 T
(get release.tar) 66 339.67 T
1 9 Q
0 (Note the \322tar) 66 326 P
0 (.gz\323 suf) 111.99 326 P
0 (\336x: by requesting the \336le without the \322.gz\323) 139.76 326 P
1.86 (suf) 54 316 P
1.86 (\336x, the ftp serv) 64.77 316 P
1.86 (er uncompresses it automatically) 124.7 316 P
1.86 (. T) 247.92 316 P
1.86 (o get the) 259.05 316 P
(compressed v) 54 306 T
(ersion, simply request the \336le with the \322.gz\323 suf) 103.1 306 T
(\336x.) 274.86 306 T
(The tw) 66 296 T
(o distrib) 91.15 296 T
(ution \336les in the directory are:) 120.73 296 T
(\245) 54 284 T
0 F
0.22 (r) 72 284 P
0.22 (elease.tar) 75.83 284 P
0.22 (.gz) 111.17 284 P
1 F
0.22 ( - contains the full-blo) 121.91 284 P
0.22 (wn SimpleScalar release.) 202.58 284 P
-0.19 (This \336le contains the GCC source, utilities, simulator sources,) 72 273 P
0.81 (essentially e) 72 262 P
0.81 (v) 116.83 262 P
0.81 (erything you will need to port the tool suite to) 121.2 262 P
(your system. This \336le is quite lar) 72 251 T
(ge\32163 MB uncompressed.) 190.09 251 T
(\245) 54 238 T
0 F
0.19 (x86.tar) 72 238 P
0.19 (.gz) 98.34 238 P
1 F
0.19 ( - contains the SimpleScalar x86 tool set, for simu-) 109.09 238 P
1.91 (lating x86 Linux binaries. Includes the x86 simulator) 72 227 P
1.91 (, b) 276.02 227 P
1.91 (ut) 286.76 227 P
2.42 (does not include the GNU tools or Linux sources. Fully) 72 216 P
1.86 (installed \050with GNU and Linux\051, it requires 170 MB \050not) 72 205 P
2.61 (including tar \336les\051. Simplescalar x86 currently runs only) 72 194 P
0.15 (under SunOS, although ports to other systems are not be pro-) 72 183 P
(hibiti) 72 172 T
(v) 90.78 172 T
(ely hard.) 95.15 172 T
1.21 (Once you ha) 66 159 P
1.21 (v) 113.72 159 P
1.21 (e selected the appropriate \336le, place the do) 118.08 159 P
1.21 (wn-) 279.77 159 P
0.09 (loaded \336le into the desired tar) 54 149 P
0.09 (get directory) 161.55 149 P
0.09 (. If you obtained the \336le) 206.79 149 P
1.17 (with the \322.gz\323 suf) 54 139 P
1.17 (\336x, run the GNU decompress utility \050) 120.76 139 P
0 F
1.17 (gunzip) 262.5 139 P
1 F
1.17 (\051.) 288.51 139 P
0.21 (The \336le should no) 54 129 P
0.21 (w ha) 119.66 129 P
0.21 (v) 136.93 129 P
0.21 (e a \322.tar\323 suf) 141.29 129 P
0.21 (\336x. T) 187.18 129 P
0.21 (o remo) 206.17 129 P
0.21 (v) 231.49 129 P
0.21 (e the directories) 235.86 129 P
(from the archi) 54 119 T
(v) 104.76 119 T
(e:) 109.12 119 T
4 8 Q
(tar xf filename.tar) 66 106.67 T
1 9 Q
0.51 (If you are do) 54 93 P
0.51 (wnloading the full release, you will ha) 101.53 93 P
0.51 (v) 242.62 93 P
0.51 (e the follo) 246.98 93 P
0.51 (w-) 284.27 93 P
(ing subdirectories, which ha) 54 82 T
(v) 155.3 82 T
(e the follo) 159.67 82 T
(wing contents:) 195.94 82 T
(\245) 318.24 732 T
0 F
1.09 (simplesim-0.1) 336.24 732 P
1 F
1.09 ( - holds code for \336v) 388.99 732 P
1.09 (e SimpleScalar processor) 465.06 732 P
(simulators and all supporting code \336les.) 336.24 721 T
(\245) 318.24 708 T
0 F
0.48 (gcc-2.6.3) 336.24 708 P
1 F
0.48 ( - holds the GNU C compiler code, tar) 369.73 708 P
0.48 (geted to) 511.1 708 P
0.48 (w) 540.1 708 P
0.48 (ard) 546.51 708 P
(the SimpleScalar architecture.) 336.24 697 T
(\245) 318.24 684 T
0 F
3.32 (binutils-2.5.2) 336.24 684 P
1 F
3.32 ( - contains the GNU binary utilities code,) 386.25 684 P
(ported to the SimpleScalar architecture) 336.24 673 T
(\245) 318.24 660 T
0 F
1.23 (glibc-1.09) 336.24 660 P
1 F
1.23 (- contains the GNU libraries code, ported to the) 376.97 660 P
(SimpleScalar architecture.) 336.24 649 T
(\245) 318.24 636 T
0 F
1.97 (f2c-1994.09.27) 336.24 636 P
1 F
1.97 ( - contains the 1994 release of A) 391.23 636 P
1.97 (T&T Bell) 520.77 636 P
(Labs\325 FOR) 336.24 625 T
(TRAN to C translator code.) 375.95 625 T
(\245) 318.24 612 T
0 F
1.8 (test-pr) 336.24 612 P
1.8 (ogs) 361.57 612 P
1 F
1.8 ( - contains a battery of benchmarks that can be) 374.07 612 P
(used to test the simulators) 336.24 601 T
(\245) 318.24 588 T
0 F
0.48 (ss-bootstrap) 336.24 588 P
1 F
0.48 (- tar) 385.96 588 P
0.48 (get directory for the ported cross-compiler) 401.02 588 P
0.48 (,) 555.75 588 P
0.34 (compiled GNU binary utilities, and libraries that are tar) 336.24 577 P
0.34 (geted) 538.51 577 P
(to the SimpleScalar architecture.) 336.24 566 T
(\245) 318.24 552 T
0 F
1.77 (bin) 336.24 552 P
1 F
1.77 (,) 348.75 552 P
0 F
1.77 (include) 355.02 552 P
1 F
1.77 (,) 383.02 552 P
0 F
1.77 (inf) 389.29 552 P
1.77 (o) 399.57 552 P
1 F
1.77 (,) 404.07 552 P
0 F
1.77 (lib) 410.34 552 P
1 F
1.77 (,) 420.35 552 P
0 F
1.77 (man) 426.61 552 P
1 F
1.77 ( - tar) 443.61 552 P
1.77 (get directories where the) 463.98 552 P
(compiled GNU tools and support \336les will be installed.) 336.24 541 T
1.39 (The SimpleScalar x86 release contains the code \336les for the) 330.24 527 P
5.37 (simulator and tw) 318.24 517 P
5.37 (o subdirectories,) 389.4 517 P
0 F
5.37 (include) 461.89 517 P
1 F
5.37 ( and) 489.89 517 P
0 F
5.37 (tests) 518.14 517 P
1 F
5.37 (. See) 535.13 517 P
-0.2 (Section) 318.24 507 P
-0.2 (2.3 for a description of ho) 347.49 507 P
-0.2 (w to obtain the other \336les needed) 439.73 507 P
(for running SimpleScalar x86.) 318.24 497 T
0 11 Q
(2.2  Installing and running Simplescalar) 318.24 474.67 T
1 9 Q
1.54 (W) 330.24 460 P
1.54 (e depict a graphical o) 338.02 460 P
1.54 (v) 421.02 460 P
1.54 (ervie) 425.39 460 P
1.54 (w of the tool set) 443.15 460 P
1 7.2 Q
1.23 (1) 507.32 463.6 P
1 9 Q
1.54 ( in Figure) 510.92 460 P
1.54 (1.) 551.25 460 P
0.79 (Benchmarks written in FOR) 318.24 450 P
0.79 (TRAN are con) 421.8 450 P
0.79 (v) 475.99 450 P
0.79 (erted to C using Bell) 480.36 450 P
0.25 (Labs\325 f2c con) 318.24 440 P
0.25 (v) 367.87 440 P
0.25 (erter) 372.24 440 P
0.25 (. Both benchmarks written in C and those con-) 388.23 440 P
0.39 (v) 318.24 430 P
0.39 (erted from FOR) 322.61 430 P
0.39 (TRAN are compiled using the SimpleScalar v) 380.33 430 P
0.39 (er-) 548.01 430 P
3.95 (sion of GCC, which generates SimpleScalar assembly) 318.24 420 P
3.95 (. The) 535.56 420 P
2.95 (SimpleScalar assembler and loader) 318.24 410 P
2.95 (, along with the necessary) 452.96 410 P
-0.21 (ported libraries, produce SimpleScalar e) 318.24 400 P
-0.21 (x) 461.99 400 P
-0.21 (ecutables that can then be) 466.36 400 P
0.99 (fed directly into one of the pro) 318.24 390 P
0.99 (vided simulators. \050The simulators) 434.03 390 P
-0.06 (themselv) 318.24 380 P
-0.06 (es are compiled with the host platform\325) 350.6 380 P
-0.06 (s nati) 491.24 380 P
-0.06 (v) 510.2 380 P
-0.06 (e compiler\051.) 514.57 380 P
0.66 (The SimpleScalar architecture, lik) 330.24 370 P
0.66 (e the MIPS architecture [1],) 455.12 370 P
-0.21 (supports both big-endian and little-endian e) 318.24 360 P
-0.21 (x) 473.78 360 P
-0.21 (ecutables. The tool set) 478.15 360 P
0.5 (supports compilation for either of these tar) 318.24 350 P
0.5 (gets; the names for the) 474.53 350 P
1.55 (big-endian and little-endian architecture are) 318.24 340 P
0 F
1.55 (ssbig-na-sstrix) 485.7 340 P
1 F
1.55 ( and) 541.2 340 P
0 F
1.02 (sslittle-na-sstrix) 318.24 330 P
1 F
1.02 (, respecti) 379.23 330 P
1.02 (v) 412.52 330 P
1.02 (ely) 416.88 330 P
1.02 (. Y) 427.3 330 P
1.02 (ou should use the tar) 438.33 330 P
1.02 (get endian-) 516.74 330 P
0.34 (ness that matches your host platform; the simulators will generate) 318.24 320 P
1 (numerous w) 318.24 310 P
1 (arnings and may not w) 363.39 310 P
1 (ork correctly if you force the) 449.29 310 P
2.24 (compiler to pro) 318.24 300 P
2.24 (vide cross-endian support. T) 378.07 300 P
2.24 (o determine which) 486.54 300 P
0.21 (endian your host uses, run the) 318.24 290 P
0 F
0.21 (endian) 429.22 290 P
1 F
0.21 ( program located in the sim-) 455.23 290 P
-0.05 (plesim-0.1 directory) 318.24 280 P
-0.05 (. The follo) 390.59 280 P
-0.05 (wing instructions will assume a big-) 428.01 280 P
(endian installation for simplicity) 318.24 270 T
(.) 434.91 270 T
0.42 (T) 330.24 260 P
0.42 (o install the full release, \336rst mak) 335.02 260 P
0.42 (e a symbolic link to which-) 457.67 260 P
1.11 (e) 318.24 250 P
1.11 (v) 322.01 250 P
1.11 (er tar) 326.38 250 P
1.11 (get architecture you desire in the) 346.06 250 P
0 F
1.11 (ss-bootstrap) 472.65 250 P
1 F
1.11 ( directory:) 519.65 250 P
0.58 ($IDIR will represent the directory in which you are installing the) 318.24 240 P
(tools.) 318.24 230 T
4 8 Q
(cd $IDIR) 330.24 217.67 T
(ln -s ss-bootstrap/ssbig-na-sstrix) 330.24 207.67 T
1 9 Q
(Ne) 318.24 194 T
(xt, b) 328.6 194 T
(uild the GNU binary utilities) 344.42 194 T
1 7.2 Q
(2) 447.92 197.6 T
1 9 Q
(:) 451.52 194 T
4 8 Q
(cd $IDIR/binutils-2.5.2) 330.24 180.67 T
(configure --host=$HOST --target=ssbig-na-) 330.26 170.67 T
(sstrix --with-gnu-as --with-gnu-ld --pre-) 354.24 160.67 T
(fix=$IDIR) 354.24 150.67 T
318.24 132 558 147 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
327.24 145 471.24 145 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
0.44 (1. Figure) 318.24 126.67 P
0.44 (1 applies to the main SimpleScalar release b) 349.57 126.67 P
0.44 (ut not SimpleScalar) 494.01 126.67 P
(x86) 318.24 116.67 T
0.33 (2. Y) 318.24 106.67 P
0.33 (ou must ha) 331.46 106.67 P
0.33 (v) 367.07 106.67 P
0.33 (e GNU Mak) 370.95 106.67 P
0.33 (e to do the majority of installations described) 411.06 106.67 P
0.28 (in this document. T) 318.24 96.67 P
0.28 (o check if you ha) 380.66 96.67 P
0.28 (v) 436.71 96.67 P
0.28 (e the GNU v) 440.59 96.67 P
0.28 (ersion, e) 481.96 96.67 P
0.28 (x) 509.22 96.67 P
0.28 (ecute \322mak) 513.1 96.67 P
0.28 (e -) 549.51 96.67 P
0.44 (v\323 or \322gmak) 318.24 86.67 P
0.44 (e -v\323. The GNU v) 358.59 86.67 P
0.44 (ersion understands this switch and displays) 417.79 86.67 P
(v) 318.24 76.67 T
(ersion information.) 322.12 76.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(3) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(make) 66.02 461.1 T
(make install) 66 451.1 T
1 9 Q
0.91 ($HOST here is a \322canonical con\336guration\323 string that represents) 54 437.43 P
1.22 (your host architecture and system \050CPU-COMP) 54 426.43 P
1.22 (ANY) 231.52 426.43 P
1.22 (-SYSTEM\051.) 250.01 426.43 P
0.46 (The string for a Sparcstation running SunOS w) 54 415.43 P
0.46 (ould be sparc-sun-) 226.36 415.43 P
2.8 (sunos4.1.3, running Solaris: sparc-sun-solaris2, a 386 running) 54 404.43 P
2.68 (Solaris: i386-sun-solaris2.4, etc. A complete list of supported) 54 393.43 P
($HOST strings resides in $IDIR/gcc-2.6.3/INST) 54 382.43 T
(ALL.) 227.65 382.43 T
1.16 (Once the binutils ha) 66 371.43 P
1.16 (v) 141.54 371.43 P
1.16 (e been b) 145.91 371.43 P
1.16 (uilt, b) 178.04 371.43 P
1.16 (uild the simulators them-) 200.03 371.43 P
-0.16 (selv) 54 361.43 P
-0.16 (es. This is necessary to do before b) 68.36 361.43 P
-0.16 (uilding gcc, since one of the) 193.06 361.43 P
1.33 (binaries is needed for the cross-compiler b) 54 351.43 P
1.33 (uild. Y) 214.76 351.43 P
1.33 (ou should edit) 240.1 351.43 P
2.19 ($IDIR/simplesim-0.1/Mak) 54 341.43 P
2.19 (e\336le to use the desired compile \337ags) 149.66 341.43 P
(\050e.g., the correct optimization le) 54 331.43 T
(v) 169 331.43 T
(el\051 T) 173.37 331.43 T
(o b) 189.89 331.43 T
(uild the simulators:) 200.96 331.43 T
4 8 Q
(cd $IDIR/simplesim-0.1) 66 319.1 T
(make) 66 309.1 T
1 9 Q
(No) 54 295.43 T
(w) 64.77 295.43 T
(, b) 70.69 295.43 T
(uild the compiler itself:) 79.51 295.43 T
4 8 Q
(cd $IDIR/gcc-2.6.3) 66 282.1 T
(configure --host=$HOST --target=ssbig-na-) 66.02 272.1 T
(sstrix --with-gnu-as --with-gnu-ld --pre-) 90 262.1 T
(fix=$IDIR) 90 252.1 T
(make LANGUAGES=c) 66.02 242.1 T
(../simplesim-0.1/sim-safe ./enquire -f >!) 66.02 232.1 T
(float.h-cross) 82.8 222.1 T
(make install) 66 212.1 T
1 9 Q
1.62 (W) 66 198.43 P
1.62 (e pro) 73.78 198.43 P
1.62 (vide pre-b) 93.51 198.43 P
1.62 (uilt copies of the necessary libraries in ss-) 131.68 198.43 P
0.49 (bootstrap/ssbig-na-sstrix/lib, so you do not need to b) 54 188.43 P
0.49 (uild the code) 246.28 188.43 P
0.31 (in) 54 178.43 P
0 F
0.31 (glibc-1.09) 63.56 178.43 P
1 F
0.31 (, unless you change the library code. In that e) 100.81 178.43 P
0.31 (v) 266.58 178.43 P
0.31 (ent, to) 270.95 178.43 P
(b) 54 168.43 T
(uild the libraries:) 58.32 168.43 T
4 8 Q
(cd $IDIR/glibc-1.09) 66 156.1 T
(configure --prefix=$IDIR/ssbig-na-sstrix ssbig-) 66.02 146.1 T
(na-sstrix) 90 136.1 T
(setenv CC $IDIR/bin/ssbig-na-sstrix-gcc) 66.02 126.1 T
(unsetenv TZ) 66.02 116.1 T
(unsetenv MACHINE) 66.02 106.1 T
(make) 66.02 96.1 T
(make install) 66 86.1 T
1 9 Q
1.89 (Note that you must ha) 330.24 460.43 P
1.89 (v) 417.11 460.43 P
1.89 (e already installed the SimpleScalar) 421.47 460.43 P
0.11 (tools to b) 318.24 450.43 P
0.11 (uild this library) 351.79 450.43 P
0.11 (, since the glibc b) 406.93 450.43 P
0.11 (uild requires a compiled) 470.43 450.43 P
3.67 (simulator to test tar) 318.24 440.43 P
3.67 (get machine-speci\336c parameters such as) 398.85 440.43 P
(endian-ness.) 318.24 430.43 T
-0.16 (If you ha) 330.24 420.43 P
-0.16 (v) 362.23 420.43 P
-0.16 (e FOR) 366.59 420.43 P
-0.16 (TRAN benchmarks, you will need the f2c tool:) 389.64 420.43 P
4 8 Q
(cd $IDIR/f2c-1994.09.27) 330.24 408.1 T
(make) 330.26 398.1 T
(make install) 330.24 388.1 T
1 9 Q
(Finally) 318.24 374.43 T
(, b) 343.16 374.43 T
(uild the test benchmarks:) 351.98 374.43 T
4 8 Q
(cd $IDIR/test-progs) 330.24 361.1 T
(make) 330.24 351.1 T
1 9 Q
(The tool set should no) 318.24 337.43 T
(w be ready for use. T) 398.02 337.43 T
(o run a test:) 473.77 337.43 T
4 8 Q
(cd $IDIR/simplesim-0.1) 330.24 324.1 T
(sim-inorder ../test_progs/test-math) 330.24 314.1 T
1 9 Q
0.26 (The test should generate about a page of output, and will run v) 318.24 300.43 P
0.26 (ery) 546.51 300.43 P
(quickly) 318.24 289.43 T
(.) 344.65 289.43 T
0 11 Q
(2.3  Installing Simplescalar x86) 318.24 266.1 T
1 9 Q
0.07 (Decide where to install the GNU tools for x86, the x86 simula-) 330.24 251.43 P
-0.16 (tor and the Linux sources. The tools require about 170MB of space) 318.24 241.43 P
-0.04 (when installed and b) 318.24 231.43 P
-0.04 (uilt \050discounting the tar \336les\051. Set the en) 392.17 231.43 P
-0.04 (viron-) 536 231.43 P
0.7 (ment v) 318.24 221.43 P
0.7 (ariables GNUR) 343.46 221.43 P
0.7 (OO) 399.54 221.43 P
0.7 (T) 412.18 221.43 P
0.7 (, X86R) 417.01 221.43 P
0.7 (OO) 443.35 221.43 P
0.7 (T and LNXR) 455.99 221.43 P
0.7 (OO) 504.52 221.43 P
0.7 (T to be the) 517.16 221.43 P
2.33 (abo) 318.24 211.43 P
2.33 (v) 331.1 211.43 P
2.33 (e three directories, respecti) 335.47 211.43 P
2.33 (v) 439.19 211.43 P
2.33 (ely) 443.56 211.43 P
2.33 (. Then create the directory) 453.97 211.43 P
(structures needed for installation:) 318.24 201.43 T
4 8 Q
(mkdir $GNUROOT/src) 330.24 189.1 T
(mkdir $GNUROOT/i486-linux) 330.26 179.1 T
(mkdir $GNUROOT/i486-linux/bin) 330.26 169.1 T
(mkdir $GNUROOT/i486-linux/lib) 330.26 159.1 T
(mkdir $GNUROOT/i486-linux/include) 330.26 149.1 T
(mkdir $GNUROOT/bin) 330.26 139.1 T
(mkdir $GNUROOT/lib) 330.26 129.1 T
(mkdir $GNUROOT/lib/gcc-lib) 330.26 119.1 T
(mkdir $GNUROOT/lib/gcc-lib/i486-linux) 330.26 109.1 T
(mkdir $GNUROOT/lib/gcc-lib/i486-linux/2.7.2) 330.26 99.1 T
(mkdir $LNXROOT/src) 330.24 89.1 T
1 9 Q
2.21 (Place) 318.24 75.43 P
0 F
2.21 (x86.tar) 342.2 75.43 P
1 F
2.21 ( in $X86R) 369.44 75.43 P
2.21 (OO) 411.01 75.43 P
2.21 (T) 423.65 75.43 P
2.21 (, and obtain the GNU and Linux) 428.48 75.43 P
54.29 467.71 557.86 738.43 C
0 0 0 1 0 0 0 K
54.29 486.57 557.86 738.43 C
0 0 0 1 0 0 0 K
384.08 534.13 443.05 558.2 12.03 RR
0 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
N
387.39 537.14 439.74 555.19 9.03 RR
7 X
V
0 X
N
153.02 512.15 209.02 538.96 13.41 RR
V
N
150.53 514.37 206.53 541.17 13.4 RR
7 X
V
0 X
N
144.47 531.54 200.47 558.34 13.4 RR
V
N
141.98 533.75 197.98 560.55 13.4 RR
7 X
V
0 X
N
381.49 589.55 451.9 620.24 15.35 RR
V
N
378.36 592.08 448.77 622.77 15.35 RR
7 X
V
0 X
N
236.34 528.29 306.75 558.98 15.35 RR
V
N
233.21 530.82 303.62 561.51 15.35 RR
7 X
V
0 X
N
1 10 Q
(Simplescalar) 242.59 548.5 T
(GLD) 258.14 538.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
118.27 659.6 188.68 690.29 15.35 RR
V
N
115.14 662.13 185.55 692.82 15.35 RR
7 X
V
0 X
N
234.78 658.28 305.18 688.96 15.35 RR
V
N
231.65 660.8 302.05 691.49 15.35 RR
7 X
V
0 X
N
236.85 589.91 307.25 620.6 15.35 RR
V
N
233.72 592.44 304.12 623.13 15.35 RR
7 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(FOR) 125.83 726.27 T
(TRAN) 146.54 726.27 T
(C) 263.55 726.27 T
(SimpleScalar) 275.45 642.28 T
(Object \336les) 275.1 571.74 T
(SimpleScalar) 319.01 530.57 T
1 F
(SimpleScalar) 241.75 678.48 T
(SimpleScalar) 241.75 609.77 T
(SS libm.a) 150.53 543.33 T
(SS libF77.a) 155.19 523.95 T
(Host C compiler) 380.51 603.6 T
(GCC) 258.14 668.37 T
(GAS) 258.42 599.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(f2c) 143.96 673.65 T
371.66 546.16 371.66 550.23 378.7 546.16 371.66 542.1 4 Y
0 Z
N
371.66 546.16 371.66 550.23 378.7 546.16 371.66 542.1 4 Y
V
312.69 546.16 371.41 546.16 2 L
2 Z
N
268.42 700.48 272.48 700.48 268.42 693.44 264.35 700.48 4 Y
0 Z
N
268.42 700.48 272.48 700.48 268.42 693.44 264.35 700.48 4 Y
V
268.42 713.4 268.42 700.73 2 L
2 Z
N
0 F
(benchmark sour) 110.86 716.16 T
(ce) 180.96 716.16 T
268.42 633.08 272.48 633.08 268.42 626.04 264.35 633.08 4 Y
0 Z
N
268.42 633.08 272.48 633.08 268.42 626.04 264.35 633.08 4 Y
V
268.42 654.42 268.42 633.33 2 L
2 Z
N
(assembly) 284.33 632.17 T
(executables) 322.9 520.46 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
215.8 676.69 215.8 680.76 222.84 676.69 215.8 672.62 4 Y
0 Z
N
215.8 676.69 215.8 680.76 222.84 676.69 215.8 672.62 4 Y
V
192.05 676.69 215.55 676.69 2 L
2 Z
N
134.48 551.16 190.48 577.96 13.4 RR
V
N
131.99 553.37 187.99 580.16 13.4 RR
7 X
V
0 X
N
1 F
(SS libc.a) 142.21 562.95 T
268.42 571.1 272.48 571.1 268.42 564.06 264.35 571.1 4 Y
0 Z
N
268.42 571.1 272.48 571.1 268.42 564.06 264.35 571.1 4 Y
V
268.42 587.51 268.42 571.35 2 L
2 Z
N
150.35 701.08 154.41 701.08 150.35 694.04 146.28 701.08 4 Y
0 Z
N
150.35 701.08 154.41 701.08 150.35 694.04 146.28 701.08 4 Y
V
150.35 713.4 150.35 701.33 2 L
2 Z
N
224.22 546.16 224.22 550.23 231.27 546.16 224.22 542.1 4 Y
0 Z
N
224.22 546.16 224.22 550.23 231.27 546.16 224.22 542.1 4 Y
V
202.88 546.16 223.97 546.16 2 L
2 Z
N
0 F
(Simulator sour) 377.13 658.14 T
(ce) 441.12 658.14 T
(\050) 369.49 648.02 T
5 F
(e.g.) 372.82 648.02 T
0 F
(, sim-outorder) 387.26 648.02 T
(.c\051) 447.36 648.02 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Simulator) 393 542.24 T
464.93 546.16 464.93 550.23 471.98 546.16 464.93 542.1 4 Y
0 Z
N
464.93 546.16 464.93 550.23 471.98 546.16 464.93 542.1 4 Y
V
447 546.16 464.68 546.16 2 L
2 Z
N
0 F
(benchmark sour) 228.93 716.16 T
(ce) 299.02 716.16 T
(RESUL) 476.81 542.38 T
(TS) 509.23 542.38 T
413.56 632.48 417.63 632.48 413.56 625.44 409.49 632.48 4 Y
0 Z
N
413.56 632.48 417.63 632.48 413.56 625.44 409.49 632.48 4 Y
V
413.56 642.87 413.56 632.73 2 L
2 Z
N
413.56 567.49 417.63 567.49 413.56 560.45 409.49 567.49 4 Y
0 Z
N
413.56 567.49 417.63 567.49 413.56 560.45 409.49 567.49 4 Y
V
413.56 584.98 413.56 567.74 2 L
2 Z
N
192.65 565.86 M
 216.91 565.86 236.58 561.82 236.58 556.84 D
O
7 X
V
230.52 561.33 232.95 564.6 236.18 557.13 228.1 558.07 4 Y
0 Z
0 X
N
230.52 561.33 232.95 564.6 236.18 557.13 228.1 558.07 4 Y
V
192.65 565.86 M
 208.64 565.86 223.8 566.32 230.32 561.48 D
2 Z
N
235.98 536.48 M
 235.98 530.83 224.66 526.25 210.71 526.25 D
O
7 X
V
231.21 530.6 228.04 533.17 235.66 536.09 234.38 528.03 4 Y
0 Z
0 X
N
231.21 530.6 228.04 533.17 235.66 536.09 234.38 528.03 4 Y
V
231.05 530.41 M
 227.74 526.33 219.05 526.25 210.71 526.25 D
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(Figure 1. SimpleScalar tool set o) 210.25 490.33 T
(ver) 364.55 490.33 T
(vie) 379.66 490.33 T
(w) 393.41 490.33 T
0 0 0 1 0 0 0 K
54.29 467.71 557.86 738.43 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.29 483.43 557.86 483.43 2 L
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
0.13 (sources from one of the man) 54 714 P
0.13 (y gnu/linux softw) 157.23 714 P
0.13 (are mirrors) 220.9 714 P
1 7.2 Q
0.1 (1) 260.76 717.6 P
1 9 Q
0.13 (. Do) 264.36 714 P
0.13 (wn-) 279.77 714 P
1.17 (load the follo) 54 703 P
1.17 (wing \336les from the FTP site \050the paths to the \336les) 104.1 703 P
(may be dif) 54 692 T
(ferent if you use a dif) 92.27 692 T
(ferent softw) 169.27 692 T
(are mirror\051:) 212.42 692 T
4 8 Q
(systems/linux/sunsite/GCC/binutils-) 66 678.67 T
(2.6.0.14.tar.gz) 82.8 668.67 T
(systems/gnu/gcc-2.7.2.tar.gz) 66.02 658.67 T
(systems/linux/sunsite/GCC/libc-5.0.9.tar.gz) 66.02 648.67 T
(systems/linux/sunsite/kernel/v1.2/linux-) 66.02 638.67 T
(1.2.13.tar.gz) 82.8 628.67 T
(systems/linux/sunsite/GCC/libc-5.0.9.bin.tar.gz) 66 618.67 T
1 9 Q
0.6 (No) 54 605 P
0.6 (w mo) 64.77 605 P
0.6 (v) 85.49 605 P
0.6 (e the \336les from their do) 89.86 605 P
0.6 (wnloaded directory to their cor-) 176.88 605 P
(rect directories:) 54 594 T
4 8 Q
(cp binutils-2.6.0.14.tar.gz $GNUROOT/src) 66 580.67 T
(cp gcc-2.7.2.tar.gz $GNUROOT/src) 66.02 570.67 T
(cp libc-5.0.9.tar.gz $LNXROOT/src) 66.02 560.67 T
(cp linux-1.2.13.tar.gz $LNXROOT) 66.02 550.67 T
(cp libc-5.0.9.bin.tar.gz $LNXROOT) 66 540.67 T
1 9 Q
(Unpack the do) 54 527 T
(wnloaded \336les:) 106.26 527 T
4 8 Q
(cd $LNXROOT) 66 513.67 T
(gunzip linux-1.2.13.tar.gz) 66.02 503.67 T
(tar xf linux-1.2.13.tar) 66.02 493.67 T
(gunzip libc-5.0.9.bin.tar) 66.02 483.67 T
(tar xf libc-5.0.9.bin.tar) 66.02 473.67 T
(cd src) 66.02 463.67 T
(gunzip libc-5.0.9.tar.gz) 66.02 453.67 T
(tar xf libc-5.0.9.tar) 66.02 443.67 T
(cd $GNUROOT/src) 66.02 433.67 T
(gunzip binutils-2.6.0.14.tar.gz) 66.02 423.67 T
(tar xf binutils-2.6.0.14.tar) 66.02 413.67 T
(gunzip gcc.2.7.2.tar.gz) 66.02 403.67 T
(tar xf gcc-2.7.2.tar) 66.02 393.67 T
(cd $X86ROOT) 66.02 383.67 T
(tar xf x86.tar) 66 373.67 T
1 9 Q
0.2 (Y) 66 360 P
0.2 (ou may w) 71.51 360 P
0.2 (ant to remo) 107.31 360 P
0.2 (v) 148.56 360 P
0.2 (e the tar \336les at this point; the) 152.92 360 P
0.2 (y occup) 260.91 360 P
0.2 (y) 289.26 360 P
(a great deal of disk space and are not needed after this step.) 54 350 T
1.74 (The v) 66 340 P
1.74 (ersion.h include \336le is b) 88.35 340 P
1.74 (uilt when the Linux k) 181.39 340 P
1.74 (ernel is) 265.77 340 P
0.38 (compiled. Since we are not compiling the k) 54 330 P
0.38 (ernel here, we need to) 213.03 330 P
(f) 54 320 T
(ak) 56.91 320 T
(e this include \336le.) 65.31 320 T
4 8 Q
(cp $X86ROOT/include/version.h $LNXROOT/linux/) 66 307.67 T
(include/linux) 82.8 297.67 T
0 10 Q
(2.3.1  Build binutils:) 54 276.33 T
1 9 Q
0.94 (Build the v) 66 262 P
0.94 (arious utility packages for use with gcc, including) 107.67 262 P
(the GNU loader and assembler) 54 252 T
1 7.2 Q
(2) 164.97 255.6 T
1 9 Q
(.) 168.57 252 T
4 8 Q
(cd $GNUROOT/src/binutils-2.6.0.14) 66 239.67 T
(configure --target=i486-linux) 66.02 229.67 T
(cd bfd) 66.02 219.67 T
(make CC=gcc headers) 66.02 209.67 T
(cd ..) 66.02 199.67 T
(make CC=gcc) 66 189.67 T
1 9 Q
-0.03 (No) 54 176 P
-0.03 (w create links to the utilities where gcc and mak) 64.77 176 P
-0.03 (e \336les will look) 238.1 176 P
(for them:) 54 165 T
4 8 Q
(cd $GNUROOT/i486-linux/bin) 66 151.67 T
(setenv $BINROOT $GNUROOT/src/binutils-2.6.0.14) 66.02 141.67 T
(ln -s $BINROOT/binutils/objdump) 66.02 131.67 T
(objdump) 215.71 131.67 T
(ln -s $BINROOT/binutils/size) 66.02 121.67 T
(size) 215.71 121.67 T
54 102 293.76 117 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 115 207 115 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
0.74 (1. W) 54 96.67 P
0.74 (e used ftp://wuarchi) 69.65 96.67 P
0.74 (v) 134.47 96.67 P
0.74 (e.wustl.edu; you can \336nger fsf@prep.ai.mit.edu) 138.35 96.67 P
(for more information.) 54 86.67 T
(2. Y) 54 76.67 T
(ou must also use GNU mak) 66.9 76.67 T
(e here to b) 155.03 76.67 T
(uild these \336les.) 188.42 76.67 T
4 F
(ln -s $BINROOT/binutils/nm.new) 330.26 714.67 T
(nm) 479.95 714.67 T
(ln -s $BINROOT/binutils/ar) 330.26 704.67 T
(ar) 479.95 704.67 T
(ln -s $BINROOT/binutils/ranlib) 330.26 694.67 T
(ranlib) 479.95 694.67 T
(ln -s $BINROOT/ld/ld.new) 330.26 684.67 T
(ld) 479.95 684.67 T
(ln -s $BINROOT/gas/as.new) 330.26 674.67 T
(as) 479.95 674.67 T
(cd $GNUROOT/bin) 330.26 664.67 T
(ln -s $BINROOT/binutils/objdump) 330.26 654.67 T
(objdump-i486) 479.95 654.67 T
(ln -s $BINROOT/binutils/size) 330.26 644.67 T
(size-i486) 479.95 644.67 T
(ln -s $BINROOT/binutils/nm.new) 330.26 634.67 T
(nm-i486) 479.95 634.67 T
(ln -s $BINROOT/binutils/ar) 330.26 624.67 T
(ar-i486) 479.95 624.67 T
(ln -s $BINROOT/binutils/ranlib) 330.26 614.67 T
(ranlib-i486) 479.95 614.67 T
(ln -s $BINROOT/ld/ld.new) 330.26 604.67 T
(ld-i486) 479.95 604.67 T
(ln -s $BINROOT/gas/as.new) 330.24 594.67 T
(as-i486) 479.95 594.67 T
0 10 Q
(2.3.2  Build gcc-2.7.2) 318.24 573.33 T
1 9 Q
0.33 (No) 330.24 559 P
0.33 (w b) 341.01 559 P
0.33 (uild gcc itself. Cop) 354.41 559 P
0.33 (y the include \336les into $GNUR) 423.82 559 P
0.33 (OO) 537.36 559 P
0.33 (T/) 550 559 P
(i486-linux/include) 318.24 549 T
4 8 Q
(cd $GNUROOT/i486-linux/include) 330.24 536.67 T
(cp -R $LNXROOT/linux/include/linux .) 330.26 526.67 T
(cp -R $LNXROOT/linux/include/asm-i386 .) 330.26 516.67 T
(ln -s asm-i386 asm) 330.26 506.67 T
(cp -R $LNXROOT/usr/include/* .) 330.26 496.67 T
(cp $X86ROOT/include/float.h .) 330.24 486.67 T
1 9 Q
(Set up library and include links:) 318.24 473 T
4 8 Q
(cd $GNUROOT/lib/gcc-lib/i486-linux/2.7.2) 330.24 459.67 T
(ln -s $GNUROOT/i486-linux/include include) 330.26 449.67 T
(ln -s $GNUROOT/i486-linux/lib     lib) 330.24 439.67 T
1 9 Q
(Con\336gure the gcc Mak) 318.24 426 T
(e\336le:) 400.89 426 T
4 8 Q
(cd $GNUROOT/src/gcc-2.7.2) 330.24 412.67 T
(configure --target=i486-linux --with-gnu-as --) 330.24 402.67 T
(with-gnu-ld --prefix=$GNUROOT) 347.04 392.67 T
1 9 Q
(Edit the gcc Mak) 318.24 379 T
(e\336le to use gcc to b) 379.89 379 T
(uild the cross compiler:) 449.45 379 T
4 8 Q
(change \322CC = cc\323 to \322CC = gcc\323) 330.24 365.67 T
1 9 Q
0.11 (Edit the gcc Mak) 318.24 352 P
0.11 (e\336le to a) 380.22 352 P
0.11 (v) 411.26 352 P
0.11 (oid squashing the \337oat.h include \336le by) 415.58 352 P
(commenting out these three lines:) 318.24 341 T
4 8 Q
(# rm -f include/float.h) 330.24 327.67 T
(# cp gfloat.h include/float.h) 330.26 317.67 T
(# chmod a+r include/float.h) 330.24 307.67 T
1 9 Q
0.17 (T) 318.24 294 P
0.17 (ouch the follo) 323.02 294 P
0.17 (wing library \336les to pre) 373.13 294 P
0.17 (v) 458.07 294 P
0.17 (ent gcc from trying to cre-) 462.43 294 P
(ate them \050and thus f) 318.24 283 T
(ailing\051:) 389.64 283 T
4 8 Q
(touch libgcc.cross libgcc1.a) 330.24 269.67 T
1 9 Q
(Build and install gcc.) 318.24 256 T
4 8 Q
(make LANGUAGES=c) 330.24 242.67 T
(make LANGUAGES=c install) 330.24 232.67 T
1 9 Q
0.47 (The compilation should end with output that looks approximately) 318.24 219 P
(lik) 318.24 208 T
(e this:) 327.65 208 T
4 7 Q
([snip]) 330.26 196.33 T
(gcc -DCROSS_COMPILE -DIN_GCC   -g   obstack.o ` case) 330.26 188.33 T
(\322gcc\323 in \322cc\323\051 echo \322\322 ;; esac `   -o c++filt \134) 347.04 180.33 T
(  cxxmain.o underscore.o getopt.o getopt1.o) 330.26 172.33 T
1 9 Q
0.16 (When this is done, there should be an e) 318.24 160 P
0.16 (x) 460.64 160 P
0.16 (ecutable v) 465.01 160 P
0.16 (ersion of gcc in) 501.77 160 P
0.72 (the $GNUR) 318.24 149 P
0.72 (OO) 361.85 149 P
0.72 (T/bin/i486-linux directory) 374.48 149 P
0.72 (. Add this directory into) 468.87 149 P
(your search path. All the x86 tools are here.) 318.24 138 T
1.1 (V) 330.24 127 P
1.1 (erify that $GNUR) 335.74 127 P
1.1 (OO) 402.57 127 P
1.1 (T/bin/i486-linux/gcc is e) 415.21 127 P
1.1 (x) 506.27 127 P
1.1 (ecutable. W) 510.64 127 P
1.1 (e) 554 127 P
-0.13 (e) 318.24 117 P
-0.13 (xperienced problems with a v) 322.1 117 P
-0.13 (ersion of \324install\325 on the suns. If you) 427.92 117 P
1.32 (run into problems during the \322mak) 318.24 107 P
1.32 (e install\323 step, cop) 449.5 107 P
1.32 (y the gcc-) 519.87 107 P
3.23 (cross dri) 318.24 97 P
3.23 (v) 351.99 97 P
3.23 (er \050or xgcc\051 to $GNUR) 356.35 97 P
3.23 (OO) 452.39 97 P
3.23 (T/i486-linux/bin/gcc and) 465.02 97 P
1.9 ($GNUR) 318.24 87 P
1.9 (OO) 347.88 87 P
1.9 (T/bin/i486-linux-gcc. Some v) 360.51 87 P
1.9 (ersions of install put a) 470.92 87 P
0.42 (cop) 318.24 77 P
0.42 (y of the dri) 331.15 77 P
0.42 (v) 371.91 77 P
0.42 (er into directories of the same name. Y) 376.28 77 P
0.42 (ou may try) 518.17 77 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(5) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(the follo) 54 714.14 T
(wing steps if this problem arises:) 84.02 714.14 T
4 8 Q
(cd $GNUROOT/i486-linux/bin) 66 701.81 T
(mv gcc gcc.install) 66.02 691.81 T
(ln -s gcc.install/gcc-cross gcc) 66.02 681.81 T
(cd $GNUROOT/bin) 66.02 671.81 T
(mv i486-linux-gcc i486-linux-gcc.install) 66.02 661.81 T
(ln -s i486-linux-gcc.install/gcc-cross i486-) 66 651.81 T
(linux-gcc) 82.8 641.81 T
0 10 Q
(2.3.3  Build GNU libc) 54 620.48 T
1 9 Q
(Run the con\336gure program.) 54 606.14 T
4 8 Q
(cd $LNXROOT/src/libc) 66 592.81 T
(configure) 66 582.81 T
1 9 Q
2 (Gi) 54 569.14 P
2 (v) 62.78 569.14 P
2 (e the con\336gure program the follo) 67.14 569.14 P
2 (wing information \050NO) 195.63 569.14 P
2 (TE:) 280.26 569.14 P
-0.06 (GNUR) 54 558.14 P
-0.06 (OO) 79.14 558.14 P
-0.06 (T is the actual path without a trailing \324/\325,) 91.77 558.14 P
3 F
-0.06 (not) 239.24 558.14 P
1 F
-0.06 ( an en) 250.75 558.14 P
-0.06 (viron-) 271.76 558.14 P
(ment v) 54 547.14 T
(ariable\051:) 78.53 547.14 T
4 8 Q
(Build 386, 486 or m68k library code \050486) 66 533.81 T
(default\051 4/3/m [4] ?) 82.8 523.81 T
(4) 183.6 523.81 T
(The target platform [i486-linux] ?) 66.02 513.81 T
(i486-linux) 234.02 513.81 T
(The target OS [linux] ?) 66.02 503.81 T
(linux) 230.76 503.81 T
(Build targets \050static/shared\051 s/a [a] ?) 66.02 493.81 T
(s) 253.22 493.81 T
(Root path to i486-linux related files [] ?) 66.02 483.81 T
(GNUROOT) 82.8 473.81 T
(Bin path to gcc [] ?) 66.02 463.81 T
(GNUROOT/i486-linux/bin) 162.02 463.81 T
(The gcc version [2.6.2] ?) 66.02 453.81 T
(2.7.2) 230.76 453.81 T
(Fast build/save space \050fast default\051 f/s [f] ?) 66.02 443.81 T
(f) 286.82 443.81 T
(GNU `make\325 executable [gmake] ?) 66.02 433.81 T
(make) 230.76 433.81 T
(Root path to installation dirs ?) 66.02 423.81 T
(GNUROOT/test) 230.76 423.81 T
(Build a NYS libc from nys y/n [n] ?) 66 413.81 T
(n) 234 413.81 T
1 9 Q
(Build the libraries:) 54 400.14 T
4 8 Q
(make clean) 66 386.81 T
(make depend) 66.02 376.81 T
(unsetenv MACHINE) 66.02 366.81 T
(make) 66 356.81 T
1 9 Q
(Cop) 54 343.14 T
(y the libraries to the Linux library directory:) 68.91 343.14 T
4 8 Q
(cd $GNUROOT/i486-linux/lib) 66 329.81 T
(cp $LNXROOT/libc/elfstatic/lib*.a .) 66.02 319.81 T
(cp $LNXROOT/libc/elfshared/crt* .) 66 309.81 T
0 10 Q
(2.3.4  Building and testing SimpleScalar x86) 54 288.48 T
1 9 Q
(Finally) 54 274.14 T
(, we are ready to b) 78.92 274.14 T
(uild the simulator itself:) 145.21 274.14 T
4 8 Q
(cd $X86SIMROOT/xsim) 66 260.81 T
1 9 Q
0.35 (If you ha) 54 247.14 P
0.35 (v) 87.02 247.14 P
0.35 (e set the GNUR) 91.38 247.14 P
0.35 (OO) 149.32 247.14 P
0.35 (T en) 161.96 247.14 P
0.35 (vironment v) 178.2 247.14 P
0.35 (ariable as described) 222.08 247.14 P
0.38 (abo) 54 236.14 P
0.38 (v) 66.86 236.14 P
0.38 (e, no modi\336cations of the Mak) 71.23 236.14 P
0.38 (e\336le are necessary) 183.51 236.14 P
0.38 (. Otherwise,) 249.64 236.14 P
1.96 (you must modify the Mak) 54 225.14 P
1.96 (e\336le so that BINUTILDIR points to) 155.24 225.14 P
($GNUR) 54 214.14 T
(OO) 83.64 214.14 T
(T/src/binutils-2.6.0.14. No) 96.27 214.14 T
(w b) 191.8 214.14 T
(uild the simulator:) 204.87 214.14 T
4 8 Q
(make depend) 66 200.81 T
(make sim-func) 66 190.81 T
1 9 Q
(Build the test e) 54 177.14 T
(x) 108.12 177.14 T
(ecutables:) 112.48 177.14 T
4 8 Q
(cd $X86ROOT/tests) 66 163.81 T
(make sun) 66.02 153.81 T
(make intel) 66 143.81 T
1 9 Q
(T) 54 130.14 T
(o run a sample test program:.) 58.78 130.14 T
4 8 Q
(cd $X86ROOT) 66 116.81 T
(sim-func -Wsim tests/hello-i486) 66 106.81 T
1 9 Q
0.26 (The result should print \322hello w) 66 93.14 P
0.26 (orld\323, surrounded by simulator) 181.98 93.14 P
(comments.) 54 83.14 T
0 12 Q
(3  The Simplescalar ar) 318.24 712.14 T
(chitectur) 433.36 712.14 T
(e) 479.12 712.14 T
1 9 Q
1.85 (The SimpleScalar architecture is deri) 330.24 695.14 P
1.85 (v) 470.86 695.14 P
1.85 (ed from the MIPS-IV) 475.23 695.14 P
0.78 (ISA [1]. The semantics are a superset with the follo) 318.24 685.14 P
0.78 (wing notable) 510.48 685.14 P
(dif) 318.24 675.14 T
(ferences and additions:) 328.01 675.14 T
(\245) 318.24 663.14 T
-0.05 (There are no architected delay slots: loads, stores, and control) 336.24 663.14 P
(transfers do not e) 336.24 652.14 T
(x) 398.34 652.14 T
(ecute the succeeding instruction.) 402.7 652.14 T
(\245) 318.24 639.14 T
0.23 (Loads and stores support tw) 336.24 639.14 P
0.23 (o addressing modes\321for all data) 438.08 639.14 P
1.61 (types\321additional to those found in the MIPS architecture.) 336.24 628.14 P
2.06 (These are: inde) 336.24 617.14 P
2.06 (x) 395.2 617.14 P
2.06 (ed \050re) 399.57 617.14 P
2.06 (gister+re) 422.22 617.14 P
2.06 (gister\051, and auto-increment/) 454.16 617.14 P
(decrement.) 336.24 606.14 T
(\245) 318.24 593.14 T
0.04 (A square-root instruction, which implements both single- and) 336.24 593.14 P
(double-precision \337oating point square roots.) 336.24 582.14 T
(\245) 318.24 569.14 T
(An e) 336.24 569.14 T
(xtended 64-bit instruction encoding) 353.35 569.14 T
0.32 (In T) 330.24 556.14 P
0.32 (able) 345.09 556.14 P
0.32 (1, we list the architected re) 362.33 556.14 P
0.32 (gisters in the SimpleScalar) 460.79 556.14 P
0.16 (architecture, their hardw) 318.24 546.14 P
0.16 (are and softw) 406.69 546.14 P
0.16 (are names \050which are recog-) 455.4 546.14 P
0.32 (nized by the assembler\051, and a description or each. Both the num-) 318.24 536.14 P
0.58 (ber and the semantics of the re) 318.24 526.14 P
0.58 (gisters are identical to those in the) 431.55 526.14 P
(MIPS-IV ISA.) 318.24 516.14 T
0.67 (In Figure) 330.24 506.14 P
0.67 (2, we depict the three instruction encodings of Sim-) 366.41 506.14 P
0.69 (pleScalar instructions:) 318.24 496.14 P
3 F
0.69 (r) 402.11 496.14 P
0.69 (e) 405.28 496.14 P
0.69 (gister) 408.92 496.14 P
1 F
0.69 (,) 429.06 496.14 P
3 F
0.69 (immediate) 434.25 496.14 P
1 F
0.69 (, and) 471.74 496.14 P
3 F
0.69 (jump) 492.87 496.14 P
1 F
0.69 ( formats. All) 510.87 496.14 P
(instructions are 64 bits in length.) 318.24 486.14 T
0.27 (The re) 330.24 476.14 P
0.27 (gister format is used for computational instructions. The) 353.61 476.14 P
0.42 (immediate format supports the inclusion of a 16-bit constant. The) 318.24 466.14 P
-0.1 (jump format supports speci\336cation of 24-bit jump tar) 318.24 456.14 P
-0.1 (gets. The re) 508.61 456.14 P
-0.1 (g-) 550.5 456.14 P
-0.22 (ister \336elds are all 8 bits, to support e) 318.24 446.14 P
-0.22 (xtension of the architected re) 447.06 446.14 P
-0.22 (g-) 550.5 446.14 P
0.78 (isters to 256 inte) 318.24 436.14 P
0.78 (ger and \337oating point re) 380.2 436.14 P
0.78 (gisters. Each instruction) 469.69 436.14 P
0.29 (format has a \336x) 318.24 426.14 P
0.29 (ed-location, 16-bit opcode \336eld that f) 375.22 426.14 P
0.29 (acilitates f) 510.56 426.14 P
0.29 (ast) 548 426.14 P
(instruction decoding.) 318.24 416.14 T
-0.18 (The) 330.24 406.14 P
3 F
-0.18 (annote) 346.31 406.14 P
1 F
-0.18 ( \336eld is a 16-bit \336eld that can be modi\336ed post-com-) 370.8 406.14 P
1.61 (pile, with annotations to instructions in the assembly \336les. The) 318.24 396.14 P
2.05 (annotation interf) 318.24 386.14 P
2.05 (ace is useful for synthesizing ne) 379.94 386.14 P
2.05 (w instructions) 505.2 386.14 P
1.28 (without ha) 318.24 376.14 P
1.28 (ving to change and recompile the assembler) 357.59 376.14 P
1.28 (. Annota-) 522.73 376.14 P
0.5 (tions are attached to the opcode, and come in tw) 318.24 366.14 P
0.5 (o \337a) 496.11 366.14 P
0.5 (v) 512.18 366.14 P
0.5 (ors: bit and) 516.5 366.14 P
(\336eld annotations. A bit annotation is written as follo) 318.24 356.14 T
(ws:) 505.76 356.14 T
4 8 Q
(lw/a) 330.24 343.81 T
($4,4\050$5\051) 390.24 343.81 T
1 9 Q
0.07 (The annotation in this e) 318.24 330.14 P
0.07 (xample is) 403.38 330.14 P
0 F
0.07 (/a.) 440.52 330.14 P
1 F
0.07 ( It speci\336es that the \336rst bit of) 449.77 330.14 P
0.12 (the annotation \336eld should be set. Bit annotations /a through /p set) 318.24 319.14 P
0.12 (bits 0 through 15, respecti) 318.24 308.14 P
0.12 (v) 412.25 308.14 P
0.12 (ely) 416.61 308.14 P
0.12 (. Field annotations are written in the) 427.03 308.14 P
(form:) 318.24 297.14 T
4 8 Q
(lw/6:4\0507\051) 330.24 283.81 T
($4,4\050$5\051) 390.24 283.81 T
1 9 Q
1.15 (This annotation sets the speci\336ed 3-bit \336eld \050from bit 4 to bit 6) 318.24 270.14 P
3 F
(within) 318.24 259.14 T
1 F
( the 16-bit annotation \336eld\051 to the v) 340.75 259.14 T
(alue 7.) 468.27 259.14 T
1.42 (T) 330.24 248.14 P
1.42 (o measure instruction cache performance with architectures) 335.02 248.14 P
1.68 (that ha) 318.24 238.14 P
1.68 (v) 343.98 238.14 P
1.68 (e 32-bit instruction formats, the simulators may be run) 348.35 238.14 P
0.88 (with instruction cache blocks twice as lar) 318.24 228.14 P
0.88 (ge as the blocks on the) 471.85 228.14 P
1.55 (32-bit tar) 318.24 218.14 P
1.55 (get machine. This trick will produce statistics that are) 352.87 218.14 P
1.66 (consistent with a tar) 318.24 208.14 P
1.66 (get that uses a 32-bit instruction encoding.) 395.3 208.14 P
1.03 (Since the une) 318.24 198.14 P
1.03 (xtended SimpleScalar architecture may be encoded) 368.65 198.14 P
1.4 (into a 32-bit instruction, doubling the cache block size yields a) 318.24 188.14 P
0.6 (v) 318.24 178.14 P
0.6 (alid result. The tw) 322.52 178.14 P
0.6 (o timing simulators \050sim-inorder and sim-out-) 389.73 178.14 P
-0.18 (order) 318.24 168.14 P
-0.18 (, discussed in the ne) 336.87 168.14 P
-0.18 (xt section\051 currently automatically double) 408.25 168.14 P
1.06 (instruction cache block sizes. The cache module will need to be) 318.24 158.14 P
0.86 (changed for simulation of uni\336ed caches or accurate b) 318.24 148.14 P
0.86 (us conten-) 519.9 148.14 P
(tion on tar) 318.24 138.14 T
(get machines with 32-bit instructions, ho) 355.08 138.14 T
(we) 501.85 138.14 T
(v) 512.12 138.14 T
(er) 516.48 138.14 T
(.) 522.98 138.14 T
0 12 Q
(4  T) 318.24 114.14 T
(ool inter) 337.14 114.14 T
(nals) 379.96 114.14 T
1 9 Q
0.59 (In this section we discuss the code \336les of the simulators pro-) 330.24 97.14 P
0.19 (vided with the release. Each simulator has one main code \336le, and) 318.24 87.14 P
0.2 (shares all other support \336les with the other simulators. Section) 318.24 77.14 P
0.2 (4.1) 546.75 77.14 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(6) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
2.25 (through Section) 54 308.29 P
2.25 (4.4 contain descriptions of the simulator \336les,) 115.75 308.29 P
-0.04 (from the f) 54 298.29 P
-0.04 (astest and least detailed to the slo) 89.83 298.29 P
-0.04 (west and most detailed.) 209.38 298.29 P
2.16 (The compiler outputs binaries that are compatible with the) 66 288.29 P
1.37 (MIPS ECOFF object format. Library calls are handled with the) 54 278.29 P
0.99 (ported v) 54 268.29 P
0.99 (ersion of GNU GLIBC and POSIX-compliant Unix sys-) 84.6 268.29 P
1.01 (tem calls. The simulators currently e) 54 258.29 P
1.01 (x) 190.42 258.29 P
1.01 (ecute only user) 194.79 258.29 P
1.01 (-le) 251.12 258.29 P
1.01 (v) 260.39 258.29 P
1.01 (el code.) 264.76 258.29 P
0.05 (Plans e) 54 248.29 P
0.05 (xist at W) 79.66 248.29 P
0.05 (isconsin to e) 111.89 248.29 P
0.05 (v) 156.76 248.29 P
0.05 (entually e) 161.13 248.29 P
0.05 (xtend the tool set for simu-) 196.28 248.29 P
(lation of k) 54 238.29 T
(ernel code.) 90.91 238.29 T
1.06 (The architecture is de\336ned in) 66 228.29 P
0 F
1.06 (ss.def) 178.53 228.29 P
1 F
1.06 (, which contains a macro) 199.78 228.29 P
1.14 (de\336nition for each instruction in the instruction set. Each macro) 54 218.29 P
0.22 (de\336nes the opcode, name, \337ags, operand sources and destinations,) 54 208.29 P
(and actions to be tak) 54 198.29 T
(en for a particular instruction.) 127.9 198.29 T
0.12 (The instruction actions \050which appear as macros\051 that are com-) 66 188.29 P
-0.18 (mon to all simulators are de\336ned in) 54 178.29 P
0 F
-0.18 (ss.h) 182.49 178.29 P
1 F
-0.18 (. Those actions that require) 196.75 178.29 P
1.93 (dif) 54 168.29 P
1.93 (ferent implementations in dif) 63.77 168.29 P
1.93 (ferent simulators are de\336ned in) 174.07 168.29 P
(each simulator code \336le.) 54 158.29 T
0.78 (When running a simulator) 66 148.29 P
0.78 (,) 162.22 148.29 P
2 F
1.87 (main\050\051) 167.5 148.29 P
1 F
0.78 ( \050de\336ned in) 199.9 148.29 P
0 F
0.78 (main.c) 245.49 148.29 P
1 F
0.78 (\051 does) 271.23 148.29 P
0.58 (all the initialization and loads the tar) 54 138.29 P
0.58 (get binary into memory) 188.79 138.29 P
0.58 (. The) 274.69 138.29 P
2.99 (routine then calls) 54 128.29 P
2 F
7.18 (sim_main\050\051) 127.22 128.29 P
1 F
2.99 (, which is simulator) 181.22 128.29 P
2.99 (-speci\336c,) 261.02 128.29 P
1.03 (de\336ned in each simulator code \336le.) 54 118.29 P
2 F
2.47 ( sim_main\050\051) 185.13 118.29 P
1 F
1.03 ( pre-decodes) 247 118.29 P
-0.05 (the entire te) 54 108.29 P
-0.05 (xt se) 96.26 108.29 P
-0.05 (gment for f) 112.83 108.29 P
-0.05 (aster simulation, and then be) 153.13 108.29 P
-0.05 (gins simu-) 256.05 108.29 P
(lation from the tar) 54 98.29 T
(get program entry point.) 119.08 98.29 T
0 11 Q
(4.1  Functional simulation) 318.24 306.95 T
1 9 Q
0.89 (The f) 330.24 292.29 P
0.89 (astest, least detailed simulator \050) 350.28 292.29 P
0 F
0.89 (sim-fast) 467.09 292.29 P
1 F
0.89 (\051 resides in sim-) 497.58 292.29 P
0.67 (f) 318.24 282.29 P
0.67 (ast.c. sim-f) 321.15 282.29 P
0.67 (ast does no time accounting; it e) 361.47 282.29 P
0.67 (x) 481.33 282.29 P
0.67 (ecutes each instruc-) 485.69 282.29 P
3.6 (tion serially) 318.24 272.29 P
3.6 (, performing no instructions in parallel. sim-f) 364.01 272.29 P
3.6 (ast) 548 272.29 P
(assumes no cache.) 318.24 262.29 T
1.13 (A separate v) 330.24 252.29 P
1.13 (ersion of sim-f) 377.35 252.29 P
1.13 (ast,) 432.51 252.29 P
0 F
1.13 (sim-safe) 448.14 252.29 P
1 F
1.13 (, also performs func-) 479.63 252.29 P
0.11 (tional simulation, b) 318.24 242.29 P
0.11 (ut checks for correct alignment and access per-) 388.04 242.29 P
-0.11 (missions for each memory reference. The tw) 318.24 232.29 P
-0.11 (o \050safe and uncheck) 478.2 232.29 P
-0.11 (ed) 549.5 232.29 P
-0.13 (memory references\051 simulators are split \050e.g., protection is not tog-) 318.24 222.29 P
1.35 (gled with a command-line ar) 318.24 212.29 P
1.35 (gument\051 to maximize performance.) 426.97 212.29 P
0.89 (Neither of the simulators accept an) 318.24 202.29 P
0.89 (y command-line ar) 448.26 202.29 P
0.89 (guments at) 517.86 202.29 P
0.91 (all. Both v) 318.24 192.29 P
0.91 (ersions are v) 357.69 192.29 P
0.91 (ery simple: less than 300 lines of code\321) 404.87 192.29 P
1.88 (the) 318.24 182.29 P
1.88 (y therefore mak) 329.1 182.29 P
1.88 (e good starting points for understanding the) 389.75 182.29 P
1.26 (internal w) 318.24 172.29 P
1.26 (orkings of the simulators. In addition to the simulator) 355.65 172.29 P
1.09 (\336le, both sim-f) 318.24 162.29 P
1.09 (ast and sim-safe use the follo) 373.57 162.29 P
1.09 (wing code \336les \050not) 483.5 162.29 P
3.68 (including header \336les\051:) 318.24 152.29 P
0 F
3.68 (main.c) 414.53 152.29 P
1 F
3.68 (,) 440.27 152.29 P
0 F
3.68 (syscall.c) 448.46 152.29 P
1 F
3.68 (,) 479.71 152.29 P
0 F
3.68 (memory) 487.89 152.29 P
3.68 (.c) 519.24 152.29 P
1 F
3.68 (,) 525.49 152.29 P
0 F
3.68 (r) 533.67 152.29 P
3.68 (egs.c) 537.51 152.29 P
1 F
3.68 (,) 555.75 152.29 P
0 F
(loader) 318.24 142.29 T
(.c) 341.84 142.29 T
1 F
(,) 348.08 142.29 T
0 F
(ss.c) 352.58 142.29 T
1 F
(,) 365.83 142.29 T
0 F
(endian.c) 370.33 142.29 T
1 F
(, and) 402.59 142.29 T
0 F
(misc.c) 422.33 142.29 T
1 F
(.) 446.08 142.29 T
0 11 Q
(4.2  F) 318.24 119.95 T
(ast functional simulation with cache) 343.94 119.95 T
1 9 Q
3.06 (The sim-cache simulator \050the main \336le of which is) 330.24 105.29 P
0 F
3.06 (sim-) 541.5 105.29 P
2.72 (cache.c) 318.24 95.29 P
1 F
2.72 (\051 tak) 345.98 95.29 P
2.72 (es the f) 364.86 95.29 P
2.72 (ast functional simulation \050with uncheck) 396.21 95.29 P
2.72 (ed) 549.5 95.29 P
0.27 (memory accesses\051 and adds the capability to simulate one le) 318.24 85.29 P
0.27 (v) 537.12 85.29 P
0.27 (el of) 541.49 85.29 P
1.26 (cache and/or a TLB. The cache code is located in) 318.24 75.29 P
0 F
1.26 (cache.c) 510.51 75.29 P
1 F
1.26 (. The) 538.25 75.29 P
54.43 317.71 558 506.29 C
0 0 0 1 0 0 0 K
54.43 334.43 558 506.29 C
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Register f) 112.28 479.14 T
(ormat:) 153.4 479.14 T
(Immediate f) 112.28 422.53 T
(ormat:) 163.96 422.53 T
(J) 112.28 372.1 T
(ump f) 117.13 372.1 T
(ormat:) 142.16 372.1 T
1 9 Q
(16-annote) 220.72 487.14 T
(16-opcode) 291.72 487.14 T
(8-rs) 359.72 487.14 T
(8-rt) 396.72 487.14 T
(8-rd) 430.72 487.14 T
(8-ru/shamt) 460.72 487.14 T
(16-imm) 444.21 436.52 T
(6-unused) 349.72 385.91 T
(24-tar) 416.05 385.91 T
(get) 437.38 385.91 T
202.71 466.29 274.71 484.29 R
0.5 H
2 Z
N
346.71 466.29 382.71 484.29 R
N
373.71 365.95 490.71 383.95 R
N
346.71 365.95 373.71 383.95 R
N
274.71 466.29 346.71 484.29 R
N
382.71 466.29 418.71 484.29 R
N
418.71 466.29 454.71 484.29 R
N
454.71 466.29 490.71 484.29 R
N
202.71 415.67 274.71 433.67 R
N
346.71 415.67 382.71 433.67 R
N
274.71 415.67 346.71 433.67 R
N
382.71 415.67 418.71 433.67 R
N
418.71 415.67 490.71 433.67 R
N
202.71 365.95 274.71 383.95 R
N
274.71 365.95 346.71 383.95 R
N
(16-annote) 220.71 435.62 T
(16-opcode) 290.72 435.62 T
(8-rs) 359.71 435.62 T
(8-rt) 396.71 435.62 T
(16-annote) 220.71 385.91 T
(16-opcode) 290.72 385.91 T
2 F
(63) 202.71 458.48 T
(32) 334.14 458.48 T
(31) 348.86 458.48 T
(0) 486.71 458.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 202.71 407.87 T
(32) 334.14 407.87 T
(31) 348.86 407.87 T
(0) 486.71 407.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(63) 202.71 357.72 T
(32) 334.14 357.72 T
(31) 348.86 357.72 T
(0) 486.71 357.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(Figure 2. SimpleScalar ar) 175.51 337.48 T
(c) 294.81 337.48 T
(hitecture instruction f) 300.27 337.48 T
(ormats) 402.86 337.48 T
0 0 0 1 0 0 0 K
54.43 317.71 558 506.29 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
0 X
0 0 0 1 0 0 0 K
(Har) 171.36 710.86 T
(d) 186.18 710.86 T
(ware Name) 191.55 710.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Software Name) 251.71 710.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Description) 329.21 710.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
($0) 171.21 697.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($z) 251.21 697.86 T
(ero) 260.58 697.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(z) 329.21 697.86 T
(ero-v) 333.58 697.86 T
(alued source/sink) 353.86 697.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($1) 171.21 686.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($at) 251.21 686.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(reser) 329.21 686.86 T
(v) 349.98 686.86 T
(ed b) 354.26 686.86 T
(y assemb) 371.59 686.86 T
(ler) 409.92 686.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($2-$3) 171.21 675.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($v0-$v1) 251.21 675.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fn retur) 329.21 675.86 T
(n result regs) 357.95 675.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($4-$7) 171.21 664.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($a0-$a3) 251.21 664.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fn argument v) 329.21 664.86 T
(alue regs) 384.01 664.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($8-$15) 171.21 653.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($t0-$t7) 251.21 653.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(temp regs) 329.21 653.86 T
(, caller sa) 369.09 653.86 T
(v) 407.42 653.86 T
(ed) 411.7 653.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($16-$23) 171.21 642.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($s0-$s7) 251.21 642.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sa) 329.21 642.86 T
(v) 338.54 642.86 T
(ed regs) 342.81 642.86 T
(, callee sa) 372.69 642.86 T
(v) 413.03 642.86 T
(ed) 417.3 642.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($25-$25) 171.21 631.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($t8-$t9) 251.21 631.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(temp regs) 329.21 631.86 T
(, caller sa) 369.09 631.86 T
(v) 407.42 631.86 T
(ed) 411.7 631.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($26-$27) 171.21 620.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($k0-$k1) 251.21 620.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(reser) 329.21 620.86 T
(v) 349.98 620.86 T
(ed b) 354.26 620.86 T
(y OS) 371.59 620.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($28) 171.21 609.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($gp) 251.21 609.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(global pointer) 329.21 609.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($29) 171.21 598.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($sp) 251.21 598.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(stac) 329.21 598.86 T
(k pointer) 345.54 598.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($30) 171.21 587.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($s8) 251.21 587.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sa) 329.21 587.86 T
(v) 338.54 587.86 T
(ed regs) 342.81 587.86 T
(, callee sa) 372.69 587.86 T
(v) 413.03 587.86 T
(ed) 417.3 587.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($31) 171.21 576.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($r) 251.21 576.86 T
(a) 259.12 576.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(retur) 329.21 576.86 T
(n address reg) 347.94 576.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($hi) 171.21 565.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($hi) 251.21 565.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(high result register) 329.21 565.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($lo) 171.21 554.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($lo) 251.21 554.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lo) 329.21 554.86 T
(w result register) 336.08 554.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($f0-$f31) 171.21 543.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($f0-$f31) 251.21 543.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337oating point registers) 329.21 543.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($fcc) 171.21 532.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($fcc) 251.21 532.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337oating point condition code) 329.21 532.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(T) 178.71 516.19 T
(ab) 184.02 516.19 T
(le 1: SimpleScalar ar) 195.59 516.19 T
(c) 293.22 516.19 T
(hitecture register de\336nitions) 298.68 516.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
165.21 719.48 165.21 529.23 2 L
V
0.75 H
0 Z
N
245.21 720.23 245.21 528.48 2 L
V
N
323.21 720.23 323.21 528.48 2 L
V
N
447.21 719.48 447.21 529.23 2 L
V
N
164.84 719.86 447.59 719.86 2 L
V
N
165.59 706.11 446.84 706.11 2 L
V
0.5 H
N
165.59 703.61 446.84 703.61 2 L
V
N
164.84 693.86 447.59 693.86 2 L
V
0.75 H
N
164.84 682.86 447.59 682.86 2 L
V
N
164.84 671.86 447.59 671.86 2 L
V
N
164.84 660.86 447.59 660.86 2 L
V
N
164.84 649.86 447.59 649.86 2 L
V
N
164.84 638.86 447.59 638.86 2 L
V
N
164.84 627.86 447.59 627.86 2 L
V
N
164.84 616.86 447.59 616.86 2 L
V
N
164.84 605.86 447.59 605.86 2 L
V
N
164.84 594.86 447.59 594.86 2 L
V
N
164.84 583.86 447.59 583.86 2 L
V
N
164.84 572.86 447.59 572.86 2 L
V
N
164.84 561.86 447.59 561.86 2 L
V
N
164.84 550.86 447.59 550.86 2 L
V
N
164.84 539.86 447.59 539.86 2 L
V
N
164.84 528.86 447.59 528.86 2 L
V
N
54.29 330.57 557.15 330.57 2 L
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(7) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
1.98 (simulator supports simulation of split le) 54 714.14 P
1.98 (v) 206.94 714.14 P
1.98 (el-one instruction and) 211.31 714.14 P
0.98 (data caches, or just an instruction or just a data cache, b) 54 704.14 P
0.98 (ut not a) 264.8 704.14 P
0.19 (uni\336ed I/D le) 54 694.14 P
0.19 (v) 102.16 694.14 P
0.19 (el-one cache \050although this is a tri) 106.53 694.14 P
0.19 (vial change to the) 229.44 694.14 P
(simulator\051. The command-line ar) 54 684.14 T
(guments that it accepts are:) 172.82 684.14 T
(-d) 66.02 672.14 T
3 F
(name:sets:bloc) 73.52 672.14 T
(ksize:assoc:r) 127.83 672.14 T
(epl) 174.48 672.14 T
1 F
( - Simulate a le) 185.48 672.14 T
(v) 239.75 672.14 T
(el-one data) 244.12 672.14 T
(cache, called) 126 662.14 T
3 F
(name) 174.73 662.14 T
1 F
( in the statistics \336le, with) 194.22 662.14 T
3 F
(sets) 126 652.14 T
1 F
( number of sets, blocks of) 139.5 652.14 T
3 F
(bloc) 234.74 652.14 T
(ksize) 250.06 652.14 T
1 F
( bytes,) 267.55 652.14 T
3 F
(assoc) 126 642.14 T
1 F
( set-associati) 146 642.14 T
(vity) 192.01 642.14 T
(, and a replacement pol-) 205.43 642.14 T
(ic) 126 632.14 T
(y of) 132.36 632.14 T
3 F
(r) 148.86 632.14 T
(epl) 152.03 632.14 T
1 F
(, where) 163.03 632.14 T
3 F
(r) 191.76 632.14 T
(epl) 194.93 632.14 T
1 F
( is either) 205.93 632.14 T
3 F
(l) 239.18 632.14 T
1 F
(,) 241.68 632.14 T
3 F
(r) 246.18 632.14 T
1 F
(, or) 249.32 632.14 T
3 F
(f) 263.57 632.14 T
1 F
( \050for) 266.07 632.14 T
(LR) 126 622.14 T
(U, random, and FIFO, respecti) 137.14 622.14 T
(v) 247.15 622.14 T
(ely\051. The) 251.51 622.14 T
(cache size will be) 126 612.14 T
(bytes in size. A tw) 126 602.14 T
(o-w) 192.65 602.14 T
(ay set associati) 206.56 602.14 T
(v) 260.33 602.14 T
(e, 64-) 264.69 602.14 T
(Kbyte, 32-byte block, LR) 126 592.14 T
(U data cache w) 217.88 592.14 T
(ould) 273.02 592.14 T
(thus ha) 126 582.14 T
(v) 151.57 582.14 T
(e the parameter:) 155.93 582.14 T
(-d) 126 570.14 T
3 F
(L1dcac) 133.5 570.14 T
(he:1024:32:2:l) 159.86 570.14 T
1 F
(-f) 66.02 558.14 T
(Flush caches on system calls) 126 558.14 T
(-i) 66.02 545.14 T
3 F
(name:sets:bloc) 71.52 545.14 T
(ksize:assoc:r) 125.83 545.14 T
(epl) 172.49 545.14 T
1 F
( - Simulate an instruction) 183.48 545.14 T
(cache, with the same parameter format as the) 126 535.14 T
(data cache e) 126 525.14 T
(xample abo) 169.84 525.14 T
(v) 211.45 525.14 T
(e.) 215.81 525.14 T
(-t) 66.02 513.14 T
3 F
(name:sets:bloc) 71.52 513.14 T
(ksize:assoc:r) 125.83 513.14 T
(epl) 172.49 513.14 T
1 F
( - Simulate a TLB, using the) 183.48 513.14 T
(same parameter format as the instruction and) 126 503.14 T
(data caches abo) 126 493.14 T
(v) 182.34 493.14 T
(e.) 186.71 493.14 T
0.46 (This simulator is ideal for performing high-le) 66 481.14 P
0.46 (v) 232 481.14 P
0.46 (el cache studies) 236.36 481.14 P
0.35 (that do not tak) 54 471.14 P
0.35 (e access time of the caches into account \050e.g., stud-) 106.7 471.14 P
0.21 (ies that are only concerned with miss rates\051. T) 54 461.14 P
0.21 (o measure the ef) 220.65 461.14 P
0.21 (fect) 280.27 461.14 P
1.09 (of cache or) 54 451.14 P
1.09 (g) 95.99 451.14 P
1.09 (anization upon the e) 100.45 451.14 P
1.09 (x) 176.31 451.14 P
1.09 (ecution time of real programs,) 180.68 451.14 P
(ho) 54 441.14 T
(we) 62.78 441.14 T
(v) 73.04 441.14 T
(er) 77.41 441.14 T
(, one of the ne) 84.04 441.14 T
(xt tw) 135.14 441.14 T
(o timing simulators must be used.) 153.31 441.14 T
0 11 Q
(4.3  Simulating in-order issue execution) 54 418.81 T
1 9 Q
0.18 (The simulator found in) 66 404.14 P
0 F
0.18 (sim-inorder) 151.71 404.14 P
0.18 (.c) 196.31 404.14 P
1 F
0.18 ( models an in-order issue) 202.55 404.14 P
0.38 (processor) 54 394.14 P
0.38 (, including timing of functional units, memory latencies,) 88.13 394.14 P
0.62 (and thus gi) 54 384.14 P
0.62 (v) 94.51 384.14 P
0.62 (es c) 98.88 384.14 P
0.62 (ycle counts for programs\325 e) 113.1 384.14 P
0.62 (x) 214.41 384.14 P
0.62 (ecutions. In addition) 218.78 384.14 P
0 (to) 54 374.14 P
0 F
0 (cache.c) 63.26 374.14 P
1 F
0 ( and the \336les used for functional simulation, sim-inorder) 90.99 374.14 P
(also uses) 54 364.14 T
0 F
(bpr) 88.5 364.14 T
(ed.c) 102.34 364.14 T
1 F
(,) 117.58 364.14 T
0 F
(e) 122.08 364.14 T
(v) 125.95 364.14 T
(entq.c) 130.36 364.14 T
1 F
(, and) 153.6 364.14 T
0 F
(r) 173.35 364.14 T
(esour) 177.18 364.14 T
(ce.c) 198.02 364.14 T
1 F
(.) 212.26 364.14 T
1.14 (This simulator assumes a four) 66 354.14 P
1.14 (-stage pipelined processor) 178.37 354.14 P
1.14 (. The) 274.13 354.14 P
1.99 (four stages are fetch, decode, e) 54 344.14 P
1.99 (x) 174.99 344.14 P
1.99 (ecute, and writeback. Each of) 179.36 344.14 P
2.51 (these stages are handled by a dif) 54 334.14 P
2.51 (ferent function:) 185.3 334.14 P
2 F
6.02 (ifetch\050\051) 248.31 334.14 P
1 F
2.51 (,) 291.51 334.14 P
2 F
20.63 (idecode\050\051) 54 324.14 P
1 F
8.6 (, and) 102.6 324.14 P
2 F
20.63 (execute\050\051) 139.54 324.14 P
1 F
8.6 (, in) 188.14 324.14 P
0 F
8.6 (sim-inorder) 219.08 324.14 P
8.6 (.c) 263.67 324.14 P
1 F
8.6 ( and) 269.92 324.14 P
2 F
1.23 (eventq_service_events\050\051) 54 314.14 P
1 F
0.51 ( in) 178.2 314.14 P
0 F
0.51 (e) 190.72 314.14 P
0.51 (v) 194.59 314.14 P
0.51 (entq.c) 198.99 314.14 P
1 F
0.51 (. The in-order issue) 222.24 314.14 P
1.14 (pipeline supports out-of-order completion, b) 54 304.14 P
1.14 (ut stalls the pipeline) 218.1 304.14 P
(upon detection of a data hazard.) 54 294.14 T
1.21 (Both sim-inorder and sim-outorder \050discussed in Section) 66 284.14 P
1.21 (4.4\051) 279.51 284.14 P
1.16 (perform speculati) 54 274.14 P
1.16 (v) 118.17 274.14 P
1.16 (e e) 122.53 274.14 P
1.16 (x) 133.79 274.14 P
1.16 (ecution\321the) 138.16 274.14 P
1.16 (y e) 184.52 274.14 P
1.16 (x) 196.29 274.14 P
1.16 (ecute do) 200.65 274.14 P
1.16 (wn a speculati) 231.82 274.14 P
1.16 (v) 285.4 274.14 P
1.16 (e) 289.76 274.14 P
0.58 (path until the) 54 264.14 P
0.58 (y detect a f) 102.54 264.14 P
0.58 (ault, a TLB miss, or a branch mispredic-) 143.94 264.14 P
1.32 (tion. Both simulators support dynamic and static branch predic-) 54 254.14 P
0.06 (tion. The dynamic prediction uses a branch tar) 54 244.14 P
0.06 (get b) 221.24 244.14 P
0.06 (uf) 238.87 244.14 P
0.06 (fer with 2-bit) 246.14 244.14 P
(saturating counters.) 54 234.14 T
2.3 (F) 66 224.14 P
2.3 (or timing purposes, both simulators assume the follo) 70.87 224.14 P
2.3 (wing) 275.76 224.14 P
2.57 (functional unit latencies \050which may easily be changed\051. The) 54 214.14 P
2.24 (latencies are presented as \050c) 54 204.14 P
2.24 (ycles for one operation\051/\050initiation) 163.3 204.14 P
1.77 (rate\051. The latencies are: Inte) 54 194.14 P
1.77 (ger ALU: 1/1, load/store unit: 2/1,) 161.66 194.14 P
0.86 (inte) 54 184.14 P
0.86 (ger multiply: 3/1, inte) 67.36 184.14 P
0.86 (ger di) 148.31 184.14 P
0.86 (vision: 12/12, \337oating-point addi-) 169.68 184.14 P
-0.01 (tion: 2/1, \337oating-point multiplication: 4/1, \337oating-point di) 54 174.14 P
-0.01 (vision:) 269.25 174.14 P
(12/12.) 54 164.14 T
0.32 (sim-inorder accepts a superset of the command-line ar) 66 154.14 P
0.32 (guments) 263.26 154.14 P
1.68 (that sim-cache allo) 54 144.14 P
1.68 (ws) 125.13 144.14 P
1 7.2 Q
1.35 (1) 135.13 147.74 P
1 9 Q
1.68 (. In addition to those of sim-cache, sim-) 138.73 144.14 P
(inorder accepts the follo) 54 134.14 T
(wing ar) 141 134.14 T
(guments:) 168.08 134.14 T
(-b) 66.02 122.14 T
3 F
(size) 73.52 122.14 T
1 F
(Use a branch prediction table for branch spec-) 126 122.14 T
54 102 293.76 117 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 115 207 115 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
1.63 (1. The ar) 54 96.67 P
1.63 (guments of sim-inorder are a superset of those of sim-cache,) 85.78 96.67 P
-0.18 (e) 54 86.67 P
-0.18 (xcept for the \324t\325 ar) 57.43 86.67 P
-0.18 (gument; TLBs are not yet fully supported in sim-inorder) 114.77 86.67 P
(or sim-outorder) 54 76.67 T
(.) 103.55 76.67 T
1 9 Q
-0.14 (ulation, with) 390.24 714.14 P
3 F
-0.14 (size) 437.72 714.14 P
1 F
-0.14 ( entries.) 451.22 714.14 P
3 F
-0.14 (size) 481.68 714.14 P
1 F
-0.14 ( must be a po) 495.18 714.14 P
-0.14 (wer) 542.4 714.14 P
(of tw) 390.24 704.14 T
(o.) 408.9 704.14 T
(-j) 330.26 692.14 T
3 F
(penalty) 335.76 692.14 T
1 F
(Set the branch misprediction penalty to) 390.24 692.14 T
3 F
(pen-) 533.73 692.14 T
(alty) 390.24 682.14 T
1 F
( c) 403.74 682.14 T
(ycles. The def) 409.85 682.14 T
(ault is 2.) 460.49 682.14 T
(-k) 330.26 670.14 T
(Run with a blocking cache. This option cur-) 390.24 670.14 T
(rently has no ef) 390.24 660.14 T
(fect.) 445.75 660.14 T
(-m) 330.26 648.14 T
3 F
(latency) 340.26 648.14 T
1 F
(De\336nes main memory access time to be) 390.24 648.14 T
3 F
-0.51 (latency) 390.24 638.14 P
1 F
-0.51 ( c) 416.23 638.14 P
-0.51 (ycles. This option must precede cache) 421.83 638.14 P
(de\336nition ar) 390.24 628.14 T
(guments, if an) 433.83 628.14 T
(y) 484.94 628.14 T
(, on the command) 488.85 628.14 T
(line. The def) 390.24 618.14 T
(ault is 6 c) 435.89 618.14 T
(ycles.) 470.5 618.14 T
(-p) 330.26 606.14 T
(Run with in\336nite bandwidth in terms of mem-) 390.24 606.14 T
(ory instruction issue \050allo) 390.24 596.14 T
(w issue of multiple) 481.76 596.14 T
(load/store instructions in the same c) 390.24 586.14 T
(ycle\051.) 519.34 586.14 T
(-s) 330.26 574.14 T
3 F
(c) 336.76 574.14 T
(hoice) 340.62 574.14 T
1 F
(Use static branch prediction, where) 390.24 574.14 T
3 F
(c) 519.71 574.14 T
(hoice) 523.57 574.14 T
1 F
( is) 543.06 574.14 T
(either the string \322tak) 390.24 564.14 T
(en\323 or \322nottak) 463.89 564.14 T
(en\323.) 514.78 564.14 T
(-w) 330.26 552.14 T
3 F
(width) 339.76 552.14 T
1 F
(Sets the issue width of the processor to be) 390.24 552.14 T
3 F
(width) 390.24 542.14 T
1 F
(. The ar) 410.25 542.14 T
(gument must be a po) 437.82 542.14 T
(wer of tw) 512.59 542.14 T
(o) 546.99 542.14 T
(\050and greater than zero\051.) 390.24 532.14 T
(-y) 330.26 520.14 T
-0.19 (If this option is declared, instruction fetch will) 390.24 520.14 P
-0.31 (not continue \050e.g., stop \336lling the decode stage) 390.24 510.14 P
(up to the issue width\051 on branches.) 390.24 500.14 T
0 11 Q
(4.4  Simulating out-of-order issue execution) 318.24 477.81 T
1 9 Q
0.74 (By f) 330.24 463.14 P
0.74 (ar the most complicated and detailed simulator is in) 346.64 463.14 P
0 F
0.74 (sim-) 541.5 463.14 P
0.46 (outorder) 318.24 453.14 P
0.46 (.c) 351.33 453.14 P
1 F
0.46 (. This simulator supports out-of-order issue and e) 357.58 453.14 P
0.46 (x) 538.15 453.14 P
0.46 (ecu-) 542.51 453.14 P
1.02 (tion, based on the Re) 318.24 443.14 P
1.02 (gister Update Unit [2]. This scheme uses a) 397.91 443.14 P
2.67 (reorder b) 318.24 433.14 P
2.67 (uf) 353.46 433.14 P
2.67 (fer to automatically rename re) 360.73 433.14 P
2.67 (gisters and hold the) 479.75 433.14 P
2.76 (results of pending instructions. Each c) 318.24 423.14 P
2.76 (ycle the reorder b) 469.4 423.14 P
2.76 (uf) 540.74 423.14 P
2.76 (fer) 548.01 423.14 P
0.73 (retires completed instructions in program order to the architected) 318.24 413.14 P
(re) 318.24 403.14 T
(gister \336le.) 325.1 403.14 T
2.13 (The processor memory system emplo) 330.24 393.14 P
2.13 (ys a load/store queue.) 473.64 393.14 P
1.54 (Store v) 318.24 383.14 P
1.54 (alues are placed in the queue if the store is speculati) 345.3 383.14 P
1.54 (v) 547.39 383.14 P
1.54 (e.) 551.75 383.14 P
0.03 (Loads are dispatched to the memory system when the addresses of) 318.24 373.14 P
0.07 (all pre) 318.24 363.14 P
0.07 (vious stores are kno) 340.83 363.14 P
0.07 (wn. Loads may be satis\336ed by either the) 412.54 363.14 P
1.32 (memory system or an earlier store v) 318.24 353.14 P
1.32 (alue sitting in the queue, if) 455.41 353.14 P
3.1 (their addresses match. Speculati) 318.24 343.14 P
3.1 (v) 442.79 343.14 P
3.1 (e loads may generate cache) 447.15 343.14 P
2.03 (misses, b) 318.24 333.14 P
2.03 (ut speculati) 353.1 333.14 P
2.03 (v) 396.15 333.14 P
2.03 (e TLB misses stall the pipeline until the) 400.52 333.14 P
(branch condition is kno) 318.24 323.14 T
(wn.) 402.76 323.14 T
1.5 (The sim-outorder simulator \336le is o) 330.24 313.14 P
1.5 (v) 465.37 313.14 P
1.5 (er 2200 lines long, and) 469.74 313.14 P
1.18 (runs about an order of magnitude slo) 318.24 303.14 P
1.18 (wer than sim-f) 457.57 303.14 P
1.18 (ast \050150,000) 512.33 303.14 P
0.43 (c) 318.24 293.14 P
0.43 (ycles per second compared to about 2.5 million per second, on a) 322.1 293.14 P
(Sparc SS-10\051.) 318.24 283.14 T
0.92 (TLBs are not currently acti) 330.24 273.14 P
0.92 (v) 431.19 273.14 P
0.92 (ated in the simulator; the code is) 435.46 273.14 P
1.66 (there b) 318.24 263.14 P
1.66 (ut #de\336ned out. The branch misprediction penalty has a) 344.46 263.14 P
0.07 (def) 318.24 253.14 P
0.07 (ault of 3 c) 329.64 253.14 P
0.07 (ycles \050as opposed to 2 in sim-inorder\051. The follo) 365.95 253.14 P
0.07 (wing) 540 253.14 P
0.81 (ar) 318.24 243.14 P
0.81 (guments accepted by sim-inorder are not supported in sim-out-) 325.07 243.14 P
0.75 (order: \324-f) 318.24 233.14 P
0.75 (\325, \324-k\325, \324-p\325, \324-y\325. The ar) 352.22 233.14 P
0.75 (guments unique to sim-outorder) 440.51 233.14 P
(are as follo) 318.24 223.14 T
(ws:) 358 223.14 T
(-D) 330.26 211.14 T
3 F
(width) 339.76 211.14 T
1 F
(Sets the decode width to be) 390.24 211.14 T
3 F
(width) 491.23 211.14 T
1 F
(, which) 511.24 211.14 T
(much be a po) 390.24 201.14 T
(wer of tw) 438.26 201.14 T
(o. The def) 472.65 201.14 T
(ault is 4.) 509.3 201.14 T
(-L) 330.26 189.14 T
3 F
(size) 338.76 189.14 T
1 F
(Sets the number of entries in the load/store) 390.24 189.14 T
(queue to be) 390.24 179.14 T
3 F
(size) 433.98 179.14 T
1 F
(.) 447.48 179.14 T
3 F
(size) 451.98 179.14 T
1 F
( must be a po) 465.48 179.14 T
(wer of tw) 513.25 179.14 T
(o,) 547.65 179.14 T
(and is set to a def) 390.24 169.14 T
(ault of 4.) 452.89 169.14 T
(-R) 330.26 157.14 T
3 F
(entries) 339.26 157.14 T
1 F
(Sets the number of slots in the reorder b) 390.24 157.14 T
(uf) 534.04 157.14 T
(fer) 541.31 157.14 T
(to be) 390.24 147.14 T
3 F
(entries) 410.24 147.14 T
1 F
(.) 434.74 147.14 T
3 F
(entries) 439.24 147.14 T
1 F
( must be a po) 463.73 147.14 T
(wer of tw) 511.51 147.14 T
(o.) 545.9 147.14 T
(The def) 390.24 137.14 T
(ault is 8.) 417.89 137.14 T
(-W) 330.26 125.14 T
3 F
(width) 341.76 125.14 T
1 F
(Sets the issue width to be) 390.24 125.14 T
3 F
(width) 483.74 125.14 T
1 F
(, which much) 503.75 125.14 T
(be a po) 390.24 115.14 T
(wer of tw) 416.01 115.14 T
(o. The def) 450.4 115.14 T
(ault is 4.) 487.05 115.14 T
(-0) 330.26 103.14 T
(Pre) 390.24 103.14 T
(v) 402.01 103.14 T
(ents the simulator from issuing mis-spec-) 406.38 103.14 T
(ulated instructions.) 390.24 93.14 T
(-1) 330.26 81.14 T
(F) 390.24 81.14 T
(orces the simulator to use in-order issue.) 395.11 81.14 T
54 72 293.76 720.14 C
0 0 0 1 0 0 0 K
191.98 607.89 280.84 619.89 C
0 0 0 1 0 0 0 K
1 9 Q
0 X
0 0 0 1 0 0 0 K
(sets) 192.98 612.14 T
(blocksize) 215.91 612.14 T
(assoc) 259.34 612.14 T
8 F
(\264) 252.15 612.14 T
(\264) 208.73 612.14 T
0 0 0 1 0 0 0 K
54 72 293.76 720.14 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(8) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(-9) 66.02 714.14 T
(Run with perfect branch prediction.) 126 714.14 T
0 11 Q
(4.5  Common support \336les) 54 691.81 T
1 9 Q
-0.15 (The follo) 66 677.14 P
-0.15 (wing list describes the functionality of the C code \336les) 98.87 677.14 P
0.01 (in the simplesim-0.1 directory) 54 667.14 P
0.01 (, that are shared by all of the simula-) 161.94 667.14 P
(tors.) 54 657.14 T
(\245) 54 645.14 T
3 F
(bitmap.h) 72 645.14 T
1 F
(:) 103.75 645.14 T
1.66 (Contains support macros for performing bit-) 125.71 645.14 P
(map manipulation.) 72 634.14 T
(\245) 54 621.14 T
3 F
(bpr) 72 621.14 T
(ed.[c,h]) 84.17 621.14 T
1 F
(:) 112.66 621.14 T
6.66 (Handles the creation, functionality) 125.71 621.14 P
6.66 (, and) 269.6 621.14 P
(updates of the dynamic branch prediction b) 72 610.14 T
(uf) 227.79 610.14 T
(fer) 235.06 610.14 T
(.) 244.56 610.14 T
(\245) 54 597.14 T
3 F
(cac) 72 597.14 T
(he) 84.36 597.14 T
(.[c,h]) 92.72 597.14 T
1 F
(:) 112.72 597.14 T
0.16 (Contains general functions to support multiple) 125.71 597.14 P
0.67 (caches \050e.g., TLB, instruction and data cache, BRB\051. Uses a) 72 586.14 P
0.48 (link) 72 575.14 P
0.48 (ed-list for tag comparisons in caches of lo) 85.91 575.14 P
0.48 (w associati) 239.76 575.14 P
0.48 (vity) 279.76 575.14 P
0.3 (\050less than or equal to four\051, and a hash table for tag compari-) 72 564.14 P
(sons in higher) 72 553.14 T
(-associati) 122.32 553.14 T
(vity caches.) 156.09 553.14 T
(\245) 54 540.14 T
3 F
(endian.[c,h]) 72 540.14 T
1 F
(:) 116.5 540.14 T
1.55 (De\336nes a fe) 125.71 540.14 P
1.55 (w simple functions to determine) 171.57 540.14 P
(byte- and w) 72 529.14 T
(ord-order on the host and tar) 114.4 529.14 T
(get platforms.) 216.96 529.14 T
(\245) 54 516.14 T
3 F
(e) 72 516.14 T
(ventq.[c,h]) 75.86 516.14 T
1 F
(:) 115.35 516.14 T
0.7 (De\336nes ten functions and tw) 125.71 516.14 P
0.7 (o macros to han-) 231.42 516.14 P
(dle ordered e) 72 505.14 T
(v) 118.75 505.14 T
(ent queues that control when writebacks occur) 123.12 505.14 T
(.) 289.58 505.14 T
(\245) 54 492.14 T
3 F
(loader) 72 492.14 T
(.[c,h]) 94.5 492.14 T
1 F
(:) 114.5 492.14 T
0.05 (Loads the tar) 125.71 492.14 P
0.05 (get program into memory) 172.63 492.14 P
0.05 (, sets up) 264.42 492.14 P
0.9 (the se) 72 481.14 P
0.9 (gment sizes and addresses, and obtains the tar) 93.51 481.14 P
0.9 (get pro-) 264.62 481.14 P
(gram entry point.) 72 470.14 T
(\245) 54 457.14 T
3 F
(main.c) 72 457.14 T
1 F
(:) 96.25 457.14 T
2.76 (Performs all initialization and launches the) 125.71 457.14 P
(main simulator function \050) 72 446.14 T
2 F
(sim_main\050\051) 163.75 446.14 T
1 F
(\051.) 217.75 446.14 T
(\245) 54 433.14 T
3 F
(memory) 72 433.14 T
(.[c,h]) 100.49 433.14 T
1 F
(:) 120.49 433.14 T
1.61 (Contains functions for reading from, writing) 125.71 433.14 P
0.91 (to, initializing, and dumping the contents of the tar) 72 422.14 P
0.91 (get main) 261.6 422.14 P
(memory) 72 411.14 T
(.) 101.41 411.14 T
(\245) 54 398.14 T
3 F
(misc.[c,h]) 72 398.14 T
1 F
(:) 108.5 398.14 T
4.95 (Contains support functions, most notably) 125.71 398.14 P
(ar) 72 387.14 T
(gument string parsing and string manipulation functions.) 78.83 387.14 T
(\245) 54 374.14 T
3 F
(r) 72 374.14 T
(e) 75.17 374.14 T
(gs.[c,h]) 78.8 374.14 T
1 F
(:) 106.8 374.14 T
0.53 (Allocates space for the re) 125.71 374.14 P
0.53 (gister \336les, and con-) 219.17 374.14 P
(tains functions to initialize them and dump their contents.) 72 363.14 T
(\245) 54 350.14 T
3 F
(r) 72 350.14 T
(esour) 75.17 350.14 T
(ce) 94.83 350.14 T
(.[c,h]) 102.69 350.14 T
1 F
(:) 122.69 350.14 T
4.46 (Contains code to manage functional unit) 125.71 350.14 P
-0.19 (resources, di) 72 339.14 P
-0.19 (vided up into classes. The three de\336ned functions) 117.08 339.14 P
-0.07 (create the resource pools and b) 72 328.14 P
-0.07 (usy tables, return a resource \050if) 182.66 328.14 P
0.64 (an) 72 317.14 P
0.64 (y are a) 80.36 317.14 P
0.64 (v) 105.46 317.14 P
0.64 (ailable\051 from a gi) 109.73 317.14 P
0.64 (v) 173.68 317.14 P
0.64 (en pool, and dump the contents) 178.04 317.14 P
(of a pool.) 72 306.14 T
(\245) 54 293.14 T
3 F
(sim.h) 72 293.14 T
1 F
(:) 91.25 293.14 T
2.58 (Contains a fe) 125.71 293.14 P
2.58 (w e) 178.15 293.14 P
2.58 (xtern v) 193.35 293.14 P
2.58 (ariable declarations) 220.95 293.14 P
(and function prototypes.) 72 282.14 T
(\245) 54 269.14 T
3 F
(ss.[c,h]) 72 269.14 T
1 F
(:) 99 269.14 T
1.12 (De\336nes macros to e) 125.71 269.14 P
1.12 (xpedite the processing of) 200.17 269.14 P
1.91 (instructions, numerous constants needed across simulators,) 72 258.14 P
0.9 (and a function to print out indi) 72 247.14 P
0.9 (vidual instructions in a read-) 187.17 247.14 P
(able format.) 72 236.14 T
(\245) 54 223.14 T
3 F
(ss.def) 72 223.14 T
1 F
(:) 92.25 223.14 T
2.01 (Holds a list of macro calls \050the macros are) 125.71 223.14 P
1.25 (de\336ned in the simulators and) 72 212.14 P
0 F
1.25 (ss.h) 184.51 212.14 P
1 F
1.25 ( and) 198.77 212.14 P
0 F
1.25 (ss.c) 218.77 212.14 P
1 F
1.25 (\051, each of which) 232.02 212.14 P
1.03 (de\336nes an instruction. The macro calls accept as ar) 72 201.14 P
1.03 (guments) 263.26 201.14 P
1.93 (the opcode, name of the instruction, sources, destinations,) 72 190.14 P
0.66 (actions to e) 72 179.14 P
0.66 (x) 114.18 179.14 P
0.66 (ecute, and other information. This \336le serv) 118.55 179.14 P
0.66 (es as) 275.86 179.14 P
(the de\336nition of the instruction set.) 72 168.14 T
(\245) 54 155.14 T
3 F
(syscall.[c,h]) 72 155.14 T
1 F
(:) 116.5 155.14 T
0.06 (This \336le functions as the interf) 125.71 155.14 P
0.06 (ace between the) 236.17 155.14 P
0.3 (SimpleScalar system calls \050which are POSIX-compliant\051 and) 72 144.14 P
(the system calls on the host machine.) 72 133.14 T
(\245) 54 120.14 T
3 F
(syspr) 72 120.14 T
(obe) 90.59 120.14 T
(.c) 103.46 120.14 T
1 F
(:) 109.7 120.14 T
0.63 (Determines byte and w) 125.71 120.14 P
0.63 (ord order on host plat-) 210.75 120.14 P
(form, and generates appropriate compiler \337ags.) 72 109.14 T
(\245) 54 96.14 T
3 F
(ver) 72 96.14 T
(sion.h) 83.4 96.14 T
1 F
(:) 105.16 96.14 T
-0.08 (De\336nes the v) 125.71 96.14 P
-0.08 (ersion number and release date of) 172.92 96.14 P
(the distrib) 72 85.14 T
(ution.) 108.07 85.14 T
0 12 Q
(5  Details of SimpleScalar x86) 318.24 712.14 T
1 9 Q
1.56 (In this section we describe the command-line ar) 330.24 695.14 P
1.56 (guments for) 513.2 695.14 P
-0.18 (SimpleScalar x86, discuss each of the source \336les, and close with a) 318.24 685.14 P
0.08 (brief description of our e) 318.24 675.14 P
0.08 (xperiences running the simulator with the) 407.89 675.14 P
(Spec92 benchmark suite [3].) 318.24 665.14 T
0 11 Q
(5.1  SimpleScalar x86 command-line ar) 318.24 642.81 T
(guments.) 502.07 642.81 T
1 9 Q
0.13 (Currently) 330.24 628.14 P
0.13 (, only a functional simulator is a) 364.15 628.14 P
0.13 (v) 480.98 628.14 P
0.13 (ailable for SimpleS-) 485.25 628.14 P
0.31 (calar x86. The simulator is functionally and structurally similar to) 318.24 618.14 P
0.92 (that described in Section) 318.24 608.14 P
0.92 (4.1, b) 411.99 608.14 P
0.92 (ut the code is quite dif) 432.98 608.14 P
0.92 (ferent. The) 517.6 608.14 P
(command line for the simulator is:) 318.24 598.14 T
4 8 Q
(sim-func-x86 -W) 330.24 585.81 T
3 9 Q
(baseName) 402.24 585.81 T
4 8 Q
( [switches]) 439.73 585.81 T
3 9 Q
(e) 497.33 585.81 T
(xecutable) 501.15 585.81 T
4 8 Q
([arguments] < [input to target program] >) 347.04 575.81 T
([output of target program]) 347.04 565.81 T
1 9 Q
(The only ar) 318.24 552.14 T
(gument required to run the simulator is as follo) 359.57 552.14 T
(ws:) 528.83 552.14 T
(-W) 330.26 539.14 T
3 F
(baseName) 341.76 539.14 T
1 F
(This switch sets the base name in the simula-) 390.24 539.14 T
-0.2 (tor) 390.24 529.14 P
-0.2 (. It is used to name result \336les. It is required.) 399.74 529.14 P
1.02 (The optional ar) 330.24 517.14 P
1.02 (guments that the simulator will accept are the) 387.11 517.14 P
(follo) 318.24 507.14 T
(wing:) 335.02 507.14 T
(-v) 330.26 495.14 T
3 F
(instAddr) 337.76 495.14 T
1 F
(When an instruction at address) 390.24 495.14 T
3 F
(instAddr) 503.47 495.14 T
1 F
( is) 534.47 495.14 T
(encountered, become v) 390.24 485.14 T
(erbose \050dump trace) 473.33 485.14 T
(information to stderr\051) 390.24 475.14 T
(-vt) 330.26 463.14 T
3 F
(time) 340.26 463.14 T
1 F
(After e) 390.24 463.14 T
(x) 415.34 463.14 T
(ecuting) 419.71 463.14 T
3 F
(time) 448.45 463.14 T
1 F
( c) 463.95 463.14 T
(ycles, become v) 470.06 463.14 T
(erbose.) 527.66 463.14 T
(This option currently has no ef) 390.24 453.14 T
(fect, since we) 500.75 453.14 T
(ha) 390.24 443.14 T
(v) 398.56 443.14 T
(e only implemented a functional simulator) 402.92 443.14 T
(\050in which c) 390.24 433.14 T
(ycle counts are meaningless\051.) 430.6 433.14 T
(-vi) 330.26 421.14 T
3 F
(instCount) 340.26 421.14 T
1 F
(After e) 390.24 421.14 T
(x) 415.34 421.14 T
(ecuting) 419.71 421.14 T
3 F
(instCount) 448.45 421.14 T
1 F
( instructions,) 483.46 421.14 T
(become v) 390.24 411.14 T
(erbose. If instCount==1, the simula-) 424.85 411.14 T
(tor will be v) 390.24 401.14 T
(erbose from the \336rst instruction.) 433.85 401.14 T
(-V) 330.26 389.14 T
(Be v) 390.24 389.14 T
(erbose during system calls.) 406.85 389.14 T
(-m) 330.26 377.14 T
3 F
(count) 340.26 377.14 T
1 F
(Ex) 390.24 377.14 T
(ecute only) 400.1 377.14 T
3 F
(count) 439.6 377.14 T
1 F
( instructions, then termi-) 459.59 377.14 T
(nate.) 390.24 367.14 T
(-?) 330.26 355.14 T
(Display usage information) 390.24 355.14 T
0 11 Q
(5.2  Simulator code description) 318.24 332.81 T
1 9 Q
0.33 (Belo) 330.24 318.14 P
0.33 (w we list the code \336les for the simulator with a high-le) 347.02 318.14 P
0.33 (v) 547.14 318.14 P
0.33 (el) 551.5 318.14 P
(description of their purpose:) 318.24 308.14 T
(\245) 318.24 296.14 T
3 F
(main.c:) 336.24 296.14 T
1 F
(The main dri) 390.24 296.14 T
(v) 436.51 296.14 T
(er for the simulator) 440.87 296.14 T
(.) 509.62 296.14 T
(\245) 318.24 283.14 T
3 F
(func.[hc]) 336.24 283.14 T
1 F
(:) 369.49 283.14 T
1.88 (Implements the high-le) 390.24 283.14 P
1.88 (v) 477.26 283.14 P
1.88 (el functionality of a) 481.63 283.14 P
(simple functional simulator) 336.24 272.14 T
(.) 434.74 272.14 T
(\245) 318.24 259.14 T
3 F
(ix86.def) 336.24 259.14 T
1 F
(:) 364.99 259.14 T
2.1 (Captures the functionality of the instruction) 390.24 259.14 P
1.62 (set. This \336le is similar to) 336.24 248.14 P
0 F
1.62 (ss.def) 437.25 248.14 P
1 F
1.62 ( in the main SimpleScalar) 458.5 248.14 P
0.71 (release. The comple) 336.24 237.14 P
0.71 (x decoding required for x86 instructions) 409.74 237.14 P
1.59 (made this structure quite con) 336.24 226.14 P
1.59 (v) 446.23 226.14 P
1.59 (oluted. Although messy) 450.55 226.14 P
1.59 (, this) 538.9 226.14 P
1.73 (macro strate) 336.24 215.14 P
1.73 (gy a) 382.07 215.14 P
1.73 (v) 398.86 215.14 P
1.73 (oids both storing a huge lookup table in) 403.18 215.14 P
2.92 (simulator memory to parse instructions, and b) 336.24 204.14 P
2.92 (uilding an) 518.83 204.14 P
-0.1 (unwieldy nest of case statements that w) 336.24 193.14 P
-0.1 (ould parse the instruc-) 478.05 193.14 P
(tion stream.) 336.24 182.14 T
(\245) 318.24 169.14 T
3 F
(non-spec.<un>de\336nes) 336.24 169.14 T
1 F
(:) 417.12 169.14 T
0.18 ( The) 419.62 169.14 P
3 F
0.18 (non-spec.de\336nes) 438.48 169.14 P
1 F
0.18 ( \336le contains the) 498.21 169.14 P
1.48 (macros called in ix86.def that actually e) 336.24 158.14 P
1.48 (x) 488.7 158.14 P
1.48 (ecute the instruc-) 493.06 158.14 P
0.11 (tions.) 336.24 147.14 P
3 F
0.11 (non-spec.unde\336nes) 358.36 147.14 P
1 F
0.11 ( unde\336nes these macros. The pair of) 427.09 147.14 P
1.14 (\336les w) 336.24 136.14 P
1.14 (as needed because these \336les change the state of the) 361.04 136.14 P
0.38 (machine, and can not be undone. Ev) 336.24 125.14 P
0.38 (entually we plan to ha) 468.83 125.14 P
0.38 (v) 549.64 125.14 P
0.38 (e) 554 125.14 P
1.34 (a corresponding pair of \336les for speculati) 336.24 114.14 P
1.34 (v) 492 114.14 P
1.34 (e e) 496.36 114.14 P
1.34 (x) 507.8 114.14 P
1.34 (ecution, that) 512.17 114.14 P
-0.15 (will be used after branch prediction, so that the simulator may) 336.24 103.14 P
(reco) 336.24 92.14 T
(v) 351.59 92.14 T
(er from a branch mispredictions.) 355.96 92.14 T
(\245) 318.24 79.14 T
3 F
(tr) 336.24 79.14 T
(anslate) 342.11 79.14 T
(.[hc]) 367.97 79.14 T
1 F
(:) 385.72 79.14 T
1.61 (P) 390.24 79.14 P
1.61 (arses the instruction byte stream, using the) 395.11 79.14 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(9) 303.57 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
1.02 (structure in ix86.def. This \336le uses a lookup table that uses) 72 714.14 P
-0.14 (only certain bits from the instructions to reduce the size of the) 72 703.14 P
2.68 (tables. This module also contains a \322decoded instruction) 72 692.14 P
(cache\323 that speeds simulation.) 72 681.14 T
(\245) 54 668.14 T
3 F
(oper) 72 668.14 T
(ands.[hc]) 88.36 668.14 T
1 F
(:) 123.11 668.14 T
0.7 (Implements operand fetch and store function-) 126 668.14 P
0.3 (ality) 72 657.14 P
0.3 (. The \322ops\323 te) 87.42 657.14 P
0.3 (xt \336le in $X86R) 138.18 657.14 P
0.3 (OO) 196.98 657.14 P
0.3 (T contains descriptions) 209.62 657.14 P
(of e) 72 646.14 T
(v) 85.52 646.14 T
(ery operand type.) 89.88 646.14 T
(\245) 54 633.14 T
3 F
(helper) 72 633.14 T
(.[hc]) 94 633.14 T
1 F
(:) 111.74 633.14 T
1.62 (Contains simple, x86-speci\336c functions such) 126 633.14 P
(as shift, rotate and \337ag manipulation.) 72 622.14 T
(\245) 54 609.14 T
3 F
(syscall.[hc]) 72 609.14 T
1 F
(:) 114.25 609.14 T
3.75 (Describes the operating system emulation.) 126 609.14 P
2.3 (Each tar) 72 598.14 P
2.3 (get operating system call is mapped to either an) 103.87 598.14 P
1.47 (equi) 72 587.14 P
1.47 (v) 87.27 587.14 P
1.47 (alent host operating system call, or a series of helper) 91.55 587.14 P
0.93 (routines that duplicate the functionality of the tar) 72 576.14 P
0.93 (get system) 254.54 576.14 P
(call. Currently this \336le is only compatible with SunOS calls.) 72 565.14 T
(\245) 54 552.14 T
3 F
(memory) 72 552.14 T
(.[hc]) 100.49 552.14 T
1 F
(:) 118.24 552.14 T
3.68 (Similar to the corresponding SimpleScalar) 126 552.14 P
(\336les.) 72 541.14 T
(\245) 54 528.14 T
(misc.[hc]:) 72 528.14 T
0.56 (Contains simple functions such as sign e) 126 528.14 P
0.56 (xten-) 275.22 528.14 P
(sion and MIN/MAX error routines.) 72 517.14 T
0 11 Q
(5.3  Simulator details) 54 493.81 T
1 9 Q
0.02 (Using GCC and Linux \050instead of DOS or W) 66 479.14 P
0.02 (indo) 228.29 479.14 P
0.02 (ws, for e) 244.07 479.14 P
0.02 (xam-) 275.22 479.14 P
(ple\051 eliminated man) 54 469.14 T
(y dif) 125.86 469.14 T
(\336culties, including:) 142.38 469.14 T
(\245) 72 457.14 T
(se) 80.57 457.14 T
(gment re) 87.93 457.14 T
(gister manipulation) 119.54 457.14 T
(\245) 72 444.14 T
(se) 80.57 444.14 T
(gment re) 87.93 444.14 T
(gister o) 119.54 444.14 T
(v) 146.15 444.14 T
(errides) 150.52 444.14 T
(\245) 72 431.14 T
(16 bit addressing modes) 80.57 431.14 T
(\245) 72 418.14 T
(self-modifying code) 80.57 418.14 T
(\245) 72 405.14 T
(k) 80.57 405.14 T
(ernel instructions \050tlb, cache, control re) 84.98 405.14 T
(gister) 226.07 405.14 T
(, etc.\051) 245.7 405.14 T
2.72 (Some of the \336les contain code to count micro operations) 66 392.14 P
0.14 (\050delimited by #ifdef MICR) 54 382.14 P
0.14 (O_OPS ... #endif\051. This functionality is) 151.29 382.14 P
0.34 (only partially implemented, b) 54 372.14 P
0.34 (ut should pro) 161.33 372.14 P
0.34 (vide a start if you w) 209.38 372.14 P
0.34 (ant) 282.71 372.14 P
1.23 (to e) 54 362.14 P
1.23 (xtend the code to handle) 68.35 362.14 P
8 F
1.23 (m) 164.75 362.14 P
1 F
1.23 (ops e) 169.93 362.14 P
1.23 (xplicitly \050the code currently) 189.78 362.14 P
0.25 (handles the CISC x86 instructions correctly\051. If you use the micro) 54 352.14 P
3.81 (operations code, the simulator creates 2 output \336les:) 54 342.14 P
3 F
3.81 (base-) 274.22 342.14 P
1.83 (Name) 54 332.14 P
1 F
1.83 (.ops-dist and) 75 332.14 P
3 F
1.83 (baseName) 126.91 332.14 P
1 F
1.83 (.ops_\336le. The former \336le contains) 164.4 332.14 P
0.65 (the distrib) 54 322.14 P
0.65 (ution of number of) 90.72 322.14 P
8 F
0.65 (m) 163.3 322.14 P
1 F
0.65 (ops per x86 instruction. The latter) 168.49 322.14 P
(\336le contains the number of occurrences of each x86 instruction.) 54 312.14 T
0.41 (T) 66 302.14 P
0.41 (o v) 70.78 302.14 P
0.41 (alidate this functional simulator) 82.21 302.14 P
0.41 (, we attempted to simulate) 197.33 302.14 P
0.75 (all of the SPEC92 benchmarks. T) 54 292.14 P
0.75 (able) 177.5 292.14 P
0.75 (2 lists the benchmarks that) 194.74 292.14 P
1.37 (we ran with their corresponding inputs. Belo) 54 282.14 P
1.37 (w the table we list) 222.73 282.14 P
0.97 (speci\336c problems that occurred when we simulated these bench-) 54 272.14 P
(marks.them) 54 262.14 T
1.24 (The inte) 66 252.14 P
1.24 (ger benchmarks were simulated much more success-) 96.85 252.14 P
1.52 (fully than the \337oating point benchmarks. Most of the problems) 54 242.14 P
0.21 (with the \337oating-point codes in) 54 232.14 P
0.21 (v) 166.98 232.14 P
0.21 (olv) 171.3 232.14 P
0.21 (ed the dif) 182.67 232.14 P
0.21 (ferent formats of x86) 216.85 232.14 P
1.08 (and SP) 54 222.14 P
1.08 (ARC \337oating-point numbers \05080 bits v) 79.5 222.14 P
1.08 (ersus 64 bits\051. The) 224 222.14 P
0.11 (simulator currently does not support the ability of the programmer) 54 212.14 P
1.28 (or compiler on x86 machines to write 80-bit v) 54 202.14 P
1.28 (alues to memory) 229.49 202.14 P
1.28 (.) 291.46 202.14 P
0.36 (When the compiler spills the 80-bit \337oating point numbers, there-) 54 192.14 P
0.5 (fore, the simulator does not function correctly \050implementing this) 54 182.14 P
(feature should not be prohibiti) 54 172.14 T
(v) 162.76 172.14 T
(ely dif) 167.13 172.14 T
(\336cult\051.) 190.15 172.14 T
2.52 (Another dif) 66 162.14 P
2.52 (\336culty that we e) 110.04 162.14 P
2.52 (xperienced in) 175.2 162.14 P
2.52 (v) 226.09 162.14 P
2.52 (olv) 230.41 162.14 P
2.52 (ed the) 241.78 162.14 P
3 F
2.52 (cur) 270.81 162.14 P
2.52 (ses) 282.71 162.14 P
1 F
0.1 (library when simulating) 54 152.14 P
3 F
0.1 (sc) 142.53 152.14 P
1 F
0.1 (: the functionality of the Linux libc v) 150.03 152.14 P
0.1 (ar-) 283.72 152.14 P
0.88 (ies from the SunOS implementation. W) 54 142.14 P
0.88 (e emphasize that the obj-) 200.2 142.14 P
2.94 (dump-i486 utility w) 54 132.14 P
2.94 (as in) 131.79 132.14 P
2.94 (v) 151.12 132.14 P
2.94 (aluable in deb) 155.4 132.14 P
2.94 (ugging the simulator) 211.58 132.14 P
2.94 (.) 291.46 132.14 P
-0.07 (Finally) 54 122.14 P
-0.07 (, we note that the Intel 486 Programmers Reference Manual) 78.92 122.14 P
(from which we w) 54 112.14 T
(ork) 117.14 112.14 T
(ed w) 129.05 112.14 T
(as riddled with b) 146.21 112.14 T
(ugs.) 206.27 112.14 T
318.23 430.43 558.2 436.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
7 8 Q
0 X
0 0 0 1 0 0 0 K
(a.) 318.23 425.1 T
(Prog) 330.25 425.1 T
(r) 347.07 425.1 T
(am e) 349.65 425.1 T
(x) 367.2 425.1 T
(ecutes an unimplemented instr) 370.96 425.1 T
(uction \050fstp80\051) 480.01 425.1 T
(b) 318.23 415.1 T
(.) 322.36 415.1 T
-0.12 (Results are off slightly from the sun result, b) 330.25 415.1 P
-0.12 (ut matches when the) 484.75 415.1 P
(ascii output \336les are compared with spiff -r0.005) 330.25 405.1 T
(c.) 318.23 395.1 T
2.42 (Completes without error) 330.25 395.1 P
2.42 (, b) 419.6 395.1 P
2.42 (ut result \336le does not match sun) 430.75 395.1 P
(results) 330.25 385.1 T
(d.) 318.23 375.1 T
-0.14 (Runs 3.7 billion instr) 330.25 375.1 P
-0.14 (uctions and then stops on a CUBLO) 401.99 375.1 P
-0.14 (W state-) 528.56 375.1 P
(ment \050in the mdljdp2 source\051.) 330.25 365.1 T
(e) 318.23 355.1 T
(.) 322.56 355.1 T
(Errors dur) 330.25 355.1 T
(ing scanning phase of prog) 365.93 355.1 T
(r) 461.91 355.1 T
(am) 464.49 355.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(Program) 355.01 702.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Input T) 467.43 702.76 T
(ested) 496.45 702.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(cc1) 324.23 686.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1recog.i) 432.23 685.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compress) 324.23 673.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(in \050100k and 1MB v) 432.23 673.09 T
(ersions\051) 497 673.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(elvis) 324.23 661.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unix.c) 432.23 661.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(eqntott) 324.23 649.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(input.short/int_pri_3.eqn) 432.23 649.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(espresso) 324.23 637.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(opa.in, and others) 432.23 637.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(grep) 324.23 625.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(input.txt and v) 432.23 625.09 T
(arious others) 478.48 625.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(perl) 324.23 613.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tests.pl) 432.23 613.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(yacr2) 324.23 601.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(input2) 432.23 601.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(xlisp) 324.23 589.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8queens) 432.23 589.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(alvinn) 324.23 577.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10 iterations) 432.23 577.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(doduc) 324.23 565.09 T
1 6.4 Q
(a) 343.78 568.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(doducin.tin) 432.23 565.09 T
(y) 468.33 565.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ear) 324.23 553.09 T
1 6.4 Q
(b) 334 556.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(short.m22) 432.23 553.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fpppp) 324.23 541.09 T
1 6.4 Q
(a) 342.89 544.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(8 atoms) 432.23 541.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(h) 324.23 529.09 T
(ydro2d) 328.19 529.09 T
1 6.4 Q
(c) 350.85 532.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(short) 432.23 529.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mdljdp2) 324.23 517.09 T
1 6.4 Q
(d) 350.9 520.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(b) 432.23 517.09 T
(uilt in) 436.07 517.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mdljsp2) 324.23 505.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(b) 432.23 505.1 T
(uilt in) 436.07 505.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(spice) 324.23 493.1 T
1 6.4 Q
(e) 340.67 496.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(short.in) 432.23 493.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(su2cor) 324.23 481.1 T
1 6.4 Q
(a) 345.56 484.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(b) 432.23 481.1 T
(uilt in) 436.07 481.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(swm256) 324.23 469.1 T
1 6.4 Q
(a) 351.34 472.3 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(b) 432.23 469.1 T
(uilt in) 436.07 469.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tomcatv) 324.23 457.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(100 iterations) 432.23 457.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(T) 357.38 439.76 T
(ab) 362.69 439.76 T
(le 2: T) 374.26 439.76 T
(est pr) 402.56 439.76 T
(ograms and inputs) 429.59 439.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
318.23 717.05 318.23 452.8 2 L
V
0.75 H
0 Z
N
426.23 717.8 426.23 452.05 2 L
V
N
558.2 717.05 558.2 452.8 2 L
V
N
317.85 717.43 558.58 717.43 2 L
V
N
318.6 694.68 557.83 694.68 2 L
V
0.5 H
N
318.6 692.18 557.83 692.18 2 L
V
N
317.85 680.43 558.58 680.43 2 L
V
0.75 H
N
317.85 668.43 558.58 668.43 2 L
V
N
317.85 656.43 558.58 656.43 2 L
V
N
317.85 644.43 558.58 644.43 2 L
V
N
317.85 632.43 558.58 632.43 2 L
V
N
317.85 620.43 558.58 620.43 2 L
V
N
317.85 608.43 558.58 608.43 2 L
V
N
317.85 596.43 558.58 596.43 2 L
V
N
317.85 584.43 558.58 584.43 2 L
V
N
317.85 572.43 558.58 572.43 2 L
V
N
317.85 560.43 558.58 560.43 2 L
V
N
317.85 548.43 558.58 548.43 2 L
V
N
317.85 536.43 558.58 536.43 2 L
V
N
317.85 524.43 558.58 524.43 2 L
V
N
317.85 512.43 558.58 512.43 2 L
V
N
317.85 500.43 558.58 500.43 2 L
V
N
317.85 488.43 558.58 488.43 2 L
V
N
317.85 476.43 558.58 476.43 2 L
V
N
317.85 464.43 558.58 464.43 2 L
V
N
317.85 452.43 558.58 452.43 2 L
V
N
0 12 Q
(6  Summary) 318.29 325 T
1 9 Q
1.67 (The SimpleScalar tool set w) 330.29 308 P
1.67 (as written by T) 438.38 308 P
1.67 (odd Austin o) 496.93 308 P
1.67 (v) 546.64 308 P
1.67 (er) 551.01 308 P
0.09 (about one and a half years, between 1994 and 1996. The ancestors) 318.29 298 P
-0.22 (of the tool set date back to the mid to late 1980s, to tools written by) 318.29 288 P
0.17 (Manoj Franklin. Ste) 318.29 278 P
0.17 (v) 390.65 278 P
0.17 (e Bennett wrote SimpleScalar x86 during the) 395.01 278 P
0.4 (summer of 1995. At the time the tools were de) 318.29 268 P
0.4 (v) 489.1 268 P
0.4 (eloped, both indi-) 493.46 268 P
1.37 (viduals were research assistants at the Uni) 318.29 258 P
1.37 (v) 478.26 258 P
1.37 (ersity of W) 482.62 258 P
1.37 (isconsin-) 525.5 258 P
0.17 (Madison Computer Sciences Department, supervised by Professor) 318.29 248 P
2.17 (Guri Sohi. Scott Breach pro) 318.29 238 P
2.17 (vided v) 427.07 238 P
2.17 (aluable assistance with the) 455.76 238 P
0.2 (implementation of the proxy system calls. The release w) 318.29 228 P
0.2 (as assem-) 523.05 228 P
0.39 (bled, deb) 318.29 218 P
0.39 (ugged, and documented by Doug Bur) 351.49 218 P
0.39 (ger) 488.23 218 P
0.39 (, also a research) 499.37 218 P
0.17 (assistant at W) 318.29 208 P
0.17 (isconsin. Much of the SimpleScalar x86 documenta-) 368.26 208 P
0.28 (tion in this report w) 318.29 198 P
0.28 (as only slightly modi\336ed from the report writ-) 390.31 198 P
(ten entirely by Ste) 318.29 188 T
(v) 383.81 188 T
(e Bennett.) 388.17 188 T
-0.19 (These tools pro) 330.29 178 P
-0.19 (vide researchers with a simulation infrastructure) 385.26 178 P
0.21 (that is f) 318.29 168 P
0.21 (ast, \337e) 345.62 168 P
0.21 (xible, and ef) 369.2 168 P
0.21 (\336cient. Changes in both the tar) 414.15 168 P
0.21 (get hard-) 525.55 168 P
-0.05 (w) 318.29 158 P
-0.05 (are and softw) 324.7 158 P
-0.05 (are may be made with minimal ef) 372.98 158 P
-0.05 (fort. W) 493.4 158 P
-0.05 (e hope that) 518.62 158 P
0.61 (you \336nd these tools useful, and encourage you to contact us with) 318.29 148 P
1.15 (w) 318.29 138 P
1.15 (ays that we can impro) 324.7 138 P
1.15 (v) 408.15 138 P
1.15 (e the release, documentation, and tools) 412.52 138 P
(themselv) 318.29 128 T
(es.) 350.65 128 T
0 12 Q
(Refer) 318.29 104 T
(ences) 346.71 104 T
1 9 Q
([1]) 318.29 87 T
0.89 (Charles Price.) 339.89 87 P
3 F
0.89 (MIPS IV Instruction Set, r) 394.4 87 P
0.89 (e) 491.86 87 P
0.89 (vision 3.1) 495.72 87 P
1 F
0.89 (. MIPS) 531.61 87 P
3.73 (T) 339.89 76 P
3.73 (echnologies, Inc., Mountain V) 344.76 76 P
3.73 (ie) 464.88 76 P
3.73 (w) 471.15 76 P
3.73 (, California, January) 477.06 76 P
318.57 346.28 557.86 346.28 2 L
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(10) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(1995.) 76.46 714 T
([2]) 54.86 703 T
1.41 (Gurindar) 76.46 703 P
1.41 (S. Sohi. Instruction Issue Logic for High-Perfor-) 111.2 703 P
2.43 (mance, Interruptible, Multiple Functional Unit, Pipelined) 76.46 692 P
1.73 (Computers.) 76.46 681 P
3 F
1.73 (IEEE T) 122.18 681 P
1.73 (r) 150.16 681 P
1.73 (ansactions on Computer) 153.53 681 P
1.73 (s) 244.89 681 P
1 F
1.73 (, 39\0503\051:349\320) 248.4 681 P
(359, March 1990.) 76.46 670 T
([3]) 54.86 659 T
0.11 (Standard Performance Ev) 76.46 659 P
0.11 (aluation Corporation.) 168.93 659 P
3 F
0.11 (SPEC Ne) 248.39 659 P
0.11 (ws-) 282.12 659 P
(letter) 76.46 648 T
1 F
(, F) 95.1 648 T
(airf) 104.46 648 T
(ax, V) 116.87 648 T
(ir) 135.82 648 T
(ginia, December 1991.) 141.16 648 T
0 12 Q
(A Instruction set de\336nition) 54.86 613 T
1 9 Q
2.43 (This appendix lists all SimpleScalar instructions with their) 66.86 596 P
3.19 (opcode, assembler format, and semantics. The semantics are) 54.86 586 P
0.27 (e) 54.86 576 P
0.27 (xpressed as a C-style e) 58.72 576 P
0.27 (xpression that uses the e) 141.66 576 P
0.27 (xtended operators) 230.11 576 P
0.45 (and operands described in T) 54.86 566 P
0.45 (able) 157.42 566 P
0.45 (3. Operands that are not listed in) 174.67 566 P
0.35 (T) 54.86 556 P
0.35 (able) 59.64 556 P
0.35 (3 refer to actual instruction \336elds described in Figure) 76.88 556 P
0.35 (2. F) 272.9 556 P
0.35 (or) 287.12 556 P
0.8 (each instruction, the ne) 54.86 546 P
0.8 (xt PC v) 140.6 546 P
0.8 (alue \050NPC\051 def) 168.99 546 P
0.8 (aults to the current) 224.98 546 P
(PC v) 54.86 536 T
(alue plus eight \050CPC+8\051 unless otherwise speci\336ed.) 72.39 536 T
0 11 Q
(A.1 Contr) 54.86 513.67 T
(ol instructions) 101.71 513.67 T
0 9 Q
(J) 54.86 497 T
1 F
(:) 59.36 497 T
(Jump to absolute address.) 126.86 497 T
(Opcode:) 66.86 486 T
(0x01) 126.86 486 T
(F) 66.86 476 T
(ormat:) 71.73 476 T
(J tar) 126.86 476 T
(get) 141.94 476 T
(Semantics:) 66.86 466 T
1 8 Q
(SET_NPC\050\050CPC & 0xf0000000\051 | \050T) 126.86 466 T
(ARGET<<2\051\051\051) 245.05 466 T
0 9 Q
(J) 54.86 446 T
(AL) 59.09 446 T
1 F
(:) 71.59 446 T
(Jump to absolute address and link.) 126.86 446 T
(Opcode:) 66.86 435 T
(0x02) 126.86 435 T
(F) 66.86 425 T
(ormat:) 71.73 425 T
(J) 126.86 425 T
(AL tar) 129.82 425 T
(get) 153.4 425 T
(Semantics:) 66.86 415 T
1 8 Q
(SET_NPC\050\050CPC\134&0xf0000000\051 | \050T) 126.86 415 T
(ARGET<<2\051\051) 243.27 415 T
(SET_GPR\05031, CPC + 8\051\051) 126.86 405.67 T
0 9 Q
(JR) 54.86 386 T
1 F
(:) 65.86 386 T
(Jump to re) 126.86 386 T
(gister address.) 164.72 386 T
(Opcode:) 66.86 375 T
(0x03) 126.86 375 T
(F) 66.86 365 T
(ormat:) 71.73 365 T
(JR rs) 126.86 365 T
(Semantics:) 66.86 355 T
1 8 Q
(T) 126.86 355 T
(ALIGN\050GPR\050RS\051\051) 131 355 T
(SET_NPC\050GPR\050RS\051\051) 126.86 345.67 T
0 9 Q
(J) 54.86 326 T
(ALR) 59.09 326 T
1 F
(:) 78.09 326 T
(Jump to re) 126.86 326 T
(gister address and link.) 164.72 326 T
(Opcode:) 66.86 315 T
(0x04) 126.86 315 T
(F) 66.86 305 T
(ormat:) 71.73 305 T
(J) 126.86 305 T
(ALR rs) 129.82 305 T
(Semantics:) 66.86 295 T
1 8 Q
(T) 126.86 295 T
(ALIGN\050GPR\050RS\051\051) 131 295 T
(SET_GPR\050RD, CPC + 8\051) 66.86 285 T
(SET_NPC\050GPR\050RS\051\051) 126.86 275.67 T
0 9 Q
(BEQ) 54.86 256 T
1 F
(:) 73.86 256 T
(Branch if equal.) 126.86 256 T
(Opcode:) 66.86 245 T
(0x05) 126.86 245 T
(F) 66.86 235 T
(ormat:) 71.73 235 T
(BEQ rs,rt,of) 126.86 235 T
(fset) 170.88 235 T
(Semantics:) 66.86 225 T
1 8 Q
(if \050GPR\050RS\051 == GPR\050R) 126.86 225 T
(T\051\051) 203.18 225 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 134.06 215.67 T
(else) 126.86 206.67 T
(SET_NPC\050CPC + 8\051) 134.06 197.67 T
0 9 Q
(BNE) 54.86 178 T
1 F
(:) 73.36 178 T
(Branch if not equal.) 126.86 178 T
(Opcode:) 66.86 167 T
(0x06) 126.86 167 T
(F) 66.86 157 T
(ormat:) 71.73 157 T
(BEQ rs,rt,of) 126.86 157 T
(fset) 170.88 157 T
(Semantics:) 66.86 147 T
1 8 Q
(if \050GPR\050RS\051 != GPR\050R) 126.86 147 T
(T\051\051) 201.34 147 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 134.06 137.67 T
(else) 126.86 128.67 T
(SET_NPC\050CPC + 8\051) 134.06 119.67 T
0 9 Q
(BLEZ) 54.86 100 T
1 F
(:) 78.87 100 T
(Branch if less than or equal to zero.) 126.86 100 T
(Opcode:) 66.86 89 T
(0x07) 126.86 89 T
(F) 66.86 79 T
(ormat:) 71.73 79 T
(BLEZ rs,of) 126.86 79 T
(fset) 167.63 79 T
(Semantics:) 331.1 714 T
1 8 Q
(if \050GPR\050RS\051 <= 0\051) 391.1 714 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 398.3 704.67 T
(else) 391.1 695.67 T
(SET_NPC\050CPC + 8\051) 398.3 686.67 T
0 9 Q
(BGTZ) 319.1 667 T
1 F
(:) 344.11 667 T
(Branch if greater than zero.) 391.1 667 T
(Opcode:) 331.1 656 T
(0x08) 391.1 656 T
(F) 331.1 646 T
(ormat:) 335.97 646 T
(BGTZ rs,of) 391.1 646 T
(fset) 432.87 646 T
(Semantics:) 331.1 636 T
1 8 Q
(if \050GPR\050RS\051 > 0\051) 391.1 636 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 398.3 626.67 T
(else) 391.1 617.67 T
(SET_NPC\050CPC + 8\051) 398.3 608.67 T
0 9 Q
(BL) 319.1 589 T
(TZ) 330.27 589 T
1 F
(:) 342.28 589 T
(Branch if less than zero.) 391.1 589 T
(Opcode:) 331.1 578 T
(0x09) 391.1 578 T
(F) 331.1 568 T
(ormat:) 335.97 568 T
(BL) 391.1 568 T
(TZ rs,of) 401.77 568 T
(fset) 431.04 568 T
(Semantics:) 331.1 558 T
1 8 Q
(if \050GPR\050RS\051 < 0\051) 391.1 558 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 398.3 548.67 T
(else) 391.1 539.67 T
(SET_NPC\050CPC + 8\051) 398.3 530.67 T
0 9 Q
(BGEZ) 319.1 511 T
1 F
(:) 344.11 511 T
(Branch if greater than or equal to zero.) 391.1 511 T
(Opcode:) 331.1 500 T
(0x0a) 391.1 500 T
(F) 331.1 490 T
(ormat:) 335.97 490 T
(BGEZ rs,of) 391.1 490 T
(fset) 432.87 490 T
(Semantics:) 331.1 480 T
1 8 Q
(if \050GPR\050RS\051 >= 0\051) 391.1 480 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 398.3 470.67 T
(else) 391.1 461.67 T
(SET_NPC\050CPC + 8\051) 398.3 452.67 T
0 9 Q
(BC1F) 319.1 433 T
1 F
(:) 341.6 433 T
(Branch on \337oating point compare f) 391.1 433 T
(alse.) 517.24 433 T
(Opcode:) 331.1 422 T
(0x0b) 391.1 422 T
(F) 331.1 412 T
(ormat:) 335.97 412 T
(BC1F of) 391.1 412 T
(fset) 422.13 412 T
(Semantics:) 331.1 402 T
1 8 Q
(if \050!FCC\051) 391.1 402 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 398.3 392.67 T
(else) 391.1 383.67 T
(SET_NPC\050CPC + 8\051) 398.3 374.67 T
0 9 Q
(BC1T) 319.1 355 T
1 F
(:) 341.65 355 T
(Branch on \337oating point compare true.) 391.1 355 T
(Opcode:) 331.1 344 T
(0x0c) 391.1 344 T
(F) 331.1 334 T
(ormat:) 335.97 334 T
(BC1T of) 391.1 334 T
(fset) 422.62 334 T
(Semantics:) 331.1 324 T
1 8 Q
(if \050FCC\051) 391.1 324 T
(SET_NPC\050CPC + 8 + \050OFFSET << 2\051\051) 398.3 314.67 T
(else) 391.1 305.67 T
(SET_NPC\050CPC + 8\051) 398.3 296.67 T
0 11 Q
(A.2 Load/stor) 319.1 274.67 T
(e instructions) 383.68 274.67 T
0 9 Q
(LB) 319.1 258 T
1 F
(:) 331.1 258 T
(Load byte signed, displaced addressing.) 391.1 258 T
(Opcode:) 331.1 247 T
(0x20) 391.1 247 T
(F) 331.1 237 T
(ormat:) 335.97 237 T
(LB rt,of) 391.1 237 T
(fset\050rs\051 inc_dec) 419.87 237 T
(Semantics:) 331.1 227 T
1 8 Q
-1.23 (SET_GPR\050R) 391.1 227 P
-1.23 (T) 432.4 227 P
-1.23 (, READ_SIGNED_BYTE\050GPR\050RS\051 +) 436.7 227 P
(OFFSET\051\051) 391.1 217 T
0 9 Q
(LB) 319.1 197 T
1 F
(:) 331.1 197 T
(Load byte signed, inde) 391.1 197 T
(x) 472.95 197 T
(ed addressing.) 477.32 197 T
(Opcode:) 331.1 186 T
(0xc0) 391.1 186 T
(F) 331.1 176 T
(ormat:) 335.97 176 T
(LB rt,\050rs+rd\051 inc_dec) 391.1 176 T
(Semantics:) 331.1 166 T
1 8 Q
(SET_GPR\050R) 391.1 166 T
(T) 432.4 166 T
(,) 436.7 166 T
(READ_SIGNED_BYTE\050GPR\050RS\051+GPR\050RD\051\051\051) 391.1 156 T
0 9 Q
(LB) 319.1 136 T
(U) 331.01 136 T
1 F
(:) 337.51 136 T
(Load byte unsigned, displaced addressing.) 391.1 136 T
(Opcode:) 331.1 125 T
(0x22) 391.1 125 T
(F) 331.1 115 T
(ormat:) 335.97 115 T
(LB) 391.1 115 T
(U rt,of) 402.51 115 T
(fset\050rs\051 inc_dec) 426.28 115 T
(Semantics:) 331.1 105 T
1 8 Q
(SET_GPR\050R) 391.1 105 T
(T) 432.4 105 T
(,) 436.7 105 T
(READ_UNSIGNED_BYTE\050GPR\050RS\051+OFFSET\051\051) 391.1 95 T
0 9 Q
(LB) 319.1 75 T
(U) 331.01 75 T
1 F
(:) 337.51 75 T
(Load byte unsigned, inde) 391.1 75 T
(x) 481.95 75 T
(ed addressing.) 486.32 75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(11) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(Opcode:) 66 326.28 T
(0xc1) 126 326.28 T
(F) 66 316.28 T
(ormat:) 70.87 316.28 T
(LB) 126 316.28 T
(U rt,\050rs+rd\051 inc_dec) 137.41 316.28 T
(Semantics:) 66 306.28 T
1 8 Q
(SET_GPR\050R) 126 306.28 T
(T) 167.3 306.28 T
(,) 171.6 306.28 T
(READ_UNSIGNED_BYTE\050GPR\050RS\051+GPR\050RD\051\051\051) 126 296.28 T
0 9 Q
(LH) 54 276.28 T
1 F
(:) 67 276.28 T
(Load half signed, displaced addressing.) 126 276.28 T
(Opcode:) 66 265.28 T
(0x24) 126 265.28 T
(F) 66 255.28 T
(ormat:) 70.87 255.28 T
(LH rt,of) 126 255.28 T
(fset\050rs\051 inc_dec) 155.27 255.28 T
(Semantics:) 66 245.28 T
1 8 Q
(SET_GPR\050R) 126 245.28 T
(T) 167.3 245.28 T
(,) 171.6 245.28 T
(READ_SIGNED_HALF\050GPR\050RS\051+OFFSET\051\051) 126 235.28 T
0 9 Q
(LH) 54 215.28 T
1 F
(:) 67 215.28 T
(Load half signed, inde) 126 215.28 T
(x) 206.35 215.28 T
(ed addressing.) 210.72 215.28 T
(Opcode:) 66 204.28 T
(0xc2) 126 204.28 T
(F) 66 194.28 T
(ormat:) 70.87 194.28 T
(LH rt,\050rs+rd\051 inc_dec) 126 194.28 T
(Semantics:) 66 184.28 T
1 8 Q
(SET_GPR\050R) 126 184.28 T
(T) 167.3 184.28 T
(,) 171.6 184.28 T
(READ_SIGNED_HALF\050GPR\050RS\051+GPR\050RD\051\051\051) 126 174.28 T
0 9 Q
(LHU) 54 154.28 T
1 F
(:) 73.5 154.28 T
(Load half unsigned, displaced addressing.) 126 154.28 T
(Opcode:) 66 143.28 T
(0x26) 126 143.28 T
(F) 66 133.28 T
(ormat:) 70.87 133.28 T
(LHU rt,of) 126 133.28 T
(fset\050rs\051 inc_dec) 161.77 133.28 T
(Semantics:) 66 123.28 T
1 8 Q
(SET_GPR\050R) 126 123.28 T
(T) 167.3 123.28 T
(,) 171.6 123.28 T
(READ_UNSIGNED_HALF\050GPR\050RS\051+OFFSET\051\051) 126 113.28 T
0 9 Q
(LHU) 54 93.28 T
1 F
(:) 73.5 93.28 T
(Load half unsigned, inde) 126 93.28 T
(x) 215.35 93.28 T
(ed addressing.) 219.72 93.28 T
(Opcode:) 66 82.28 T
(0xc3) 126 82.28 T
(F) 330.24 326.28 T
(ormat:) 335.11 326.28 T
(LHU rt,\050rs+rd\051 inc_dec) 390.24 326.28 T
(Semantics:) 330.24 316.28 T
1 8 Q
(SET_GPR\050R) 390.24 316.28 T
(T) 431.54 316.28 T
(,) 435.84 316.28 T
(READ_UNSIGNED_HALF\050GPR\050RS\051+GPR\050RD\051\051\051) 390.24 306.28 T
0 9 Q
(L) 318.24 286.28 T
(W) 323.42 286.28 T
1 F
(:) 332.08 286.28 T
(Load w) 390.24 286.28 T
(ord, displaced addressing.) 417.39 286.28 T
(Opcode:) 330.24 275.28 T
(0x28) 390.24 275.28 T
(F) 330.24 265.28 T
(ormat:) 335.11 265.28 T
(L) 390.24 265.28 T
(W rt,of) 395.07 265.28 T
(fset\050rs\051 inc_dec) 420.84 265.28 T
(Semantics:) 330.24 255.28 T
1 8 Q
(SET_GPR\050R) 390.24 255.28 T
(T) 431.54 255.28 T
(, READ_W) 435.84 255.28 T
(ORD\050GPR\050RS\051+OFF-) 473.09 255.28 T
(SET\051\051) 390.24 245.28 T
0 9 Q
(L) 318.24 225.28 T
(W) 323.42 225.28 T
1 F
(:) 332.08 225.28 T
(Load w) 390.24 225.28 T
(ord, inde) 417.39 225.28 T
(x) 449.25 225.28 T
(ed addressing.) 453.62 225.28 T
(Opcode:) 330.24 214.28 T
(0xc4) 390.24 214.28 T
(F) 330.24 204.28 T
(ormat:) 335.11 204.28 T
(L) 390.24 204.28 T
(W rt,\050rs+rd\051 inc_dec) 395.07 204.28 T
(Semantics:) 330.24 194.28 T
1 8 Q
(SET_GPR\050R) 390.24 194.28 T
(T) 431.54 194.28 T
(,) 435.84 194.28 T
(READ_W) 390.24 184.28 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 423.49 184.28 T
0 9 Q
(DL) 318.24 164.28 T
(W) 329.91 164.28 T
1 F
(:) 338.58 164.28 T
(Double load w) 390.24 164.28 T
(ord, displaced addressing.) 443.14 164.28 T
(Opcode:) 330.24 153.28 T
(0x29) 390.24 153.28 T
(F) 330.24 143.28 T
(ormat:) 335.11 143.28 T
(DL) 390.24 143.28 T
(W rt,of) 401.57 143.28 T
(fset\050rs\051 inc_dec) 427.34 143.28 T
(Semantics:) 330.24 133.28 T
1 8 Q
(SET_GPR\050R) 390.24 133.28 T
(T) 431.54 133.28 T
(, READ_W) 435.84 133.28 T
(ORD\050GPR\050RS\051+OFF-) 473.09 133.28 T
(SET\051\051) 390.24 123.28 T
(SET_GPR\050R) 390.24 113.95 T
(T+1, READ_W) 431.54 113.95 T
(ORD\050GPR\050RS\051+OFF-) 482.19 113.95 T
(SET+4\051\051) 390.24 104.95 T
0 9 Q
(DL) 318.24 85.28 T
(W) 329.91 85.28 T
1 F
(:) 338.58 85.28 T
(Double load w) 390.24 85.28 T
(ord, inde) 443.14 85.28 T
(x) 475 85.28 T
(ed addressing.) 479.37 85.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 8 Q
(Operator/operand) 168.72 709.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Semantics) 344.49 709.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(FS) 150 697.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(same as \336eld RS) 267 697.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FT) 150 687.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(same as \336eld R) 267 687.38 T
(T) 321.89 687.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FD) 150 677.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(same as \336eld RD) 267 677.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(UIMM) 150 667.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IMM \336eld unsigned-e) 267 667.38 T
(xtended to w) 341.01 667.38 T
(ord v) 386.29 667.38 T
(alue) 403.87 667.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IMM) 150 657.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IMM \336eld sign-e) 267 657.38 T
(xtended to w) 323.22 657.38 T
(ord v) 368.5 657.38 T
(alue) 386.08 657.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(OFFSET) 150 647.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IMM \336eld sign-e) 267 647.38 T
(xtended to w) 323.22 647.38 T
(ord v) 368.5 647.38 T
(alue) 386.08 647.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CPC) 150 637.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(PC v) 267 637.38 T
(alue of e) 284.14 637.38 T
(x) 314.58 637.38 T
(ecuting instr) 318.34 637.38 T
(uction) 361.59 637.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NPC) 150 627.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ne) 267 627.38 T
(xt PC v) 275.66 627.38 T
(alue) 301.24 627.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_NPC\050V\051) 150 617.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set ne) 267 617.38 T
(xt PC to v) 289.89 617.38 T
(alue V) 324.37 617.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(GPR\050N\051) 150 607.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Gener) 267 607.38 T
(al pur) 289.15 607.38 T
(pose register N) 309.4 607.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_GPR\050N,V\051) 150 597.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set gener) 267 597.38 T
(al pur) 301.61 597.38 T
(pose register N to v) 321.86 597.38 T
(alue V) 391.02 597.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FPR_F\050N\051) 150 587.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating point register N single-precision v) 267 587.38 T
(alue) 415.74 587.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_FPR_F\050N,V\051) 150 577.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set \337oating point register N to single-precision v) 267 577.38 T
(alue V) 436.2 577.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FPR_D\050N\051) 150 567.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating point register N doub) 267 567.38 T
(le-precision v) 371.78 567.38 T
(alue) 418.7 567.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_FPR_D\050N,V\051) 150 557.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set \337oating point register N to doub) 267 557.38 T
(le-precision v) 392.24 557.38 T
(alue V) 439.16 557.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FPR_L\050N\051) 150 547.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating point register N liter) 267 547.38 T
(al w) 366.95 547.38 T
(ord v) 381.1 547.38 T
(alue) 398.68 547.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_FPR_L\050N,V\051) 150 537.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set \337oating point register N to liter) 267 537.38 T
(al w) 387.42 537.38 T
(ord v) 401.56 537.38 T
(alue V) 419.14 537.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(HI) 150 527.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(High result register v) 267 527.38 T
(alue) 340.15 527.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_HI\050V\051) 150 517.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set high result register to v) 267 517.38 T
(alue V) 361.95 517.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(LO) 150 507.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lo) 267 507.38 T
(w result register v) 275.78 507.38 T
(alue) 338.26 507.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SET_LO\050V\051) 150 497.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Set lo) 267 497.38 T
(w result register to v) 287.34 497.38 T
(alue V) 358.71 497.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(READ_SIGNED_BYTE\050A\051) 150 487.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Read signed b) 267 487.38 T
(yte from address A) 318.42 487.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(READ_UNSIGNED_BYTE\050A\051) 150 477.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Read unsigned b) 267 477.38 T
(yte from address A) 327.32 477.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WRITE_BYTE\050V) 150 467.38 T
(,A\051) 208.12 467.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Wr) 267 467.38 T
(ite b) 277.34 467.38 T
(yte v) 292.3 467.38 T
(alue V at address A) 308.99 467.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(READ_SIGNED_HALF\050A\051) 150 457.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Read signed half from address A) 267 457.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(READ_UNSIGNED_HALF\050A\051) 150 447.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Read unsigned half from address A) 267 447.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WRITE_HALF\050V) 150 437.38 T
(,A\051) 207.67 437.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Wr) 267 437.38 T
(ite half v) 277.34 437.38 T
(alue V at address A) 306.93 437.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(READ_W) 150 427.38 T
(ORD\050A\051) 184.06 427.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Read w) 267 427.38 T
(ord from address A) 294.04 427.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(WRITE_W) 150 417.38 T
(ORD\050V) 187.62 417.38 T
(,A\051) 212.39 417.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Wr) 267 417.38 T
(ite w) 277.34 417.38 T
(ord v) 293.7 417.38 T
(alue V at address A) 311.29 417.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 150 407.38 T
(ALIGN\050T\051) 153.93 407.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Chec) 267 407.38 T
(k target T is aligned to 8 b) 285.51 407.38 T
(yte boundar) 377.4 407.38 T
(y) 419.89 407.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FP) 150 397.38 T
(ALIGN\050N\051) 159.26 397.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Chec) 267 397.38 T
(k register N is wholly divisib) 285.51 397.38 T
(le b) 383.14 397.38 T
(y 2) 395.88 397.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(O) 150 387.38 T
(VER\050X,Y\051) 155.82 387.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Chec) 267 387.38 T
(k f) 285.51 387.38 T
(or o) 293.72 387.38 T
(v) 307.38 387.38 T
(er\337o) 311.18 387.38 T
(w when adding X to Y) 326.62 387.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(UNDER\050X,Y\051) 150 377.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Chec) 267 377.38 T
(k f) 285.51 377.38 T
(or o) 293.72 377.38 T
(v) 307.38 377.38 T
(er\337o) 311.18 377.38 T
(w when subtr) 326.62 377.38 T
(action Y from X) 373.67 377.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(DIV0\050V\051) 150 367.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Chec) 267 367.38 T
(k f) 285.51 367.38 T
(or division b) 293.72 367.38 T
(y z) 336.24 367.38 T
(ero error with divisor V) 346.34 367.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 10 Q
(T) 218.09 351.05 T
(ab) 223.4 351.05 T
(le 3: Operator/operand semantics) 234.97 351.05 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
144 717.34 144 364.09 2 L
V
0.75 H
0 Z
N
261 718.09 261 363.34 2 L
V
N
468 717.34 468 364.09 2 L
V
N
143.62 717.71 468.38 717.71 2 L
V
N
144.38 704.96 467.62 704.96 2 L
V
0.5 H
N
144.38 702.46 467.62 702.46 2 L
V
N
143.62 693.71 468.38 693.71 2 L
V
0.75 H
N
143.62 683.71 468.38 683.71 2 L
V
N
143.62 673.71 468.38 673.71 2 L
V
N
143.62 663.71 468.38 663.71 2 L
V
N
143.62 653.71 468.38 653.71 2 L
V
N
143.62 643.71 468.38 643.71 2 L
V
N
143.62 633.71 468.38 633.71 2 L
V
N
143.62 623.71 468.38 623.71 2 L
V
N
143.62 613.71 468.38 613.71 2 L
V
N
143.62 603.71 468.38 603.71 2 L
V
N
143.62 593.71 468.38 593.71 2 L
V
N
143.62 583.71 468.38 583.71 2 L
V
N
143.62 573.71 468.38 573.71 2 L
V
N
143.62 563.71 468.38 563.71 2 L
V
N
143.62 553.71 468.38 553.71 2 L
V
N
143.62 543.71 468.38 543.71 2 L
V
N
143.62 533.71 468.38 533.71 2 L
V
N
143.62 523.71 468.38 523.71 2 L
V
N
143.62 513.71 468.38 513.71 2 L
V
N
143.62 503.71 468.38 503.71 2 L
V
N
143.62 493.71 468.38 493.71 2 L
V
N
143.62 483.71 468.38 483.71 2 L
V
N
143.62 473.71 468.38 473.71 2 L
V
N
143.62 463.71 468.38 463.71 2 L
V
N
143.62 453.71 468.38 453.71 2 L
V
N
143.62 443.71 468.38 443.71 2 L
V
N
143.62 433.71 468.38 433.71 2 L
V
N
143.62 423.71 468.38 423.71 2 L
V
N
143.62 413.71 468.38 413.71 2 L
V
N
143.62 403.71 468.38 403.71 2 L
V
N
143.62 393.71 468.38 393.71 2 L
V
N
143.62 383.71 468.38 383.71 2 L
V
N
143.62 373.71 468.38 373.71 2 L
V
N
143.62 363.71 468.38 363.71 2 L
V
N
54.29 343.43 557.86 343.43 2 L
0.5 H
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(12) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(Opcode:) 66 732 T
(0xce) 126 732 T
(F) 66 722 T
(ormat:) 70.87 722 T
(DL) 126 722 T
(W rt,\050rs+rd\051 inc_dec) 137.33 722 T
(Semantics:) 66 712 T
1 8 Q
(SET_GPR\050R) 126 712 T
(T) 167.3 712 T
(,) 171.6 712 T
(READ_W) 126 702 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 159.25 702 T
(SET_GPR\050R) 126 692.67 T
(T+1,) 167.3 692.67 T
(READ_W) 126 683.67 T
(ORD\050GPR\050RS\051+GPR\050RD\051+4\051\051) 159.25 683.67 T
0 9 Q
(L.S) 54 664 T
1 F
(:) 67.26 664 T
0.14 (Load w) 126 664 P
0.14 (ord into \337oating point re) 153.29 664 P
0.14 (gister \336le, dis-) 241.73 664 P
(placed addressing.) 126 653 T
(Opcode:) 66 642 T
(0x2a) 126 642 T
(F) 66 632 T
(ormat:) 70.87 632 T
(L.S ft,of) 126 632 T
(fset\050rs\051 inc_dec) 156.02 632 T
(Semantics:) 66 622 T
1 8 Q
(SET_FPR_L\050FT) 126 622 T
(, READ_W) 178.75 622 T
(ORD\050GPR\050RS\051+OFF-) 216 622 T
(SET\051\051) 126 612 T
0 9 Q
(L.S) 54 592 T
1 F
(:) 67.26 592 T
2.79 (Load w) 126 592 P
2.79 (ord into \337oating point re) 155.94 592 P
2.79 (gister \336le,) 254.97 592 P
(inde) 126 581 T
(x) 141.36 581 T
(ed addressing.) 145.73 581 T
(Opcode:) 66 570 T
(0xc5) 126 570 T
(F) 66 560 T
(ormat:) 70.87 560 T
(L.S ft,\050rs+rd\051 inc_dec) 126 560 T
(Semantics:) 66 550 T
1 8 Q
(SET_FPR_L\050R) 126 550 T
(T) 174.86 550 T
(,) 179.16 550 T
(READ_W) 126 540 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 159.25 540 T
0 9 Q
(L.D) 54 520 T
1 F
(:) 68.75 520 T
1 (Load double w) 126 520 P
1 (ord into \337oating point re) 181.9 520 P
1 (gister) 273.76 520 P
(\336le, displaced addressing.) 126 509 T
(Opcode:) 66 498 T
(0x2b) 126 498 T
(F) 66 488 T
(ormat:) 70.87 488 T
(L.D ft,of) 126 488 T
(fset\050rs\051 inc_dec) 157.52 488 T
(Semantics:) 66 478 T
1 8 Q
(SET_FPR_L\050FT) 126 478 T
(, READ_W) 178.75 478 T
(ORD\050GPR\050RS\051+OFF-) 216 478 T
(SET\051\051) 126 468 T
(SET_FPR_L\050FT+1,) 126 458.67 T
(READ_W) 126 449.67 T
(ORD\050GPR\050RS\051+OFFSET+4\051\051) 159.25 449.67 T
0 9 Q
(L.D) 54 430 T
1 F
(:) 68.75 430 T
1 (Load double w) 126 430 P
1 (ord into \337oating point re) 181.9 430 P
1 (gister) 273.76 430 P
(\336le, inde) 126 419 T
(x) 157.37 419 T
(ed addressing.) 161.73 419 T
(Opcode:) 66 408 T
(0xcf) 126 408 T
(F) 66 398 T
(ormat:) 70.87 398 T
(L.D ft,\050rs+rd\051 inc_dec) 126 398 T
(Semantics:) 66 388 T
1 8 Q
(SET_FPR_L\050R) 126 388 T
(T) 174.86 388 T
(,) 179.16 388 T
(READ_W) 126 378 T
(ORD\050GPR\050RS\051+GPR\050RD\051\051\051) 159.25 378 T
(SET_FPR_L\050R) 126 368.67 T
(T+1,) 174.86 368.67 T
(READ_W) 126 359.67 T
(ORD\050GPR\050RS\051+GPR\050RD\051+4\051\051) 159.25 359.67 T
0 9 Q
(L) 54 340 T
(WL) 59.17 340 T
1 F
(:) 74.18 340 T
(Load w) 126 340 T
(ord left, displaced addressing.) 153.15 340 T
(Opcode:) 66 329 T
(0x2c) 126 329 T
(F) 66 319 T
(ormat:) 70.87 319 T
(L) 126 319 T
(WL of) 130.83 319 T
(fset\050rs\051) 154.35 319 T
(Semantics:) 66 309 T
-1.08 (See) 126 309 P
1 8 Q
-0.96 (ss.def) 140.17 309 P
1 9 Q
-1.08 ( or [Kane:92] for a detailed description) 158.61 309 P
(of this instruction\325) 126 299 T
(s semantics. NO) 192.01 299 T
(TE: L) 250.39 299 T
(WL) 270.97 299 T
(does not support pre-/post- inc/dec.) 126 289 T
0 F
(L) 54 269 T
(WR) 59.17 269 T
1 F
(:) 74.67 269 T
(Load w) 126 269 T
(ord right, displaced addressing.) 153.15 269 T
(Opcode:) 66 258 T
(0x2d) 126 258 T
(F) 66 248 T
(ormat:) 70.87 248 T
(L) 126 248 T
(WR of) 130.83 248 T
(fset\050rs\051) 154.85 248 T
(Semantics:) 66 238 T
-1.08 (See) 126 238 P
1 8 Q
-0.96 (ss.def) 140.17 238 P
1 9 Q
-1.08 ( or [Kane:92] for a detailed description) 158.61 238 P
(of this instruction\325) 126 228 T
(s semantics. NO) 192.01 228 T
(TE: L) 250.39 228 T
(WR) 270.97 228 T
(does not support pre-/post- inc/dec.) 126 218 T
0 F
(SB) 54 198 T
1 F
(:) 65.01 198 T
(Store byte, displaced addressing.) 126 198 T
(Opcode:) 66 187 T
(0x30) 126 187 T
(F) 66 177 T
(ormat:) 70.87 177 T
(SB rt,of) 126 177 T
(fset\050rs\051 inc_dec) 154.28 177 T
(Semantics:) 66 167 T
1 8 Q
(WRITE_BYTE\050GPR\050R) 126 167 T
(T\051, GPR\050RS\051+OFFSET\051) 201.96 167 T
0 9 Q
(SB) 54 147 T
1 F
(:) 65.01 147 T
(Store byte, inde) 126 147 T
(x) 182.61 147 T
(ed addressing.) 186.98 147 T
(Opcode:) 66 136 T
(0xc6) 126 136 T
(F) 66 126 T
(ormat:) 70.87 126 T
(SB rt,\050rs+rd\051 inc_dec) 126 126 T
(Semantics:) 66 116 T
1 8 Q
(WRITE_BYTE\050GPR\050R) 126 116 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 201.96 116 T
0 9 Q
(SH) 54 96 T
1 F
(:) 66.01 96 T
(Store half, displaced addressing.) 126 96 T
(Opcode:) 66 85 T
(0x32) 126 85 T
(F) 66 75 T
(ormat:) 70.87 75 T
(SH rt,of) 126 75 T
(fset\050rs\051 inc_dec) 154.77 75 T
(Semantics:) 330.24 732 T
1 8 Q
(WRITE_HALF\050GPR\050R) 390.24 732 T
(T\051, GPR\050RS\051+OFFSET\051) 466.2 732 T
0 9 Q
(SH) 318.24 712 T
1 F
(:) 330.25 712 T
(Store half, inde) 390.24 712 T
(x) 445.35 712 T
(ed addressing.) 449.71 712 T
(Opcode:) 330.24 701 T
(0xc7) 390.24 701 T
(F) 330.24 691 T
(ormat:) 335.11 691 T
(SH rt,\050rs+rd\051 inc_dec) 390.24 691 T
(Semantics:) 330.24 681 T
1 8 Q
(WRITE_HALF\050GPR\050R) 390.24 681 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 466.2 681 T
0 9 Q
(SW) 318.24 661 T
1 F
(:) 331.91 661 T
(Store w) 390.24 661 T
(ord, displaced addressing.) 417.9 661 T
(Opcode:) 330.24 650 T
(0x34) 390.24 650 T
(F) 330.24 640 T
(ormat:) 335.11 640 T
(SW rt,of) 390.24 640 T
(fset\050rs\051 inc_dec) 421.01 640 T
(Semantics:) 330.24 630 T
1 8 Q
(WRITE_W) 390.24 630 T
(ORD\050GPR\050R) 427.04 630 T
(T\051, GPR\050RS\051+OFFSET\051) 469.67 630 T
0 9 Q
(SW) 318.24 610 T
1 F
(:) 331.91 610 T
(Store w) 390.24 610 T
(ord, inde) 417.9 610 T
(x) 449.76 610 T
(ed addressing.) 454.12 610 T
(Opcode:) 330.24 599 T
(0xc8) 390.24 599 T
(F) 330.24 589 T
(ormat:) 335.11 589 T
(SW rt,\050rs+rd\051 inc_dec) 390.24 589 T
(Semantics:) 330.24 579 T
1 8 Q
(WRITE_W) 390.24 579 T
(ORD\050GPR\050R) 427.04 579 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 469.67 579 T
0 9 Q
(DSW) 318.24 559 T
1 F
(:) 338.41 559 T
(Double store w) 390.24 559 T
(ord, displaced addressing.) 445.14 559 T
(Opcode:) 330.24 548 T
(0x35) 390.24 548 T
(F) 330.24 538 T
(ormat:) 335.11 538 T
(DSW rt,of) 390.24 538 T
(fset\050rs\051 inc_dec) 427.51 538 T
(Semantics:) 330.24 528 T
1 8 Q
(WRITE_W) 390.24 528 T
(ORD\050GPR\050R) 427.04 528 T
(T\051, GPR\050RS\051+OFFSET\051) 469.67 528 T
(WRITE_W) 390.24 518.67 T
(ORD\050GPR\050R) 427.04 518.67 T
(T+1\051, GPR\050RS\051+OFF-) 469.67 518.67 T
(SET+4\051) 390.24 509.67 T
0 9 Q
(DSW) 318.24 490 T
1 F
(:) 338.41 490 T
(Double store w) 390.24 490 T
(ord, inde) 445.14 490 T
(x) 477 490 T
(ed addressing.) 481.36 490 T
(Opcode:) 330.24 479 T
(0xd0) 390.24 479 T
(F) 330.24 469 T
(ormat:) 335.11 469 T
(DSW rt,\050rs+rd\051 inc_dec) 390.24 469 T
(Semantics:) 330.24 459 T
1 8 Q
(WRITE_W) 390.24 459 T
(ORD\050GPR\050R) 427.04 459 T
(T\051, GPR\050RS\051+GPR\050RD\051\051) 469.67 459 T
(WRITE_W) 390.24 449.67 T
(ORD\050GPR\050R) 427.04 449.67 T
(T+1\051,) 469.67 449.67 T
(GPR\050RS\051+GPR\050RD\051+4\051) 390.24 440.67 T
0 9 Q
(DSZ) 318.24 421 T
1 F
(:) 335.74 421 T
(Double store zero, displaced addressing.) 390.24 421 T
(Opcode:) 330.24 410 T
(0x38) 390.24 410 T
(F) 330.24 400 T
(ormat:) 335.11 400 T
(DSW rt,of) 390.24 400 T
(fset\050rs\051 inc_dec) 427.51 400 T
(Semantics:) 330.24 390 T
1 8 Q
(WRITE_W) 390.24 390 T
(ORD\0500, GPR\050RS\051+OFFSET\051) 427.04 390 T
(WRITE_W) 390.24 380.67 T
(ORD\0500, GPR\050RS\051+OFFSET+4\051) 427.04 380.67 T
0 9 Q
(DSZ) 318.24 361 T
1 F
(:) 335.74 361 T
(Double store zero, inde) 390.24 361 T
(x) 474.08 361 T
(ed addressing.) 478.45 361 T
(Opcode:) 330.24 350 T
(0xd1) 390.24 350 T
(F) 330.24 340 T
(ormat:) 335.11 340 T
(DSW rt,\050rs+rd\051 inc_dec) 390.24 340 T
(Semantics:) 330.24 330 T
1 8 Q
(WRITE_W) 390.24 330 T
(ORD\0500, GPR\050RS\051+GPR\050RD\051\051) 427.04 330 T
(WRITE_W) 390.24 320.67 T
(ORD\0500, GPR\050RS\051+GPR\050RD\051+4\051) 427.04 320.67 T
0 9 Q
(S.S) 318.24 301 T
1 F
(:) 330.5 301 T
2.12 (Store w) 390.24 301 P
2.12 (ord from \337oating point re) 420.02 301 P
2.12 (gister \336le,) 519.88 301 P
(displaced addressing.) 390.24 290 T
(Opcode:) 330.24 279 T
(0x36) 390.24 279 T
(F) 330.24 269 T
(ormat:) 335.11 269 T
(S.S ft,of) 390.24 269 T
(fset\050rs\051 inc_dec) 419.77 269 T
(Semantics:) 330.24 259 T
1 8 Q
(WRITE_W) 390.24 259 T
(ORD\050FPR_L\050FT\051, GPR\050RS\051+OFFSET\051) 427.04 259 T
0 9 Q
(S.S) 318.24 239 T
1 F
(:) 330.5 239 T
2.12 (Store w) 390.24 239 P
2.12 (ord from \337oating point re) 420.02 239 P
2.12 (gister \336le,) 519.88 239 P
(inde) 390.24 228 T
(x) 405.6 228 T
(ed addressing.) 409.97 228 T
(Opcode:) 330.24 217 T
(0xc9) 390.24 217 T
(F) 330.24 207 T
(ormat:) 335.11 207 T
(S.S ft,\050rs+rd\051 inc_dec) 390.24 207 T
(Semantics:) 330.24 197 T
1 8 Q
-0.22 (WRITE_W) 390.24 197 P
-0.22 (ORD\050FPR_L\050FT\051, GPR\050RS\051+GPR\050RD\051\051) 427.04 197 P
0 9 Q
(S.D) 318.24 177 T
1 F
(:) 331.99 177 T
0.33 (Store double w) 390.24 177 P
0.33 (ord from \337oating point re) 445.31 177 P
0.33 (gister) 538 177 P
(\336le, displaced addressing.) 390.24 166 T
(Opcode:) 330.24 155 T
(0x37) 390.24 155 T
(F) 330.24 145 T
(ormat:) 335.11 145 T
(S.D ft,of) 390.24 145 T
(fset\050rs\051 inc_dec) 421.26 145 T
(Semantics:) 330.24 135 T
1 8 Q
(WRITE_W) 390.24 135 T
(ORD\050FPR_L\050FT\051, GPR\050RS\051+OFFSET\051) 427.04 135 T
(WRITE_W) 390.24 125.67 T
(ORD\050FPR_L\050FT+1\051, GPR\050RS\051+OFF-) 427.04 125.67 T
(SET+4\051) 390.24 116.67 T
0 9 Q
(S.D) 318.24 97 T
1 F
(:) 331.99 97 T
0.33 (Store double w) 390.24 97 P
0.33 (ord from \337oating point re) 445.31 97 P
0.33 (gister) 538 97 P
(\336le, inde) 390.24 86 T
(x) 421.61 86 T
(ed addressing.) 425.97 86 T
(Opcode:) 330.24 75 T
(0xd2) 390.24 75 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(13) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(F) 66 732 T
(ormat:) 70.87 732 T
(S.D ft,\050rs+rd\051 inc_dec) 126 732 T
(Semantics:) 66 722 T
1 8 Q
-0.22 (WRITE_W) 126 722 P
-0.22 (ORD\050FPR_L\050FT\051, GPR\050RS\051+GPR\050RD\051\051) 162.8 722 P
(WRITE_W) 126 712.67 T
(ORD\050FPR_L\050FT+1\051,) 162.8 712.67 T
(GPR\050RS\051+GPR\050RD\051+4\051) 126 703.67 T
0 9 Q
(SWL) 54 684 T
1 F
(:) 74.01 684 T
(Store w) 126 684 T
(ord left, displaced addressing.) 153.66 684 T
(Opcode:) 66 673 T
(0x39) 126 673 T
(F) 66 663 T
(ormat:) 70.87 663 T
(SWL rt,of) 126 663 T
(fset\050rs\051) 162.27 663 T
(Semantics:) 66 653 T
(See) 126 653 T
2 F
(ss.def) 141.25 653 T
1 F
(or [Kane:92] for a detailed) 179.05 653 T
(description of this instruction\325) 126 643 T
(s semantics.) 234.25 643 T
(NO) 126 633 T
(TE: SWL does not support pre-/post- inc/) 138.64 633 T
(dec.) 126 623 T
0 F
(SWR) 54 603 T
1 F
(:) 74.5 603 T
(Store w) 126 603 T
(ord right, displaced addressing.) 153.66 603 T
(Opcode:) 66 592 T
(0x3a) 126 592 T
(F) 66 582 T
(ormat:) 70.87 582 T
(SWR rt,of) 126 582 T
(fset\050rs\051) 162.77 582 T
(Semantics:) 66 572 T
(See) 126 572 T
2 F
(ss.def) 141.25 572 T
1 F
( or [Kane:92] for a detailed) 173.65 572 T
(description of this instruction\325) 126 562 T
(s semantics.) 234.25 562 T
(NO) 126 552 T
(TE: SWR does not support pre-/post- inc/) 138.64 552 T
(dec.) 126 542 T
0 11 Q
(A.3 Integer instructions) 54 519.67 T
0 9 Q
(ADD) 54 503 T
1 F
(:) 73.49 503 T
(Add signed \050with o) 126 503 T
(v) 195.11 503 T
(er\337o) 199.48 503 T
(w check\051.) 215.75 503 T
(Opcode:) 66 492 T
(0x40) 126 492 T
(F) 66 482 T
(ormat:) 70.87 482 T
(ADD rd,rs,rt) 126 482 T
(Semantics:) 66 472 T
1 8 Q
(O) 126 472 T
(VER\050GPR\050R) 131.38 472 T
(T\051,GPR\050R) 173.12 472 T
(T\051\051) 205.75 472 T
(SET_GPR\050RD, GPR\050RS\051 + GPR\050R) 126 462.67 T
(T\051\051) 239.82 462.67 T
0 9 Q
(ADDI) 54 443 T
1 F
(:) 77 443 T
(Add immediate signed \050with o) 126 443 T
(v) 235.36 443 T
(er\337o) 239.72 443 T
(w check\051.) 256 443 T
(Opcode:) 66 432 T
(0x41) 126 432 T
(F) 66 422 T
(ormat:) 70.87 422 T
(ADDI rd,rs,rt) 126 422 T
(Semantics:) 66 412 T
1 8 Q
(O) 126 412 T
(VER\050GPR\050RS\051,IMM\051) 131.38 412 T
(SET_GPR\050R) 126 402.67 T
(T) 167.3 402.67 T
(, GPR\050RS\051 + IMM\051) 171.6 402.67 T
0 9 Q
(ADDU) 54 383 T
1 F
(:) 79.99 383 T
(Add unsigned \050no o) 126 383 T
(v) 197.11 383 T
(er\337o) 201.47 383 T
(w check\051.) 217.75 383 T
(Opcode:) 66 372 T
(0x42) 126 372 T
(F) 66 362 T
(ormat:) 70.87 362 T
(ADDU rd,rs,rt) 126 362 T
(Semantics:) 66 352 T
1 8 Q
(SET_GPR\050RD, GPR\050RS\051 + GPR\050R) 126 352 T
(T\051\051) 239.82 352 T
0 9 Q
(ADDIU) 54 332 T
1 F
(:) 83.49 332 T
(Add immediate unsigned \050no o) 126 332 T
(v) 237.36 332 T
(er\337o) 241.72 332 T
(w check\051.) 257.99 332 T
(Opcode:) 66 321 T
(0x43) 126 321 T
(F) 66 311 T
(ormat:) 70.87 311 T
(ADDIU rd,rs,rt) 126 311 T
(Semantics:) 66 301 T
1 8 Q
(SET_GPR\050R) 126 301 T
(T) 167.3 301 T
(, GPR\050RS\051 + IMM\051) 171.6 301 T
0 9 Q
(SUB) 54 281 T
1 F
(:) 71.5 281 T
(Subtract signed \050with under\337o) 126 281 T
(w check\051.) 235.02 281 T
(Opcode:) 66 270 T
(0x44) 126 270 T
(F) 66 260 T
(ormat:) 70.87 260 T
(SUB rd,rs,rt) 126 260 T
(Semantics:) 66 250 T
1 8 Q
(UNDER\050GPR\050RS\051,GPR\050R) 126 250 T
(T\051\051) 211.97 250 T
(SET_GPR\050RD, GPR\050RS\051 - GPR\050R) 126 240.67 T
(T\051\051) 237.98 240.67 T
0 9 Q
(SUB) 54 221 T
(U) 71.42 221 T
1 F
(:) 77.91 221 T
(Subtract unsigned \050without under\337o) 126 221 T
(w check\051.) 255.52 221 T
(Opcode:) 66 210 T
(0x45) 126 210 T
(F) 66 200 T
(ormat:) 70.87 200 T
(SUB) 126 200 T
(U rd,rs,rt) 143.41 200 T
(Semantics:) 66 190 T
1 8 Q
(SET_GPR\050RD, GPR\050RS\051 - GPR\050R) 126 190 T
(T\051\051) 237.98 190 T
0 9 Q
(MUL) 54 170 T
(T) 74.17 170 T
1 F
(:) 79.72 170 T
(Multiply signed.) 126 170 T
(Opcode:) 66 159 T
(0x46) 126 159 T
(F) 66 149 T
(ormat:) 70.87 149 T
(MUL) 126 149 T
(T rs,rt) 145.17 149 T
(Semantics:) 66 139 T
1 8 Q
(SET_HI\050\050RS * R) 126 139 T
(T\051 / \0501<<32\051\051) 180.63 139 T
(SET_LO\050\050RS * R) 126 129.67 T
(T\051 % \0501<<32\051\051) 182.86 129.67 T
0 9 Q
(MUL) 54 110 T
(TU) 74.17 110 T
1 F
(:) 86.67 110 T
(Multiply unsigned.) 126 110 T
(Opcode:) 66 99 T
(0x47) 126 99 T
(F) 66 89 T
(ormat:) 70.87 89 T
(MUL) 126 89 T
(TU rs,rt) 145.17 89 T
(Semantics:) 66 79 T
1 8 Q
(SET_HI\050\050\050unsigned\051RS * \050unsigned\051R) 126 79 T
(T\051/\0501<<32\051\051) 249.06 79 T
1 9 Q
(SET_LO\050\050\050unsigned\051RS*\050unsigned\051R) 390.24 732 T
(T\051 %) 526.69 732 T
(\0501<<32\051\051) 390.24 722 T
0 F
(DIV) 318.24 701 T
1 F
(:) 334.07 701 T
(Di) 390.24 701 T
(vide signed.) 399.02 701 T
(Opcode:) 330.24 690 T
(0x48) 390.24 690 T
(F) 330.24 680 T
(ormat:) 335.11 680 T
(DIV rs,rt) 390.24 680 T
(Semantics:) 330.24 670 T
1 8 Q
(DIV0\050GPR\050R) 390.24 670 T
(T\051\051) 434.2 670 T
(SET_LO\050GPR\050RS\051 / GPR\050R) 390.24 660.67 T
(T\051\051) 481.77 660.67 T
(SET_HI\050GPR\050RS\051 % GPR\050R) 390.24 651.67 T
(T\051\051) 483.98 651.67 T
0 9 Q
(DIVU) 318.24 632 T
1 F
(Di) 390.24 632 T
(vide unsigned.) 399.02 632 T
(Opcode:) 330.24 621 T
(0x49) 390.24 621 T
(F) 330.24 611 T
(ormat:) 335.11 611 T
(DIVU rs,rt) 390.24 611 T
(Semantics:) 330.24 601 T
1 8 Q
(DIV0\050GPR\050R) 390.24 601 T
(T\051\051) 434.2 601 T
-1.21 (SET_LO\050\050unsigned\051GPR\050RS\051/ \050unsigned\051GPR\050R) 390.24 591.67 P
-1.21 (T\051\051) 546.99 591.67 P
(SET_HI\050\050unsigned\051GPR\050RS\051%\050unsigned\051GPR\050R) 390.24 582.67 T
(T\051) 548.42 582.67 T
(\051) 390.24 573.67 T
0 9 Q
(MFHI) 318.24 554 T
1 F
(:) 342.74 554 T
(Mo) 390.24 554 T
(v) 402.61 554 T
(e from HI re) 406.97 554 T
(gister) 451.57 554 T
(.) 471.07 554 T
(Opcode:) 330.24 543 T
(0x4a) 390.24 543 T
(F) 330.24 533 T
(ormat:) 335.11 533 T
(MFHI rd) 390.24 533 T
(Semantics:) 330.24 523 T
1 8 Q
(SET_GPR\050RD, HI\051) 390.24 523 T
0 9 Q
(MTHI) 318.24 503 T
1 F
(:) 343.24 503 T
(Mo) 390.24 503 T
(v) 402.61 503 T
(e to HI re) 406.97 503 T
(gister) 441.07 503 T
(.) 460.58 503 T
(Opcode:) 330.24 492 T
(0x4b) 390.24 492 T
(F) 330.24 482 T
(ormat:) 335.11 482 T
(MTHI rs) 390.24 482 T
(Semantics:) 330.24 472 T
1 8 Q
(SET_HI\050GPR\050RS\051\051) 390.24 472 T
0 9 Q
(MFLO) 318.24 452 T
1 F
(:) 345.24 452 T
(Mo) 390.24 452 T
(v) 402.61 452 T
(e from LO re) 406.97 452 T
(gister) 454.07 452 T
(.) 473.57 452 T
(Opcode:) 330.24 441 T
(0x4c) 390.24 441 T
(F) 330.24 431 T
(ormat:) 335.11 431 T
(MFLO rd) 390.24 431 T
(Semantics:) 330.24 421 T
1 8 Q
(SET_GPR\050RD, LO\051) 390.24 421 T
0 9 Q
(MTLO) 318.24 401 T
1 F
(:) 345.74 401 T
(Mo) 390.24 401 T
(v) 402.61 401 T
(e to LO re) 406.97 401 T
(gister) 443.57 401 T
(.) 463.08 401 T
(Opcode:) 330.24 390 T
(0x4d) 390.24 390 T
(F) 330.24 380 T
(ormat:) 335.11 380 T
(MTLO rs) 390.24 380 T
(Semantics:) 330.24 370 T
1 8 Q
(SET_LO\050GPR\050RS\051\051) 390.24 370 T
0 9 Q
(AND) 318.24 350 T
1 F
(:) 337.73 350 T
(Logical AND.) 390.24 350 T
(Opcode:) 330.24 339 T
(0x4e) 390.24 339 T
(F) 330.24 329 T
(ormat:) 335.11 329 T
(AND rd,rs,rt) 390.24 329 T
(Semantics:) 330.24 319 T
1 8 Q
(SET_GPR\050RD, GPR\050RS\051 & GPR\050R) 390.24 319 T
(T\051\051) 505.78 319 T
0 9 Q
(ANDI) 318.24 299 T
1 F
(:) 341.23 299 T
(Logical AND immediate.) 390.24 299 T
(Opcode:) 330.24 288 T
(0x4f) 390.24 288 T
(F) 330.24 278 T
(ormat:) 335.11 278 T
(ANDI rd,rt,imm) 390.24 278 T
(Semantics:) 330.24 268 T
1 8 Q
(SET_GPR\050R) 390.24 268 T
(T) 431.54 268 T
(, GPR\050RS\051 & UIMM\051) 435.84 268 T
0 9 Q
(OR) 318.24 248 T
1 F
(:) 331.74 248 T
(Logical OR.) 390.24 248 T
(Opcode:) 330.24 237 T
(0x50) 390.24 237 T
(F) 330.24 227 T
(ormat:) 335.11 227 T
(OR rd,rs,rt) 390.24 227 T
(Semantics:) 330.24 217 T
1 8 Q
(SET_GPR\050RD, GPR\050RS\051 | GPR\050R) 390.24 217 T
(T\051\051) 501.15 217 T
0 9 Q
(ORI) 318.24 197 T
1 F
(:) 335.24 197 T
(Logical OR immediate.) 390.24 197 T
(Opcode:) 330.24 186 T
(0x51) 390.24 186 T
(F) 330.24 176 T
(ormat:) 335.11 176 T
(ORI rd,rt,imm) 390.24 176 T
(Semantics:) 330.24 166 T
1 8 Q
(SET_GPR\050R) 390.24 166 T
(T) 431.54 166 T
(, GPR\050RS\051 | UIMM\051) 435.84 166 T
0 9 Q
(XOR) 318.24 146 T
1 F
(:) 338.24 146 T
(Logical XOR.) 390.24 146 T
(Opcode:) 330.24 135 T
(0x52) 390.24 135 T
(F) 330.24 125 T
(ormat:) 335.11 125 T
(XOR rd,rs,rt) 390.24 125 T
(Semantics:) 330.24 115 T
1 8 Q
(SET_GPR\050RD, GPR\050RS\051 ^ GPR\050R) 390.24 115 T
(T\051\051) 503.3 115 T
0 9 Q
(XORI) 318.24 95 T
1 F
(:) 341.74 95 T
(Logical XOR immediate.) 390.24 95 T
(Opcode:) 330.24 84 T
(0x53) 390.24 84 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(14) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(F) 66 732 T
(ormat:) 70.87 732 T
(ORI rd,rt,uimm) 126 732 T
(Semantics:) 66 722 T
1 8 Q
(SET_GPR\050R) 126 722 T
(T) 167.3 722 T
(, GPR\050RS\051 ^ UIMM\051) 171.6 722 T
0 9 Q
(NOR) 54 702 T
1 F
(:) 74 702 T
(Logical NOR.) 126 702 T
(Opcode:) 66 691 T
(0x54) 126 691 T
(F) 66 681 T
(ormat:) 70.87 681 T
(NOR rd,rs,rt) 126 681 T
(Semantics:) 66 671 T
1 8 Q
(SET_GPR\050RD, ~\050GPR\050RS\051 | GPR\050R) 126 671 T
(T\051\051\051) 243.9 671 T
0 9 Q
(SLL) 54 651 T
1 F
(:) 71.01 651 T
(Shift left logical.) 126 651 T
(Opcode:) 66 640 T
(0x55) 126 640 T
(F) 66 630 T
(ormat:) 70.87 630 T
(SLL rd,rt,shamt) 126 630 T
(Semantics:) 66 620 T
1 8 Q
(SET_GPR\050RD, GPR\050R) 126 620 T
(T\051 << SHAMT\051) 200.64 620 T
0 9 Q
(SLL) 54 600 T
(V) 70.18 600 T
1 F
(:) 76.01 600 T
(Shift left logical v) 126 600 T
(ariable.) 191.02 600 T
(Opcode:) 66 589 T
(0x56) 126 589 T
(F) 66 579 T
(ormat:) 70.87 579 T
(SLL) 126 579 T
(V rd,rt,rs) 141.1 579 T
(Semantics:) 66 569 T
1 8 Q
(SET_GPR\050RD, GPR\050R) 126 569 T
(T\051 << \050GPR\050RS\051 & 0x1f\051\051) 200.64 569 T
0 9 Q
(SRL) 54 549 T
1 F
(:) 71.5 549 T
(Shift right logical.) 126 549 T
(Opcode:) 66 538 T
(0x57) 126 538 T
(F) 66 528 T
(ormat:) 70.87 528 T
(SRL rd,rt,shamt) 126 528 T
(Semantics:) 66 518 T
1 8 Q
(SET_GPR\050RD, GPR\050R) 126 518 T
(T\051 >> SHAMT\051) 200.64 518 T
0 9 Q
(SRL) 54 498 T
(V) 70.68 498 T
1 F
(:) 76.51 498 T
(Shift right logical v) 126 498 T
(ariable.) 196.03 498 T
(Opcode:) 66 487 T
(0x58) 126 487 T
(F) 66 477 T
(ormat:) 70.87 477 T
(SRL) 126 477 T
(V rd,rt,rs) 141.61 477 T
(Semantics:) 66 467 T
1 8 Q
(SET_GPR\050RD, GPR\050R) 126 467 T
(T\051 << \050GPR\050RS\051 & 0x1f\051\051) 200.64 467 T
0 9 Q
(SRA) 54 447 T
1 F
(:) 72 447 T
(Shift right arithmetic.) 126 447 T
(Opcode:) 66 436 T
(0x59) 126 436 T
(F) 66 426 T
(ormat:) 70.87 426 T
(SRA rd,rt,shamt) 126 426 T
(Semantics:) 66 416 T
1 8 Q
(SET_GPR\050RD, SEX\050GPR\050R) 126 416 T
(T\051 >> SHAMT) 218.42 416 T
(, 31 -) 266.4 416 T
(SHAMT\051\051) 126 406 T
0 9 Q
(SRA) 54 386 T
(V) 70.69 386 T
1 F
(:) 76.53 386 T
(Shift right arithmetic v) 126 386 T
(ariable.) 208.03 386 T
(Opcode:) 66 375 T
(0x59) 126 375 T
(F) 66 365 T
(ormat:) 70.87 365 T
(SRA) 126 365 T
(V rd,rt,rs) 142.29 365 T
(Semantics:) 66 355 T
1 8 Q
(SET_GPR\050RD, SEX\050GPR\050R) 126 355 T
(T\051 >> SHAMT) 218.42 355 T
(, 31 -) 266.4 355 T
(\050GPR\050RD\051 & 0x1f\051\051\051) 126 345 T
0 9 Q
(SL) 54 325 T
(T) 64.18 325 T
1 F
(:) 69.73 325 T
(Set re) 126 325 T
(gister if less than.) 146.61 325 T
(Opcode:) 66 314 T
(0x5b) 126 314 T
(F) 66 304 T
(ormat:) 70.87 304 T
(SL) 126 304 T
(T rd,rs,rt) 135.68 304 T
(Semantics:) 66 294 T
1 8 Q
(SET_GPR\050RD, \050GPR\050RS\051 < GPR\050R) 126 294 T
(T\051\051 ? 1 : 0\051) 242.49 294 T
0 9 Q
(SL) 54 274 T
(TI) 64.18 274 T
1 F
(:) 73.68 274 T
(Set re) 126 274 T
(gister if less than immediate.) 146.61 274 T
(Opcode:) 66 263 T
(0x5c) 126 263 T
(F) 66 253 T
(ormat:) 70.87 253 T
(SL) 126 253 T
(TI rd,rs,imm) 135.68 253 T
(Semantics:) 66 243 T
1 8 Q
(SET_GPR\050RD, \050GPR\050RS\051 < IMM\051 ? 1 : 0\051) 126 243 T
0 9 Q
(SL) 54 223 T
(TU) 64.18 223 T
1 F
(:) 76.68 223 T
(Set re) 126 223 T
(gister if less than unsigned.) 146.61 223 T
(Opcode:) 66 212 T
(0x5d) 126 212 T
(F) 66 202 T
(ormat:) 70.87 202 T
(SL) 126 202 T
(TU rd,rs,rt) 135.68 202 T
(Semantics:) 66 192 T
1 8 Q
(SET_GPR\050RD,) 126 192 T
(\050\050unsigned\051GPR\050RS\051<\050unsigned\051GPR\050R) 126 182 T
(T\051\051 ? 1 : 0\051) 255.36 182 T
0 9 Q
(SL) 54 162 T
(TIU) 64.18 162 T
1 F
(:) 80.18 162 T
(Set re) 126 162 T
(gister if less than unsigned immediate.) 146.61 162 T
(Opcode:) 66 151 T
(0x5d) 126 151 T
(F) 66 141 T
(ormat:) 70.87 141 T
(SL) 126 141 T
(TIU rd,rs,imm) 135.68 141 T
(Semantics:) 66 131 T
1 8 Q
(SET_GPR\050RD,) 126 131 T
(\050\050unsigned\051GPR\050RS\051<\050unsigned\051GPR\050R) 126 121 T
(T\051\051 ? 1 : 0\051) 255.36 121 T
0 11 Q
(A.4 Floating-point instructions) 54 98.67 T
0 9 Q
(ADD) 54 82 T
(.S) 73.31 82 T
1 F
(:) 80.57 82 T
(Add \337oating point, single precision.) 126 82 T
(Opcode:) 330.24 732 T
(0x70) 390.24 732 T
(F) 330.24 722 T
(ormat:) 335.11 722 T
(ADD.S fd,fs,ft) 390.24 722 T
(Semantics:) 330.24 712 T
1 8 Q
(FP) 390.24 712 T
(ALIGN\050FD\051) 398.4 712 T
(FP) 390.24 702.67 T
(ALIGN\050FS\051) 398.4 702.67 T
(FP) 390.24 693.67 T
(ALIGN\050FT\051) 398.4 693.67 T
(SET_FPR_F\050FD, FPR_F\050FS\051 + FPR_F\050FT\051\051\051) 390.24 684.67 T
0 9 Q
(ADD) 318.24 665 T
(.D) 337.55 665 T
1 F
(:) 346.3 665 T
(Add \337oating point, double-precision.) 390.24 665 T
(Opcode:) 330.24 654 T
(0x71) 390.24 654 T
(F) 330.24 644 T
(ormat:) 335.11 644 T
(ADD.D fd,fs,ft) 390.24 644 T
(Semantics:) 330.24 634 T
1 8 Q
(FP) 390.24 634 T
(ALIGN\050FD\051) 398.4 634 T
(FP) 390.24 624.67 T
(ALIGN\050FS\051) 398.4 624.67 T
(FP) 390.24 615.67 T
(ALIGN\050FT\051) 398.4 615.67 T
(SET_FPR_D\050FD, FPR_D\050FS\051 + FPR_D\050FT\051\051\051) 390.24 606.67 T
0 9 Q
(SUB.S) 318.24 586 T
1 F
(:) 343 586 T
(Subtract \337oating point, single precision.) 390.24 586 T
(Opcode:) 330.24 575 T
(0x72) 390.24 575 T
(F) 330.24 565 T
(ormat:) 335.11 565 T
(SUB.S fd,fs,ft) 390.24 565 T
(Semantics:) 330.24 555 T
1 8 Q
(FP) 390.24 555 T
(ALIGN\050FD\051) 398.4 555 T
(FP) 390.24 545.67 T
(ALIGN\050FS\051) 398.4 545.67 T
(FP) 390.24 536.67 T
(ALIGN\050FT\051) 398.4 536.67 T
(SET_FPR_F\050FD, FPR_F\050FS\051 - FPR_F\050FT\051\051\051) 390.24 527.67 T
0 9 Q
(SUB.D) 318.24 508 T
1 F
(:) 344.49 508 T
(Subtract \337oating point, double precision.) 390.24 508 T
(Opcode:) 330.24 497 T
(0x73) 390.24 497 T
(F) 330.24 487 T
(ormat:) 335.11 487 T
(SUB.D fd,fs,ft) 390.24 487 T
(Semantics:) 330.24 477 T
1 8 Q
(FP) 390.24 477 T
(ALIGN\050FD\051) 398.4 477 T
(FP) 390.24 467.67 T
(ALIGN\050FS\051) 398.4 467.67 T
(FP) 390.24 458.67 T
(ALIGN\050FT\051) 398.4 458.67 T
(SET_FPR_D\050FD, FPR_D\050FS\051 - FPR_D\050FT\051\051\051) 390.24 449.67 T
0 9 Q
(MUL.S) 318.24 430 T
1 F
(:) 346.49 430 T
(Multiply \337oating point, single precision.) 390.24 430 T
(Opcode:) 330.24 419 T
(0x74) 390.24 419 T
(F) 330.24 409 T
(ormat:) 335.11 409 T
(MUL.S fd,fs,ft) 390.24 409 T
(Semantics:) 330.24 399 T
1 8 Q
(FP) 390.24 399 T
(ALIGN\050FD\051) 398.4 399 T
(FP) 390.24 389.67 T
(ALIGN\050FS\051) 398.4 389.67 T
(FP) 390.24 380.67 T
(ALIGN\050FT\051) 398.4 380.67 T
(SET_FPR_F\050FD,FPR_F\050FS\051*FPR_F\050FT\051\051\051) 390.24 371.67 T
0 9 Q
(MUL.D) 318.24 352 T
1 F
(:) 347.98 352 T
(Multiply \337oating point, double precision.) 390.24 352 T
(Opcode:) 330.24 341 T
(0x75) 390.24 341 T
(F) 330.24 331 T
(ormat:) 335.11 331 T
(MUL.D fd,fs,ft) 390.24 331 T
(Semantics:) 330.24 321 T
1 8 Q
(FP) 390.24 321 T
(ALIGN\050FD\051) 398.4 321 T
(FP) 390.24 311.67 T
(ALIGN\050FS\051) 398.4 311.67 T
(FP) 390.24 302.67 T
(ALIGN\050FT\051) 398.4 302.67 T
(SET_FPR_D\050FD, FPR_D\050FS\051 * FPR_D\050FT\051\051\051) 390.24 293.67 T
0 9 Q
(DIV) 318.24 274 T
(.S) 333.43 274 T
1 F
(:) 340.69 274 T
(Di) 390.24 274 T
(vide \337oating point, single precision.) 399.02 274 T
(Opcode:) 330.24 263 T
(0x76) 390.24 263 T
(F) 330.24 253 T
(ormat:) 335.11 253 T
(DIV) 390.24 253 T
(.S fd,fs,ft) 405.07 253 T
(Semantics:) 330.24 243 T
1 8 Q
(FP) 390.24 243 T
(ALIGN\050FD\051) 398.4 243 T
(FP) 390.24 233.67 T
(ALIGN\050FS\051) 398.4 233.67 T
(FP) 390.24 224.67 T
(ALIGN\050FT\051) 398.4 224.67 T
(DIV0\050FPR_F\050FT\051\051) 390.24 215.67 T
(SET_FPR_F\050FD, FPR_F\050FS\051 / FPR_F\050FT\051\051\051) 390.24 206.67 T
0 9 Q
(DIV) 318.24 187 T
(.D) 333.43 187 T
1 F
(:) 342.18 187 T
(Di) 390.24 187 T
(vide \337oating point, double precision.) 399.02 187 T
(Opcode:) 330.24 176 T
(0x77) 390.24 176 T
(F) 330.24 166 T
(ormat:) 335.11 166 T
(DIV) 390.24 166 T
(.D fd,fs,ft) 405.07 166 T
(Semantics:) 330.24 156 T
1 8 Q
(FP) 390.24 156 T
(ALIGN\050FD\051) 398.4 156 T
(FP) 390.24 146.67 T
(ALIGN\050FS\051) 398.4 146.67 T
(FP) 390.24 137.67 T
(ALIGN\050FT\051) 398.4 137.67 T
(DIV0\050FPR_D\050FT\051\051) 390.24 128.67 T
(SET_FPR_D\050FD, FPR_D\050FS\051 / FPR_D\050FT\051\051\051) 390.24 119.67 T
0 9 Q
(ABS.S) 318.24 100 T
1 F
(:) 343 100 T
(Absolute v) 390.24 100 T
(alue, single precision.) 429.26 100 T
(Opcode:) 330.24 89 T
(0x78) 390.24 89 T
(F) 330.24 79 T
(ormat:) 335.11 79 T
(ABS.S fd,fs) 390.24 79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(15) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(Semantics:) 66 732 T
(FP) 126 732 T
(ALIGN\050FD\051) 135.18 732 T
(FP) 126 722 T
(ALIGN\050FS\051) 135.18 722 T
(SET_FPR_F\050FD, f) 126 712 T
(abs\050\050double\051FPR_F\050FS\051\051\051\051) 193.92 712 T
0 F
(ABS.D) 54 692 T
1 F
(:) 80.25 692 T
(Absolute v) 126 692 T
(alue, double precision.) 165.02 692 T
(Opcode:) 66 681 T
(0x79) 126 681 T
(F) 66 671 T
(ormat:) 70.87 671 T
(ABS.D fd,fs) 126 671 T
(Semantics:) 66 661 T
(FP) 126 661 T
(ALIGN\050FD\051) 135.18 661 T
(FP) 126 651 T
(ALIGN\050FS\051) 135.18 651 T
(SET_FPR_D\050FD, f) 126 641 T
(abs\050FPR_D\050FS\051\051\051\051) 195.42 641 T
0 F
(MO) 54 621 T
(V) 69.05 621 T
(.S) 74.24 621 T
1 F
(:) 81.5 621 T
(Mo) 126 621 T
(v) 138.37 621 T
(e \337oating point v) 142.73 621 T
(alue, single precision.) 203.76 621 T
(Opcode:) 66 610 T
(0x7a) 126 610 T
(F) 66 600 T
(ormat:) 70.87 600 T
(MO) 126 600 T
(V) 140.05 600 T
(.S fd,fs) 145.39 600 T
(Semantics:) 66 590 T
1 8 Q
(FP) 126 590 T
(ALIGN\050FD\051) 134.16 590 T
(FP) 126 580.67 T
(ALIGN\050FS\051) 134.16 580.67 T
(SET_FPR_F\050FD, FPR_F\050FS\051\051) 126 571.67 T
0 9 Q
(MO) 54 552 T
(V) 69.05 552 T
(.D) 74.24 552 T
1 F
(:) 82.99 552 T
(Mo) 126 552 T
(v) 138.37 552 T
(e \337oating point v) 142.73 552 T
(alue, double precision.) 203.76 552 T
(Opcode:) 66 541 T
(0x7b) 126 541 T
(F) 66 531 T
(ormat:) 70.87 531 T
(MO) 126 531 T
(V) 140.05 531 T
(.D fd,fs) 145.39 531 T
(Semantics:) 66 521 T
1 8 Q
(FP) 126 521 T
(ALIGN\050FD\051) 134.16 521 T
(FP) 126 511.67 T
(ALIGN\050FS\051) 134.16 511.67 T
(SET_FPR_D\050FD, FPR_D\050FS\051\051) 126 502.67 T
0 9 Q
(NEG.S) 54 483 T
1 F
(:) 80.76 483 T
(Ne) 126 483 T
(g) 136.36 483 T
(ate \337oating point v) 140.81 483 T
(alue, single precision.) 208.34 483 T
(Opcode:) 66 472 T
(0x7c) 126 472 T
(F) 66 462 T
(ormat:) 70.87 462 T
(NEG.S fd,fs) 126 462 T
(Semantics:) 66 452 T
1 8 Q
(FP) 126 452 T
(ALIGN\050FD\051) 134.16 452 T
(FP) 126 442.67 T
(ALIGN\050FS\051) 134.16 442.67 T
(SET_FPR_F\050FD, -FPR_F\050FS\051\051) 126 433.67 T
0 9 Q
(NEG.D) 54 414 T
1 F
(:) 82.25 414 T
(Ne) 126 414 T
(g) 136.36 414 T
(ate \337oating point v) 140.81 414 T
(alue, double precision.) 208.34 414 T
(Opcode:) 66 403 T
(0x7d) 126 403 T
(F) 66 393 T
(ormat:) 70.87 393 T
(NEG.D fd,fs) 126 393 T
(Semantics:) 66 383 T
1 8 Q
(FP) 126 383 T
(ALIGN\050FD\051) 134.16 383 T
(FP) 126 373.67 T
(ALIGN\050FS\051) 134.16 373.67 T
(SET_FPR_D\050FD, -FPR_D\050FS\051\051) 126 364.67 T
0 9 Q
(CVT) 54 345 T
(.S.D) 72.19 345 T
1 F
(:) 88.19 345 T
(Con) 126 345 T
(v) 140.64 345 T
(ert double precision to single precision.) 145.01 345 T
(Opcode:) 66 334 T
(0x80) 126 334 T
(F) 66 324 T
(ormat:) 70.87 324 T
(CVT) 126 324 T
(.S.D fd,fs) 143.33 324 T
(Semantics:) 66 314 T
1 8 Q
(FP) 126 314 T
(ALIGN\050FD\051) 134.16 314 T
(FP) 126 304.67 T
(ALIGN\050FS\051) 134.16 304.67 T
(SET_FPR_D\050FD, -FPR_D\050FS\051\051) 126 295.67 T
0 9 Q
(CVT) 54 276 T
(.S.W) 72.19 276 T
1 F
(:) 90.36 276 T
(Con) 126 276 T
(v) 140.64 276 T
(ert inte) 145.01 276 T
(ger to single precision.) 170.12 276 T
(Opcode:) 66 265 T
(0x81) 126 265 T
(F) 66 255 T
(ormat:) 70.87 255 T
(CVT) 126 255 T
(.S.W fd,fs) 143.33 255 T
(Semantics:) 66 245 T
1 8 Q
(FP) 126 245 T
(ALIGN\050FD\051) 134.16 245 T
(FP) 126 235.67 T
(ALIGN\050FS\051) 134.16 235.67 T
(SET_FPR_F\050FD, \050\337oat\051FPR_L\050FS\051\051) 126 226.67 T
0 9 Q
(CVT) 54 207 T
(.D) 72.19 207 T
(.S) 80.76 207 T
1 F
(:) 88.01 207 T
(Con) 126 207 T
(v) 140.64 207 T
(ert single precision to double precision.) 145.01 207 T
(Opcode:) 66 196 T
(0x82) 126 196 T
(F) 66 186 T
(ormat:) 70.87 186 T
(CVT) 126 186 T
(.D.S fd,fs) 143.33 186 T
(Semantics:) 66 176 T
1 8 Q
(FP) 126 176 T
(ALIGN\050FD\051) 134.16 176 T
(FP) 126 166.67 T
(ALIGN\050FS\051) 134.16 166.67 T
(SET_FPR_D\050FD,\050double\051FPR_F\050FS\051\051) 126 157.67 T
0 9 Q
(CVT) 54 138 T
(.D) 72.19 138 T
(.W) 80.76 138 T
1 F
(:) 91.67 138 T
(Con) 126 138 T
(v) 140.64 138 T
(ert inte) 145.01 138 T
(ger to double precision.) 170.12 138 T
(Opcode:) 66 127 T
(0x83) 126 127 T
(F) 66 117 T
(ormat:) 70.87 117 T
(CVT) 126 117 T
(.D.W fd,fs) 143.33 117 T
(Semantics:) 66 107 T
1 8 Q
(FP) 126 107 T
(ALIGN\050FD\051) 134.16 107 T
(FP) 126 97.67 T
(ALIGN\050FS\051) 134.16 97.67 T
(SET_FPR_D\050FD,\050double\051FPR_L\050FS\051\051) 126 88.67 T
0 9 Q
(CVT) 318.24 732 T
(.W) 336.43 732 T
(.S) 346.85 732 T
1 F
(:) 354.11 732 T
(Con) 390.24 732 T
(v) 404.88 732 T
(ert single precision to inte) 409.25 732 T
(ger) 502.61 732 T
(.) 513.6 732 T
(Opcode:) 330.24 721 T
(0x84) 390.24 721 T
(F) 330.24 711 T
(ormat:) 335.11 711 T
(CVT) 390.24 711 T
(.W) 407.57 711 T
(.S fd,fs) 417.49 711 T
(Semantics:) 330.24 701 T
1 8 Q
(FP) 390.24 701 T
(ALIGN\050FD\051) 398.4 701 T
(FP) 390.24 691.67 T
(ALIGN\050FS\051) 398.4 691.67 T
(SET_FPR_L\050FD, \050long\051FPR_F\050FS\051\051) 390.24 682.67 T
0 9 Q
(CVT) 318.24 663 T
(.W) 336.43 663 T
(.D) 346.85 663 T
1 F
(:) 355.6 663 T
(Con) 390.24 663 T
(v) 404.88 663 T
(ert double precision to inte) 409.25 663 T
(ger) 505.6 663 T
(.) 516.6 663 T
(Opcode:) 330.24 652 T
(0x85) 390.24 652 T
(F) 330.24 642 T
(ormat:) 335.11 642 T
(CVT) 390.24 642 T
(.W) 407.57 642 T
(.D fd,fs) 417.49 642 T
(Semantics:) 330.24 632 T
1 8 Q
(FP) 390.24 632 T
(ALIGN\050FD\051) 398.4 632 T
(FP) 390.24 622.67 T
(ALIGN\050FS\051) 398.4 622.67 T
(SET_FPR_L\050FD, \050long\051FPR_D\050FS\051\051) 390.24 613.67 T
0 9 Q
(C.EQ) 318.24 594 T
(.S) 339.81 594 T
1 F
(:) 347.07 594 T
(T) 390.24 594 T
(est if equal, single precision.) 395.11 594 T
(Opcode:) 330.24 583 T
(0x90) 390.24 583 T
(F) 330.24 573 T
(ormat:) 335.11 573 T
(C.EQ.S fs,ft) 390.24 573 T
(Semantics:) 330.24 563 T
1 8 Q
(FP) 390.24 563 T
(ALIGN\050FS\051) 398.4 563 T
(FP) 390.24 553.67 T
(ALIGN\050FT\051) 398.4 553.67 T
(SET_FCC\050FPR_F\050FS\051 == FPR_F\050FT\051\051) 390.24 544.67 T
0 9 Q
(C.EQ) 318.24 525 T
(.D) 339.81 525 T
1 F
(:) 348.56 525 T
(T) 390.24 525 T
(est if equal, double precision.) 395.11 525 T
(Opcode:) 330.24 514 T
(0x91) 390.24 514 T
(F) 330.24 504 T
(ormat:) 335.11 504 T
(C.EQ.D fs,ft) 390.24 504 T
(Semantics:) 330.24 494 T
1 8 Q
(FP) 390.24 494 T
(ALIGN\050FS\051) 398.4 494 T
(FP) 390.24 484 T
(ALIGN\050FT\051) 398.4 484 T
(SET_FCC\050FPR_D\050FS\051 == FPR_D\050FT\051\051) 390.24 474 T
0 9 Q
(C.L) 318.24 454 T
(T) 332.16 454 T
(.S) 337.36 454 T
1 F
(:) 344.61 454 T
(T) 390.24 454 T
(est if less than, single precision.) 395.11 454 T
(Opcode:) 330.24 443 T
(0x92) 390.24 443 T
(F) 330.24 433 T
(ormat:) 335.11 433 T
(C.L) 390.24 433 T
(T) 403.16 433 T
(.S fs,ft) 408 433 T
(Semantics:) 330.24 423 T
1 8 Q
(FP) 390.24 423 T
(ALIGN\050FS\051) 398.4 423 T
(FP) 390.24 413 T
(ALIGN\050FT\051) 398.4 413 T
(SET_FCC\050FPR_F\050FS\051 < FPR_F\050FT\051\051) 390.24 403 T
0 9 Q
(C.L) 318.24 383 T
(T) 332.16 383 T
(.D) 337.36 383 T
1 F
(:) 346.1 383 T
(T) 390.24 383 T
(est if less than, double precision.) 395.11 383 T
(Opcode:) 330.24 372 T
(0x93) 390.24 372 T
(F) 330.24 362 T
(ormat:) 335.11 362 T
(C.L) 390.24 362 T
(T) 403.16 362 T
(.D fs,ft) 408 362 T
(Semantics:) 330.24 352 T
1 8 Q
(FP) 390.24 352 T
(ALIGN\050FS\051) 398.4 352 T
(FP) 390.24 342.67 T
(ALIGN\050FT\051) 398.4 342.67 T
(SET_FCC\050FPR_D\050FS\051 < FPR_D\050FT\051\051) 390.24 333.67 T
0 9 Q
(C.LE.) 318.24 314 T
1 F
(S:) 341.24 314 T
(T) 390.24 314 T
(est if less than or equal, single precision.) 395.11 314 T
(Opcode:) 330.24 303 T
(0x94) 390.24 303 T
(F) 330.24 293 T
(ormat:) 335.11 293 T
(C.LE.S fs,ft) 390.24 293 T
(Semantics:) 330.24 283 T
1 8 Q
(FP) 390.24 283 T
(ALIGN\050FS\051) 398.4 283 T
(FP) 390.24 273.67 T
(ALIGN\050FT\051) 398.4 273.67 T
(SET_FCC\050FPR_F\050FS\051 <= FPR_F\050FT\051\051) 390.24 264.67 T
0 9 Q
(C.LE.D) 318.24 245 T
1 F
(:) 347.74 245 T
(T) 390.24 245 T
(est if less than or equal, double precision.) 395.11 245 T
(Opcode:) 330.24 234 T
(0x95) 390.24 234 T
(F) 330.24 224 T
(ormat:) 335.11 224 T
(C.LE.D fs,ft) 390.24 224 T
(Semantics:) 330.24 214 T
1 8 Q
(FP) 390.24 214 T
(ALIGN\050FS\051) 398.4 214 T
(FP) 390.24 204.67 T
(ALIGN\050FT\051) 398.4 204.67 T
(SET_FCC\050FPR_D\050FS\051 <= FPR_D\050FT\051\051) 390.24 195.67 T
0 9 Q
(SQR) 318.24 176 T
(T) 336.38 176 T
(.S) 341.58 176 T
1 F
(:) 348.83 176 T
(Square root, single precision.) 390.24 176 T
(Opcode:) 330.24 165 T
(0x96) 390.24 165 T
(F) 330.24 155 T
(ormat:) 335.11 155 T
(SQR) 390.24 155 T
(T) 407.2 155 T
(.S fd,fs) 412.04 155 T
(Semantics:) 330.24 145 T
1 8 Q
(FP) 390.24 145 T
(ALIGN\050FD\051) 398.4 145 T
(FP) 390.24 135.67 T
(ALIGN\050FS\051) 398.4 135.67 T
(SET_FPR_F\050FD,sqrt\050\050double\051FPR_F\050FS\051\051\051) 390.24 126.67 T
0 9 Q
(SQR) 318.24 107 T
(T) 336.38 107 T
(.D) 341.58 107 T
1 F
(:) 350.33 107 T
(Square root, double precision.) 390.24 107 T
(Opcode:) 330.24 96 T
(0x97) 390.24 96 T
(F) 330.24 86 T
(ormat:) 335.11 86 T
(SQR) 390.24 86 T
(T) 407.2 86 T
(.D fd,fs) 412.04 86 T
(Semantics:) 330.24 76 T
1 8 Q
(FP) 390.24 76 T
(ALIGN\050FD\051) 398.4 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(16) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 8 Q
(FP) 126 732.67 T
(ALIGN\050FS\051) 134.16 732.67 T
(SET_FPR_D\050FD, sqrt\050FPR_D\050FS\051\051\051) 126 723.67 T
0 11 Q
(A.5 Miscellaneous instructions) 54 701.67 T
0 9 Q
(NOP) 54 685 T
1 F
(:) 73 685 T
(No operation.) 126 685 T
(Opcode:) 66 674 T
(0x00) 126 674 T
(F) 66 664 T
(ormat:) 70.87 664 T
(NOP) 126 664 T
(Semantics:) 66 654 T
0 F
(SYSCALL) 54 634 T
1 F
(:) 95.51 634 T
(System call.) 126 634 T
(Opcode:) 66 623 T
(0xa0) 126 623 T
(F) 66 613 T
(ormat:) 70.87 613 T
(SYSCALL) 126 613 T
(Semantics:) 66 603 T
(See Appendix) 126 603 T
(B for details) 178.99 603 T
0 F
(BREAK) 54 583 T
1 F
(:) 86 583 T
(Declare a program error) 126 583 T
(.) 212.21 583 T
(Opcode:) 66 572 T
(0xa1) 126 572 T
(F) 66 562 T
(ormat:) 70.87 562 T
(BREAK uimm) 126 562 T
(Semantics:) 66 552 T
-0.79 (Actions are simulator) 126 552 P
-0.79 (-dependent.  T) 201.74 552 P
-0.79 (ypically) 251.68 552 P
-0.79 (, an) 280.09 552 P
(error message is printed and abort\050\051 is called.) 126 542 T
0 F
(LUI) 54 522 T
1 F
(:) 70 522 T
(Load upper immediate.) 126 522 T
(Opcode:) 66 511 T
(0xa2) 126 511 T
(F) 66 501 T
(ormat:) 70.87 501 T
(LUI uimm) 126 501 T
(Semantics:) 66 491 T
1 8 Q
(SET_GPR\050R) 126 491 T
(T) 167.3 491 T
(, UIMM << 16\051) 171.6 491 T
0 9 Q
(MFC1) 54 471 T
1 F
(:) 78.99 471 T
1.88 (Mo) 126 471 P
1.88 (v) 138.37 471 P
1.88 (e from \337oating point to inte) 142.73 471 P
1.88 (ger re) 251.27 471 P
1.88 (gister) 273.76 471 P
(\336le.) 126 460 T
(Opcode:) 66 449 T
(0xa3) 126 449 T
(F) 66 439 T
(ormat:) 70.87 439 T
(MFC1 rt,fs) 126 439 T
(Semantics:) 66 429 T
1 8 Q
(SET_GPR\050R) 126 429 T
(T) 167.3 429 T
(, FPR_L\050FS\051\051) 171.6 429 T
0 9 Q
(MTC1) 54 409 T
1 F
(:) 79.5 409 T
1.88 (Mo) 126 409 P
1.88 (v) 138.37 409 P
1.88 (e from inte) 142.73 409 P
1.88 (ger to \337oating point re) 185.86 409 P
1.88 (gister) 273.76 409 P
(\336le.) 126 398 T
(Opcode:) 66 387 T
(0xa5) 126 387 T
(F) 66 377 T
(ormat:) 70.87 377 T
(MTC1 rt,fs) 126 377 T
(Semantics:) 66 367 T
(SET_FPR_L\050FS, GPR\050R) 126 367 T
(T\051\051) 215.98 367 T
0 12 Q
(B System call de\336nitions) 54 343 T
1 9 Q
0.06 (This appendix lists all system calls supported by the simulators) 66 326 P
0.68 (with their system call code \050syscode\051, interf) 54 316 P
0.68 (ace speci\336cation, and) 215.18 316 P
2.33 (appropriate POSIX Unix reference. Systems calls are initiated) 54 306 P
0.06 (with the SYSCALL instruction. Prior to e) 54 296 P
0.06 (x) 204.47 296 P
0.06 (ecution of a SYSCALL) 208.84 296 P
1.93 (instruction, re) 54 286 P
1.93 (gister $) 105.79 286 P
3 F
1.93 (v) 134.48 286 P
1 F
1.93 (0 should be loaded with the system call) 138.47 286 P
0.28 (code. The ar) 54 276 P
0.28 (guments of the system call interf) 99.14 276 P
0.28 (ace prototype should) 218.2 276 P
0.01 (be loaded into re) 54 266 P
0.01 (gisters $) 114.14 266 P
3 F
0.01 (a) 144.41 266 P
1 F
0.01 (0 - $) 148.91 266 P
3 F
0.01 (a) 165.43 266 P
1 F
0.01 (3 in the order speci\336ed by the sys-) 169.93 266 P
(tem call interf) 54 256 T
(ace prototype,) 104.4 256 T
3 F
(e) 157.63 256 T
(.g) 161.5 256 T
(.) 168.11 256 T
1 F
(, for:) 170.36 256 T
4 8 Q
(read\050int fd, char *buf, int nbyte\051,) 66.02 246.67 T
1 9 Q
1.05 (0x03 is loaded into $) 54 236 P
3 F
1.05 (v) 133.68 236 P
1 F
1.05 (0,) 137.68 236 P
1 8 Q
0.93 (fd) 147.73 236 P
1 9 Q
1.05 ( is loaded into $) 154.39 236 P
3 F
1.05 (a) 216.07 236 P
1 F
1.05 (0,) 220.57 236 P
1 8 Q
0.93 (b) 230.62 236 P
0.93 (uf) 234.46 236 P
1 9 Q
1.05 ( into $) 241.12 236 P
3 F
1.05 (a) 266.22 236 P
1 F
1.05 (1, and) 270.72 236 P
1 8 Q
(nbyte) 54 225 T
1 9 Q
( into $) 71.78 225 T
3 F
(a) 94.78 225 T
1 F
(2.) 99.28 225 T
0 F
(EXIT) 54 203 T
1 F
(:) 75.56 203 T
(Exit process.) 126 203 T
(Syscode:) 66 192 T
(0x01) 126 192 T
(Interf) 66 182 T
(ace:) 85.9 182 T
(v) 126 182 T
(oid e) 130.32 182 T
(xit\050int status\051;) 147.93 182 T
(Semantics:) 66 172 T
(See e) 126 172 T
(xit\0502\051.) 145.11 172 T
0 F
(READ) 54 151 T
1 F
(:) 79.5 151 T
(Read from \336le to b) 126 151 T
(uf) 193.82 151 T
(fer) 201.09 151 T
(.) 210.58 151 T
(Syscode:) 66 140 T
(0x03) 126 140 T
(Interf) 66 130 T
(ace:) 85.9 130 T
(int read\050int fd, char *b) 126 130 T
(uf, int nbyte\051;) 206.55 130 T
(Semantics:) 66 120 T
(See read\0502\051.) 126 120 T
0 F
(WRITE) 54 99 T
1 F
(:) 85 99 T
(Write from a b) 126 99 T
(uf) 179.05 99 T
(fer to a \336le.) 186.33 99 T
(Syscode:) 66 88 T
(0x04) 126 88 T
(Interf) 66 78 T
(ace:) 85.9 78 T
(int write\050int fd, char *b) 126 78 T
(uf, int nbyte\051;) 209.56 78 T
(Semantics:) 330.24 732 T
(See write\0502\051.) 390.24 732 T
0 F
(OPEN) 318.24 711 T
1 F
(:) 343.24 711 T
(Open a \336le.) 390.24 711 T
(Syscode:) 330.24 700 T
(0x05) 390.24 700 T
(Interf) 330.24 690 T
(ace:) 350.14 690 T
(int open\050char *fname, int \337ags, int mode\051;) 390.24 690 T
(Semantics:) 330.24 680 T
(See open\0502\051.) 390.24 680 T
0 F
(CLOSE) 318.24 659 T
1 F
(:) 348.75 659 T
(Close a \336le.) 390.24 659 T
(Syscode:) 330.24 648 T
(0x06) 390.24 648 T
(Interf) 330.24 638 T
(ace:) 350.14 638 T
(int close\050int fd\051;) 390.24 638 T
(Semantics:) 330.24 628 T
(See close\0502\051.) 390.24 628 T
0 F
(CREA) 318.24 607 T
(T) 342.88 607 T
1 F
(:) 348.43 607 T
(Create a \336le.) 390.24 607 T
(Syscode:) 330.24 596 T
(0x08) 390.24 596 T
(Interf) 330.24 586 T
(ace:) 350.14 586 T
(int creat\050char *fname, int mode\051;) 390.24 586 T
(Semantics:) 330.24 576 T
(See creat\0502\051.) 390.24 576 T
0 F
(UNLINK) 318.24 555 T
1 F
(:) 354.24 555 T
(Delete a \336le.) 390.24 555 T
(Syscode:) 330.24 544 T
(0x0a) 390.24 544 T
(Interf) 330.24 534 T
(ace:) 350.14 534 T
(int unlink\050char *fname\051;) 390.24 534 T
(Semantics:) 330.24 524 T
(See unlink\0502\051.) 390.24 524 T
0 F
(CHDIR) 318.24 503 T
1 F
(:) 348.24 503 T
(Change process directory) 390.24 503 T
(.) 481.13 503 T
(Syscode:) 330.24 492 T
(0x0c) 390.24 492 T
(Interf) 330.24 482 T
(ace:) 350.14 482 T
(int chdir\050char *path\051;) 390.24 482 T
(Semantics:) 330.24 472 T
(See chdir\0502\051.) 390.24 472 T
0 F
(CHMOD) 318.24 451 T
1 F
(:) 353.74 451 T
(Change \336le permissions.) 390.24 451 T
(Syscode:) 330.24 440 T
(0x0f) 390.24 440 T
(Interf) 330.24 430 T
(ace:) 350.14 430 T
(int chmod\050int *fname, int mode\051;) 390.24 430 T
(Semantics:) 330.24 420 T
(See chmod\0502\051.) 390.24 420 T
0 F
(CHO) 318.24 399 T
(WN) 338.29 399 T
1 F
(:) 353.79 399 T
(Change \336le o) 390.24 399 T
(wner and group.) 438.01 399 T
(Syscode:) 330.24 388 T
(0x10) 390.24 388 T
(Interf) 330.24 378 T
(ace:) 350.14 378 T
(int cho) 390.24 378 T
(wn\050char *fname, int o) 414.77 378 T
(wner) 494.02 378 T
(, int group\051;) 511.65 378 T
(Semantics:) 330.24 368 T
(See cho) 390.24 368 T
(wn\0502\051.) 418.26 368 T
0 F
(BRK) 318.24 347 T
1 F
(:) 337.74 347 T
(Change process break address.) 390.24 347 T
(Syscode:) 330.24 336 T
(0x11) 390.24 336 T
(Interf) 330.24 326 T
(ace:) 350.14 326 T
(int brk\050long addr\051;) 390.24 326 T
(Semantics:) 330.24 316 T
(See brk\0502\051.) 390.24 316 T
0 F
(LSEEK) 318.24 295 T
1 F
(:) 348.26 295 T
(Mo) 390.24 295 T
(v) 402.61 295 T
(e \336le pointer) 406.97 295 T
(.) 451.97 295 T
(Syscode:) 330.24 284 T
(0x13) 390.24 284 T
(Interf) 330.24 274 T
(ace:) 350.14 274 T
(long lseek\050int fd, long of) 390.24 274 T
(fset, int whence\051;) 479.26 274 T
(Semantics:) 330.24 264 T
(See lseek\0502\051.) 390.24 264 T
0 F
(GETPID) 318.24 243 T
1 F
(:) 352.75 243 T
(Get process identi\336er) 390.24 243 T
(.) 466.73 243 T
(Syscode:) 330.24 232 T
(0x14) 390.24 232 T
(Interf) 330.24 222 T
(ace:) 350.14 222 T
(int getpid\050v) 390.24 222 T
(oid\051;) 431.81 222 T
(Semantics:) 330.24 212 T
(See getpid\0502\051.) 390.24 212 T
0 F
(GETUID) 318.24 191 T
1 F
(:) 353.74 191 T
(Get user identi\336er) 390.24 191 T
(.) 454.73 191 T
(Syscode:) 330.24 180 T
(0x18) 390.24 180 T
(Interf) 330.24 170 T
(ace:) 350.14 170 T
(int getuid\050v) 390.24 170 T
(oid\051;) 431.81 170 T
(Semantics:) 330.24 160 T
(See getuid\0502\051.) 390.24 160 T
0 F
(A) 318.24 139 T
(CCESS) 324.24 139 T
1 F
(:) 353.25 139 T
(Determine accessibility of a \336le.) 390.24 139 T
(Syscode:) 330.24 128 T
(0x21) 390.24 128 T
(Interf) 330.24 118 T
(ace:) 350.14 118 T
(int access\050char *fname, int mode\051;) 390.24 118 T
(Semantics:) 330.24 108 T
(See access\0502\051.) 390.24 108 T
0 F
(ST) 318.24 87 T
(A) 328.44 87 T
(T) 334.08 87 T
1 F
(:) 339.63 87 T
(Get \336le status.) 390.24 87 T
(Syscode:) 330.24 76 T
(0x26) 390.24 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(17) 301.07 40.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 9 Q
(Interf) 66 732 T
(ace:) 85.9 732 T
(struct stat) 126 732 T
({) 126 722 T
(short) 133.2 712 T
(st_de) 198.57 712 T
(v;) 217.35 712 T
(long) 133.2 702 T
(st_ino;) 198.57 702 T
(unsigned short) 133.2 692 T
(st_mode;) 198.57 692 T
(short) 133.2 682 T
(st_nlink;) 198.57 682 T
(short) 133.2 672 T
(st_uid;) 198.57 672 T
(short) 133.2 662 T
(st_gid;) 198.57 662 T
(short) 133.2 652 T
(st_rde) 198.57 652 T
(v;) 220.34 652 T
(int) 133.2 642 T
(st_size;) 198.57 642 T
(int) 133.2 632 T
(st_atime;) 198.57 632 T
(int) 133.2 622 T
(st_spare1;) 198.57 622 T
(int) 133.2 612 T
(st_mtime;) 198.57 612 T
(int) 133.2 602 T
(st_spare2;) 198.57 602 T
(int) 133.2 592 T
(st_ctime;) 198.57 592 T
(int) 133.2 582 T
(st_spare3;) 198.57 582 T
(long) 133.2 572 T
(st_blksize;) 198.57 572 T
(long) 133.2 562 T
(st_blocks;) 198.57 562 T
(long) 133.2 552 T
(st_gennum;) 198.57 552 T
(long) 133.2 542 T
(st_spare4;) 198.57 542 T
(};) 126 532 T
(int stat\050char *fname, struct stat *b) 126 522 T
(uf\051;) 248.3 522 T
(Semantics:) 66 512 T
(See stat\0502\051.) 126 512 T
0 F
(LST) 54 491 T
(A) 70.2 491 T
(T) 75.84 491 T
1 F
(:) 81.4 491 T
(Get \336le status \050and don\325) 126 491 T
(t dereference links\051.) 212.33 491 T
(Syscode:) 66 480 T
(0x28) 126 480 T
(Interf) 66 470 T
(ace:) 85.9 470 T
(int lstat\050char *fname, struct stat *b) 126 470 T
(uf\051;) 250.8 470 T
(Semantics:) 66 460 T
(See lstat\0502\051.) 126 460 T
0 F
(DUP) 54 439 T
1 F
(:) 72.5 439 T
(Duplicate a \336le descriptor) 126 439 T
(.) 218.74 439 T
(Syscode:) 66 428 T
(0x29) 126 428 T
(Interf) 66 418 T
(ace:) 85.9 418 T
(int dup\050int fd\051;) 126 418 T
(Semantics:) 66 408 T
(See dup\0502\051.) 126 408 T
0 F
(PIPE) 54 387 T
1 F
(:) 74.5 387 T
(Create an interprocess comm. channel.) 126 387 T
(Syscode:) 66 376 T
(0x2a) 126 376 T
(Interf) 66 366 T
(ace:) 85.9 366 T
(int pipe\050int fd[2]\051;) 126 366 T
(Semantics:) 66 356 T
(See pipe\0502\051.) 126 356 T
0 F
(GETGID) 54 335 T
1 F
(:) 90.01 335 T
(Get group identi\336er) 126 335 T
(.) 196.5 335 T
(Syscode:) 66 324 T
(0x2f) 126 324 T
(Interf) 66 314 T
(ace:) 85.9 314 T
(int getgid\050v) 126 314 T
(oid\051;) 167.57 314 T
(Semantics:) 66 304 T
(See getgid\0502\051.) 126 304 T
0 F
(IOCTL) 54 283 T
1 F
(:) 83.01 283 T
(De) 126 283 T
(vice control interf) 136.27 283 T
(ace.) 200.66 283 T
(Syscode:) 66 272 T
(0x36) 126 272 T
(Interf) 66 262 T
(ace:) 85.9 262 T
(int ioctl\050int fd, int request, char *ar) 126 262 T
(g\051;) 251.82 262 T
(Semantics:) 66 252 T
(See ioctl\0502\051.) 126 252 T
0 F
(FST) 54 231 T
(A) 69.7 231 T
(T) 75.34 231 T
1 F
(:) 80.89 231 T
(Get \336le descriptor status.) 126 231 T
(Syscode:) 66 220 T
(0x3e) 126 220 T
(Interf) 66 210 T
(ace:) 85.9 210 T
(int fstat\050int fd, struct stat *b) 126 210 T
(uf\051;) 225.82 210 T
(Semantics:) 66 200 T
(See fstat\0502\051.) 126 200 T
0 F
(GETP) 54 179 T
(A) 77.84 179 T
(GESIZE) 83.84 179 T
1 F
(:) 117.36 179 T
(Get page size.) 126 179 T
(Syscode:) 66 168 T
(0x40) 126 168 T
(Interf) 66 158 T
(ace:) 85.9 158 T
(int getpagesize\050v) 126 158 T
(oid\051;) 187.06 158 T
(Semantics:) 66 148 T
(See getpagesize\0502\051.) 126 148 T
0 F
(GETDT) 54 127 T
(ABLESIZE) 84.7 127 T
1 F
(: Get \336le descriptor table size.) 129.72 127 T
(Syscode:) 66 116 T
(0x59) 126 116 T
(Interf) 66 106 T
(ace:) 85.9 106 T
(int getdtablesize\050v) 126 106 T
(oid\051;) 192.06 106 T
(Semantics:) 66 96 T
(See getdtablesize\0502\051.) 126 96 T
0 F
(DUP2) 54 75 T
1 F
(:) 77 75 T
(Duplicate a \336le descriptor) 126 75 T
(.) 218.74 75 T
(Syscode:) 330.24 732 T
(0x5a) 390.24 732 T
(Interf) 330.24 722 T
(ace:) 350.14 722 T
(int dup2\050int fd1, int fd2\051;) 390.24 722 T
(Semantics:) 330.24 712 T
(See dup2\0502\051.) 390.24 712 T
0 F
(FCNTL) 318.24 691 T
1 F
(:) 348.74 691 T
(File control.) 390.24 691 T
(Syscode:) 330.24 680 T
(0x5c) 390.24 680 T
(Interf) 330.24 670 T
(ace:) 350.14 670 T
(int fcntl\050int fd, int cmd, int ar) 390.24 670 T
(g\051;) 495.58 670 T
(Semantics:) 330.24 660 T
(See fcntl\0502\051.) 390.24 660 T
0 F
(SELECT) 318.24 639 T
1 F
(:) 353.3 639 T
(Synchronous I/O multiple) 390.24 639 T
(xing.) 483.61 639 T
(Syscode:) 330.24 628 T
(0x5d) 390.24 628 T
(Interf) 330.24 618 T
(ace:) 350.14 618 T
(int select \050int width, fd_set *readfds, fd_set) 390.24 618 T
(*writefds, fd_set *e) 390.24 608 T
(xceptfds, struct time) 461.34 608 T
(v) 534.36 608 T
(al) 538.63 608 T
(*timeout\051;) 390.24 598 T
(Semantics:) 330.24 588 T
(See select\0502\051.) 390.24 588 T
0 F
(GETTIMEOFD) 318.24 567 T
(A) 379.93 567 T
(Y) 385.53 567 T
1 F
(: Get the date and time.) 391.2 567 T
(Syscode:) 330.24 556 T
(0x74) 390.24 556 T
(Interf) 330.24 546 T
(ace:) 350.14 546 T
(struct time) 390.24 546 T
(v) 428.27 546 T
(al {) 432.54 546 T
(long tv_sec;) 397.44 536 T
(long tv_usec;) 397.44 526 T
(};) 390.24 516 T
(struct int {) 397.44 506 T
(timezone tz_minuteswest;) 397.44 496 T
(int tz_dsttime;) 397.44 486 T
(};) 390.24 476 T
(int gettimeofday\050struct time) 390.24 466 T
(v) 490.51 466 T
(al *tp,) 494.78 466 T
(struct timezone *tzp\051;) 390.24 456 T
(Semantics:) 330.24 446 T
(See gettimeofday\0502\051.) 390.24 446 T
0 F
(WRITEV) 318.24 425 T
1 F
(:) 355.08 425 T
(Write output, v) 390.24 425 T
(ectored.) 444.85 425 T
(Syscode:) 330.24 414 T
(0x79) 390.24 414 T
(Interf) 330.24 404 T
(ace:) 350.14 404 T
(int write) 390.24 404 T
(v\050int fd, struct io) 420.26 404 T
(v) 480.63 404 T
(ec *io) 484.99 404 T
(v) 506.6 404 T
(, int cnt\051;) 510.52 404 T
(Semantics:) 330.24 394 T
(See write) 390.24 394 T
(v\0502\051.) 423.76 394 T
0 F
(UTIMES) 318.24 373 T
1 F
(:) 353.74 373 T
(Set \336le times.) 390.24 373 T
(Syscode:) 330.24 362 T
(0x8a) 390.24 362 T
(Interf) 330.24 352 T
(ace:) 350.14 352 T
(int utimes\050char *\336le, struct time) 390.24 352 T
(v) 505.26 352 T
(al *tvp\051;) 509.54 352 T
(Semantics:) 330.24 342 T
(See utimes\0502\051.) 390.24 342 T
0 F
(GETRLIMIT) 318.24 321 T
1 F
(:) 370.8 321 T
(Get maximum resource consumption.) 390.24 321 T
(Syscode:) 330.24 310 T
(0x90) 390.24 310 T
(Interf) 330.24 300 T
(ace:) 350.14 300 T
(int getrlimit\050int res, struct rlimit *rlp\051;) 390.24 300 T
(Semantics:) 330.24 290 T
(See getrlimit\0502\051.) 390.24 290 T
0 F
(SETRLIMIT) 318.24 269 T
1 F
(:) 368.8 269 T
(Set maximum resource consumption.) 390.24 269 T
(Syscode:) 330.24 258 T
(0x91) 390.24 258 T
(Interf) 330.24 248 T
(ace:) 350.14 248 T
(int setrlimit\050int res, struct rlimit *rlp\051;) 390.24 248 T
(Semantics:) 330.24 238 T
(See setrlimit\0502\051.) 390.24 238 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 17
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Courier
%%+ Times-Italic
%%+ Courier-Bold
%%+ Times-BoldItalic
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Symbol
%%EOF

